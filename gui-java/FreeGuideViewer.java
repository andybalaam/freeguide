/*
 * FreeGuide J2
 *
 * Copyright (c) 2001 by Andy Balaam
 *
 * Released under the GNU General Public License
 * with ABSOLUTELY NO WARRANTY.
 *
 * See the file COPYING for more information.
 */

import java.awt.Color;
import java.awt.Dimension;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Collections;
import java.util.GregorianCalendar;
import java.util.Vector;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;
import javax.swing.text.JTextComponent;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.parsers.SAXParserFactory;
import javax.xml.parsers.SAXParser;
import org.xml.sax.SAXException;
import org.xml.sax.helpers.DefaultHandler;

/**
 * A form that displays and prints TV listings.
 *
 * @author  Andy Balaam
 * @version 9
 */
public class FreeGuideViewer extends javax.swing.JFrame implements FreeGuideLauncher, FreeGuideSAXInterface {

    public FreeGuideViewer(FreeGuideLauncher newLauncher) {
		
		launcher = newLauncher;
		
		doingProgs = false;
		
		// Set up UI
        initComponents();
		
		// Set the date to today
		theDate = GregorianCalendar.getInstance();
		
		showScreen = true;
		
		// Set up custom UI elements
		initMyComponents();
		
		if(showScreen) {
			setVisible(true);
		}
		
		// Draw the programmes on the screen
        //updatePanel();

    }

	private void updatePanel() {
	
		FreeGuide.prefs.flushAll();
		
		// Find what channels the user has chosen
		getSelectedChannels();

		// Load the data
		loadProgrammeData();
	
		// If we've got programmes, draw them
		if(!noProgsFound) {
			drawProgrammes();
			updatePrintedGuide();
		} else if(!missingFiles) {
			
			String msg = "No programmes loaded.\n"+
				"You need to adjust your options.\n"+
				"Would you like to go to the options screen?";
				
			int r = JOptionPane.showConfirmDialog(this, msg, "Go to Options?", JOptionPane.YES_NO_OPTION );
			
			if(r==0) {
				
				hide();
				new FreeGuideOptions(this).show();
				showScreen = false;
				
			}
			
		}
		
    }
	
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        menuBar = new javax.swing.JMenuBar();
        topPanel = new javax.swing.JPanel();
        butGoToNow = new javax.swing.JButton();
        butPrev = new javax.swing.JButton();
        comTheDate = new javax.swing.JComboBox();
        butNext = new javax.swing.JButton();
        butPrint = new javax.swing.JButton();
        splitPane = new javax.swing.JSplitPane();
        printedGuideScrollPane = new javax.swing.JScrollPane();
        printedGuideAreaOld = new javax.swing.JTextArea();
        printedGuideArea = new javax.swing.JEditorPane();
        jSplitPane1 = new javax.swing.JSplitPane();
        channelNameScrollPane = new javax.swing.JScrollPane();
        channelNamePanel = new javax.swing.JPanel();
        outerPanel = new javax.swing.JPanel();
        innerScrollPane = new javax.swing.JScrollPane();
        innerPanel = new javax.swing.JPanel();
        timeScrollPane = new javax.swing.JScrollPane();
        timePanel = new FreeGuideTimePanel();
        jMenuBar2 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        menPrint = new javax.swing.JMenuItem();
        jSeparator5 = new javax.swing.JSeparator();
        menQuit = new javax.swing.JMenuItem();
        toolsMenu = new javax.swing.JMenu();
        menDownload = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JSeparator();
        menFavourites = new javax.swing.JMenuItem();
        menOptions = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        menUserGuide = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JSeparator();
        menAbout = new javax.swing.JMenuItem();

        getContentPane().setLayout(new java.awt.GridBagLayout());

        setTitle("FreeGuide J2 " + FreeGuide.version);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        butGoToNow.setText("Go To Now");
        butGoToNow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butGoToNowActionPerformed(evt);
            }
        });

        topPanel.add(butGoToNow);

        butPrev.setText("-");
        butPrev.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butPrevActionPerformed(evt);
            }
        });

        topPanel.add(butPrev);

        comTheDate.setEditable(true);
        comTheDate.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comTheDateItemStateChanged(evt);
            }
        });

        topPanel.add(comTheDate);

        butNext.setText("+");
        butNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butNextActionPerformed(evt);
            }
        });

        topPanel.add(butNext);

        butPrint.setText("Print Listing");
        butPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butPrintActionPerformed(evt);
            }
        });

        topPanel.add(butPrint);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 2);
        getContentPane().add(topPanel, gridBagConstraints);

        splitPane.setDividerLocation(180);
        splitPane.setDividerSize(5);
        splitPane.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        printedGuideAreaOld.setBackground(new java.awt.Color(230, 230, 230));
        printedGuideAreaOld.setEditable(false);
        printedGuideAreaOld.setLineWrap(true);
        printedGuideAreaOld.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        printedGuideScrollPane.setViewportView(printedGuideAreaOld);

        printedGuideArea.setEditable(false);
        printedGuideArea.setContentType("text/html");
        printedGuideScrollPane.setViewportView(printedGuideArea);

        splitPane.setRightComponent(printedGuideScrollPane);

        jSplitPane1.setDividerSize(5);
        channelNameScrollPane.setBorder(null);
        channelNameScrollPane.setVerticalScrollBarPolicy(javax.swing.JScrollPane.VERTICAL_SCROLLBAR_NEVER);
        channelNameScrollPane.setMinimumSize(new java.awt.Dimension(100, 100));
        channelNameScrollPane.setPreferredSize(new java.awt.Dimension(100, 100));
        channelNamePanel.setLayout(null);

        channelNamePanel.setBackground(new java.awt.Color(245, 245, 255));
        channelNameScrollPane.setViewportView(channelNamePanel);

        jSplitPane1.setLeftComponent(channelNameScrollPane);

        outerPanel.setLayout(new java.awt.GridBagLayout());

        outerPanel.setBackground(new java.awt.Color(245, 245, 255));
        innerScrollPane.setBorder(null);
        innerPanel.setLayout(null);

        innerPanel.setBackground(new java.awt.Color(245, 245, 255));
        innerPanel.setMaximumSize(new java.awt.Dimension(0, 0));
        innerPanel.setMinimumSize(new java.awt.Dimension(0, 0));
        innerPanel.setPreferredSize(new java.awt.Dimension(0, 0));
        innerScrollPane.setViewportView(innerPanel);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.9;
        gridBagConstraints.weighty = 0.9;
        outerPanel.add(innerScrollPane, gridBagConstraints);

        timeScrollPane.setBorder(null);
        timeScrollPane.setHorizontalScrollBarPolicy(javax.swing.JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
        timeScrollPane.setVerticalScrollBarPolicy(javax.swing.JScrollPane.VERTICAL_SCROLLBAR_NEVER);
        timeScrollPane.setMaximumSize(new java.awt.Dimension(24, 24));
        timeScrollPane.setMinimumSize(new java.awt.Dimension(24, 24));
        timeScrollPane.setPreferredSize(new java.awt.Dimension(24, 24));
        timePanel.setBackground(new java.awt.Color(245, 245, 255));
        timeScrollPane.setViewportView(timePanel);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.9;
        outerPanel.add(timeScrollPane, gridBagConstraints);

        jSplitPane1.setRightComponent(outerPanel);

        splitPane.setLeftComponent(jSplitPane1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.9;
        gridBagConstraints.weighty = 0.9;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        getContentPane().add(splitPane, gridBagConstraints);

        fileMenu.setText("File");
        menPrint.setText("Print Listing");
        menPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menPrintActionPerformed(evt);
            }
        });

        fileMenu.add(menPrint);
        fileMenu.add(jSeparator5);
        menQuit.setText("Quit");
        menQuit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menQuitActionPerformed(evt);
            }
        });

        fileMenu.add(menQuit);
        jMenuBar2.add(fileMenu);
        toolsMenu.setText("Tools");
        menDownload.setText("Download Listings...");
        menDownload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menDownloadActionPerformed(evt);
            }
        });

        toolsMenu.add(menDownload);
        toolsMenu.add(jSeparator3);
        menFavourites.setText("Favourites...");
        menFavourites.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menFavouritesActionPerformed(evt);
            }
        });

        toolsMenu.add(menFavourites);
        menOptions.setText("Options...");
        menOptions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menOptionsActionPerformed(evt);
            }
        });

        toolsMenu.add(menOptions);
        jMenuBar2.add(toolsMenu);
        helpMenu.setText("Help");
        menUserGuide.setText("User Guide...");
        helpMenu.add(menUserGuide);
        helpMenu.add(jSeparator4);
        menAbout.setText("About...");
        helpMenu.add(menAbout);
        jMenuBar2.add(helpMenu);
        setJMenuBar(jMenuBar2);

        pack();
        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setSize(new java.awt.Dimension(400, 300));
        setLocation((screenSize.width-400)/2,(screenSize.height-300)/2);
    }//GEN-END:initComponents

	private void comTheDateItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comTheDateItemStateChanged
		
		updateIfDateChanged();
			
	}//GEN-LAST:event_comTheDateItemStateChanged

	private void menPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menPrintActionPerformed
		
		writeOutAsHTML();
		
	}//GEN-LAST:event_menPrintActionPerformed

	private void butGoToNowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butGoToNowActionPerformed
		
		goToNow();
		
	}//GEN-LAST:event_butGoToNowActionPerformed

	private void menAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menAboutActionPerformed
		
		
		
	}//GEN-LAST:event_menAboutActionPerformed

	private void menUserGuideActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menUserGuideActionPerformed
		
		
		
	}//GEN-LAST:event_menUserGuideActionPerformed

	private void menOptionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menOptionsActionPerformed
		
		hide();
		new FreeGuideOptions(this).show();
		
	}//GEN-LAST:event_menOptionsActionPerformed

	private void menFavouritesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menFavouritesActionPerformed
				
		hide();
		new FreeGuideFavouritesList(this).show();
		
	}//GEN-LAST:event_menFavouritesActionPerformed

	private void menDownloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menDownloadActionPerformed
		
		hide();
		new FreeGuideDownloader(this).show();
		
	}//GEN-LAST:event_menDownloadActionPerformed

	private void menQuitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menQuitActionPerformed
		
		quit();
		
	}//GEN-LAST:event_menQuitActionPerformed

	private void butPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butPrintActionPerformed
		
		writeOutAsHTML();
		
	}//GEN-LAST:event_butPrintActionPerformed

	private void butNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butNextActionPerformed
		
		Calendar tmpDate = GregorianCalendar.getInstance();
		tmpDate.setTimeInMillis( theDate.getTimeInMillis() );

		tmpDate.add( Calendar.DAY_OF_YEAR, 1 );
		
		String datestr = comboBoxDateFormat.format(tmpDate.getTime());
		
		comTheDate.setSelectedItem(datestr);
		
	}//GEN-LAST:event_butNextActionPerformed

	private void butPrevActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butPrevActionPerformed
		
		Calendar tmpDate = GregorianCalendar.getInstance();
		tmpDate.setTimeInMillis( theDate.getTimeInMillis() );

		tmpDate.add( Calendar.DAY_OF_YEAR, -1 );

		String datestr = comboBoxDateFormat.format(tmpDate.getTime());

		comTheDate.setSelectedItem(datestr);
		
	}//GEN-LAST:event_butPrevActionPerformed

	private void addInnerScrollPaneAdjustmentListeners() {
		
		innerScrollPane.getHorizontalScrollBar().addAdjustmentListener(new java.awt.event.AdjustmentListener() {
			public void adjustmentValueChanged(java.awt.event.AdjustmentEvent evt) {
				innerScrollPaneHorAdjust(evt);
			}
		});
	
		innerScrollPane.getVerticalScrollBar().addAdjustmentListener(new java.awt.event.AdjustmentListener() {
			public void adjustmentValueChanged(java.awt.event.AdjustmentEvent evt) {
				innerScrollPaneVerAdjust(evt);
			}
		});
	}
	
	private void removeInnerScrollPaneAdjustmentListeners() {
		
		java.awt.event.AdjustmentListener[] l = innerScrollPane.getHorizontalScrollBar().getAdjustmentListeners();
		for(int i=0;i<l.length;i++) {
			innerScrollPane.getHorizontalScrollBar().removeAdjustmentListener(l[i]);
		}
		
		l = innerScrollPane.getVerticalScrollBar().getAdjustmentListeners();
		for(int i=0;i<l.length;i++) {
			innerScrollPane.getVerticalScrollBar().removeAdjustmentListener(l[i]);
		}
		
	}
	
	/**
	 * Add listeners to the two scrollbars in the GUI and put the relevant
	 * dates in the date list
	 */
    private void initMyComponents() {
	
		setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
		
		//  Do the listeners
		//addInnerScrollPaneAdjustmentListeners();
		// Now done after boxes are drawn

		// Make the dates list
		
		Calendar tmpDate = GregorianCalendar.getInstance();
		tmpDate.setTimeInMillis( theDate.getTimeInMillis() );
		
		for(int i=0;i<14;i++) {
			
			tmpDate.add( Calendar.DAY_OF_YEAR, 1 );
			comTheDate.addItem(comboBoxDateFormat.format(tmpDate.getTime()));
			
		}
		
		// Choose the current date
		String datestr = comboBoxDateFormat.format(theDate.getTime());
		comTheDate.setSelectedItem(datestr);
	
    }//initMyComponents
    
	private void goToNow() {
	
		// Get the date today
		Calendar now = GregorianCalendar.getInstance();
		
		FreeGuideTime timeNow = new FreeGuideTime(now);
		
		int tmpScr = timePanel.getNowScroll();
		
		timeScrollPane.getHorizontalScrollBar().setValue(tmpScr);
		innerScrollPane.getHorizontalScrollBar().setValue(tmpScr);
		
	}
	
	/**
	 * The event procedure for the horizontal scrollpane listener - just
	 * calls the scrollTime method.
	 */
    private void innerScrollPaneHorAdjust(java.awt.event.AdjustmentEvent evt) {
		scrollTime();
    }//innerScrollPaneHorAdjust
    
	/**
	 * The event procedure for the vertical scrollpane listener - just
	 * calls the scrollChannelNames method.
	 */
    private void innerScrollPaneVerAdjust(java.awt.event.AdjustmentEvent evt) {
		scrollChannelNames();
    }//innerScrollPaneVerAdjust
    
	/**
	 * The event listener for the form closing event - calls the quit method
	 */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        quit();
    }//GEN-LAST:event_exitForm

	/**
	 * Quits the program.
	 */
	private void quit() {
		
		// Ask the user whether to quit or not
		//if(JOptionPane.showConfirmDialog(this, "Are you sure you want to quit FreeGuide?", "Quit?", JOptionPane.YES_NO_OPTION)==0) {
			System.exit(0);
		//}
		
	}//quit
     
	/**
	 * Loads the programme data from a file and stores it in a class
	 * structure ready for display on the screen.
	 */
    private void loadProgrammeData() {
		
		String fs = System.getProperty("file.separator");
		
		// Are we missing any channel files?
		missingFiles = false;
		// Did we find no programmes?
		noProgsFound = true;
		
		earliest = GregorianCalendar.getInstance();
		earliest.add( Calendar.WEEK_OF_YEAR, 1);
		latest = GregorianCalendar.getInstance();
		latest.add( Calendar.WEEK_OF_YEAR, -1);
		
		programmes = new Vector();
		
		for(int curChan=0;curChan<channelNames.length;curChan++) {
		
			//channels[curChan] = new FreeGuideChannelDay(channelNames[curChan]);
        
			String wkDir = FreeGuide.prefs.performSubstitutions(FreeGuide.prefs.misc.get("working_directory"));
	
			SimpleDateFormat fmt = new SimpleDateFormat("yyyyMMdd");
			String datestr = fmt.format(theDate.getTime());
	
			String xmlFilename = wkDir+fs+channelIDs[curChan]+"-"+datestr+".fgd";
			
			if((new File(xmlFilename).exists())) {	// If the file exists
				
				FreeGuide.log.info("Opening programmes file "+xmlFilename);
				
				// Load it into memory and process it
				try {//ParserExceptions etc
	    
					DefaultHandler handler = new FreeGuideSAXHandler(this);
					SAXParserFactory factory = SAXParserFactory.newInstance();
					
					SAXParser saxParser = factory.newSAXParser();
		
					doingProgs=true;
		
					// Will be a different name for each channel and whatever
					// date we're on obviously
					saxParser.parse(xmlFilename, handler);
					
					doingProgs=false;
	    
				} catch(ParserConfigurationException e) {
					e.printStackTrace();
				} catch(SAXException e) {
					e.printStackTrace();
				} catch(java.io.IOException e) {
					e.printStackTrace();
				}//try
				
			} else { // If no file exists
				
				// Do nothing because no file exists
	    
				FreeGuide.log.warning("Listings file not found: "+xmlFilename);
				
				missingFiles = true;
				
			}//if
			
		}//for
		
		// If not everything we expected was there, ask to download more
		if(missingFiles) {
			
			String msg = "There are missing listings for this day.\n"+
				"Do you want to download more?";
				
			int r = JOptionPane.showConfirmDialog(this, msg, "Download listings?", JOptionPane.YES_NO_OPTION );
			
			if(r==0) {
				
				//hide();
				new FreeGuideDownloader(this).show();
				showScreen = false;
				
			}
			
		}
		
	}//loadProgrammeData
    
	/**
	 * Given the textarea displaying it, returns the programme.
	 *
	 * @param bx the JTextArea for a programme
	 * @returns  the programme referred to
	 */
	private FreeGuideProgramme getProgFromTextArea(JTextArea bx) {
		int i = textAreas.indexOf(bx);
		return (FreeGuideProgramme)programmes.get(i);
	}//getProgFromCheckbox

	/**
	 * The event procedure for a text area when it is clicked.
	 */
	private void jTextAreaClicked(java.awt.event.MouseEvent evt) {
		
		JTextArea txt = (JTextArea)evt.getSource();
		FreeGuideProgramme prog = getProgFromTextArea(txt);
		
		// Find out whether this is ticked
		if(tickedProgrammes.contains(prog)) {
			// Remove from ticked list

			txt.setBackground( FreeGuide.prefs.screen.getColor("programme_normal_colour", FreeGuide.PROGRAMME_NORMAL_COLOUR) );
			tickedProgrammes.remove(prog);
			
			FreeGuide.prefs.removeChoice(prog);
			
		} else {
			// Add to ticked list
			
			txt.setBackground( FreeGuide.prefs.screen.getColor("programme_chosen_colour", FreeGuide.PROGRAMME_CHOSEN_COLOUR) );
			tickedProgrammes.add(prog);
			
			FreeGuide.prefs.addChoice(prog);
			
		}
		
		updatePrintedGuide();
		
	}
    
	/**
	 * Scrolls the time panel to the same x-position as the main panel.
	 */
    private void scrollTime() {
		timeScrollPane.getHorizontalScrollBar().setValue(innerScrollPane.getHorizontalScrollBar().getValue());
    }//scrollTime
    
	/**
	 * Scrolls the channel names to the same y-position as the main panel.
	 */
    private void scrollChannelNames() {
		channelNameScrollPane.getVerticalScrollBar().setValue(innerScrollPane.getVerticalScrollBar().getValue());	
    }//scrollChannelNames
    
	/**
	 * Does the main work of displaying the stored programmes on screen.
	 */
	private void drawProgrammes() {

		removeInnerScrollPaneAdjustmentListeners();
		
		String lineBreak = System.getProperty("line.separator");
		
		// Read in viewing options
		int channelHeight = FreeGuide.prefs.screen.getInt("channel_height", FreeGuide.CHANNEL_HEIGHT);
		int halfVerGap = FreeGuide.prefs.screen.getInt("vertical_gap", FreeGuide.VERTICAL_GAP);
		int halfHorGap = FreeGuide.prefs.screen.getInt("horizontal_gap", FreeGuide.HORIZONTAL_GAP);
		int panelWidth = FreeGuide.prefs.screen.getInt("panel_width",FreeGuide.PANEL_WIDTH);
		
		int channelPanelWidth = FreeGuide.prefs.screen.getInt("channel_panel_width", FreeGuide.CHANNEL_PANEL_WIDTH);
	
		int tmpH = channelIDs.length*channelHeight;
		innerPanel.setPreferredSize(new java.awt.Dimension(panelWidth, tmpH));
		innerPanel.setMinimumSize(new java.awt.Dimension(panelWidth, tmpH));
		innerPanel.setMaximumSize(new java.awt.Dimension(panelWidth, tmpH));

		tmpH = timePanel.getPreferredSize().height;
		timePanel.setPreferredSize(new java.awt.Dimension(panelWidth, tmpH));
		timePanel.setMinimumSize(new java.awt.Dimension(panelWidth, tmpH));
		timePanel.setMaximumSize(new java.awt.Dimension(panelWidth, tmpH));
		
		Color tickedColour = FreeGuide.prefs.screen.getColor("programme_chosen_colour", FreeGuide.PROGRAMME_CHOSEN_COLOUR);
		Color nonTickedColour = FreeGuide.prefs.screen.getColor("programme_normal_colour", FreeGuide.PROGRAMME_NORMAL_COLOUR);
		Color channelColour = FreeGuide.prefs.screen.getColor("channel_colour", FreeGuide.CHANNEL_COLOUR);
	
		// Get the choices the user has made for today (if any)
		FreeGuideProgramme[] choices = FreeGuide.prefs.getChosenProgs();
		
		innerPanel.removeAll();
		channelNamePanel.removeAll();
		
		textAreas = new Vector();	// Vector to store all the textareas
		tickedProgrammes = new Vector();	// And whether they'return ticked
	
		// Temporal width in millisecs
		long temporalWidth = latest.getTimeInMillis()-earliest.getTimeInMillis();
	
		// Find the multiplier to help us position programmes
		double widthMultiplier = (double)panelWidth/(double)temporalWidth;
	
		channelNamePanel.setPreferredSize(new Dimension(channelPanelWidth, channelIDs.length*channelHeight+50));
	
		for(int c=0;c<channelIDs.length;c++) {
			
			JLabel ctxt = new JLabel(channelNames[c]);
			ctxt.setBounds(0, timeScrollPane.getHeight()+(halfVerGap*2)+(c*channelHeight)-1, channelNamePanel.getPreferredSize().width-1, channelHeight-(halfVerGap*4));
	    
		    ctxt.setBackground(channelColour);
			ctxt.setFont(new java.awt.Font("Dialog", 1, 12));
			ctxt.setBorder(new javax.swing.border.LineBorder(java.awt.Color.black));
			ctxt.setHorizontalAlignment(JLabel.LEFT);
			ctxt.setOpaque(true);
		
			channelNamePanel.add(ctxt);
			
		}
		
		for(int p=0;p<programmes.size();p++) {
	    
			FreeGuideProgramme prog = (FreeGuideProgramme)programmes.get(p);
			
			Calendar st = prog.getStart();
			Calendar ed = prog.getEnd();
		
			String progDesc = prog.getDesc();
			String progTitle = prog.getTitle();
			
			// Find the channel number
			String channelID = prog.getChannelID();
			Vector tmpChannelIDs = new Vector();
			tmpChannelIDs.addAll(Arrays.asList(channelIDs));
			int ch = tmpChannelIDs.indexOf(channelID);
			
			if(ch == -1) {
				FreeGuide.log.severe("Channel ID " + channelID + "not found when drawing channels.");
			}
			
			JTextArea txt = new JTextArea(timeFormat.format(st.getTime())+ " " + progTitle);
			textAreas.add(txt);
				
			// FEATURE: option to add editor pane styled text with description
			//JEditorPane txt = new JEditorPane("text/html", "    " + fmt.format(st)+ " " + prog.getTitle() + lineBreak + prog.getDesc());
				
			if( progDesc == null ) {
				txt.setToolTipText(progTitle);
			} else {
				txt.setToolTipText(progTitle + " - " + progDesc);
			}
		
			int left = halfHorGap+(int)((st.getTimeInMillis()-earliest.getTimeInMillis())*widthMultiplier);
			int right = ((int)((ed.getTimeInMillis()-earliest.getTimeInMillis())*widthMultiplier)) - (halfHorGap*2);
			int top = halfVerGap+(ch*channelHeight);
			int bottom = ((ch+1)*channelHeight)-(halfVerGap*2);
		
			txt.setBounds(left, top, right-left, bottom-top);
			txt.setLineWrap(true);
			txt.setEditable(false);
			txt.setFont(new java.awt.Font("Dialog", 0, 10));
			txt.setBorder(new javax.swing.border.LineBorder(Color.black));
			//txt.setSelectionColor(Color.white);
			txt.setOpaque(true);
		
			txt.addMouseListener(new java.awt.event.MouseListener() {
				public void mouseClicked(java.awt.event.MouseEvent evt) {
					jTextAreaClicked(evt);
				}
				public void mousePressed(java.awt.event.MouseEvent evt) {}
				public void mouseReleased(java.awt.event.MouseEvent evt) {}
				public void mouseEntered(java.awt.event.MouseEvent evt) {}
				public void mouseExited(java.awt.event.MouseEvent evt) {}
			});

			// Have we already got choices for today?
			if(choices!=null) {
				// Yes, use those choices
				
				//FreeGuide.log.info("Using choices");
				
				for(int i=0;i<choices.length;i++) {
					
					if(choices[i].equals(prog)) {
						txt.setBackground(tickedColour);
						System.out.println(txt.hashCode() + " " + txt.getText() + " " + txt.getBackground());
						System.out.println(tickedColour.getRed() + ", " + tickedColour.getGreen() + ", " + tickedColour.getBlue());
						tickedProgrammes.add(prog);
					} else {
						txt.setBackground(nonTickedColour);
					}
					
				}
				
			} else {
				// No, use the favourites
			
				//FreeGuide.log.info("Using favs");
				
				// Check if this is a favourite and tick it if so
				FreeGuideFavourite[] favourites = FreeGuide.prefs.getFavourites();
				if(favourites!=null) {
					
					for(int i=0;i<favourites.length;i++) {
						
						if(favourites[i].matches(prog)) {
							// Remember this as a choice for next time
							FreeGuide.prefs.addChoice(prog);
							
							txt.setBackground(tickedColour);
							tickedProgrammes.add(prog);
						} else {
							txt.setBackground(nonTickedColour);
						}
						
					}//for		
				}//if
			}//if
			
			//txt.setBackground(tickedColour);
			
			innerPanel.add(txt);
		
		}

		timePanel.setTimes(earliest, latest);
		timePanel.revalidate();
		timePanel.repaint();
		
		addInnerScrollPaneAdjustmentListeners();
		
	}//drawChannels*/
	
	private void updateIfDateChanged() {
		
		if(!doingProgs && !comboBoxDateFormat.format(theDate.getTime()).equals((String)comTheDate.getSelectedItem())) {
		
			try {
			
				theDate.setTime( comboBoxDateFormat.parse((String)comTheDate.getSelectedItem()) );
			
			} catch(java.text.ParseException e) {
			
				e.printStackTrace();
			
			}//try

			updatePanel();
		
		}//if
		
	}
    
	// ------------------------------------------------------------------------
	// HMTL Guide stuff
	
    private void updatePrintedGuide() {

		printedGuideArea.setText(constructHTMLGuide(true));
	
    }
    
	/*
	 * Saves out the listings as an HTML file to be printed.
	 */
	private void writeOutAsHTML() {
		
		// Make a file in the default location
		File f = new File(FreeGuide.prefs.performSubstitutions(FreeGuide.prefs.misc.get("working_directory")+"guide.html"));
		
		try {//IOException
			
			BufferedWriter buffy = new BufferedWriter(new FileWriter(f));

			buffy.write(constructHTMLGuide(false));

			buffy.close();
			
			JTextArea fb = new JTextArea();
					
			FreeGuideUtils.execExternal(FreeGuide.prefs.commandline.getStrings("browser_command"), fb);

		
		} catch(java.io.IOException e) {
			e.printStackTrace();
		}//try
		
	}//writeOutAsHTML
	
	/**
	 * Makes a TV Guide in HTML format and returns it as a string.
	 *
	 * @return the TV guide as a string of html
	 */
	private String constructHTMLGuide(boolean onScreen) {
		
		// The string we shall return
		String ans = "";
		
		// Set up some constants
		String lineBreak = System.getProperty("line.separator");

		ans+="<html>"+lineBreak;
		ans+="<head>"+lineBreak;
		ans+="  <title>TV Guide for "+htmlDateFormat.format(theDate.getTime())+"</title>"+lineBreak;
		ans+="  <link rel='StyleSheet' href='"+FreeGuide.prefs.performSubstitutions(FreeGuide.prefs.misc.get("css_file"))+"' type='text/css'"+lineBreak;
		ans+="</head>"+lineBreak;
		ans+="<body>"+lineBreak;
		ans+="  <h1>";
		
		if(onScreen) {ans+="<font face='helvetica, helv, arial, sans serif' size=3>";}
		
		ans+="TV Guide for "+htmlDateFormat.format(theDate.getTime());
		
		if(onScreen) {ans+="</font>";}
		
		ans+="</h1>"+lineBreak;

		// Sort the programmes
		Collections.sort(tickedProgrammes, new FreeGuideProgrammeStartTimeComparator());

		// Add them to the HTML list
		// ----------------------------

		if(onScreen) {ans+="<font face='helvetica, helv, arial, sans serif' size=1>";}
		
		for(int i=0;i<tickedProgrammes.size();i++) {

			FreeGuideProgramme prog = (FreeGuideProgramme)tickedProgrammes.get(i);

			//fmt = new SimpleDateFormat("HH:mm");
    
			if(prog.getDesc() == null) {
				ans+="  <p><b>"+timeFormat.format(prog.getStart().getTime())+" - "+prog.getTitle()+"</b><br>"+prog.getChannelName()+", ends "+timeFormat.format(prog.getEnd().getTime())+"</p>"+lineBreak;
			} else {
				ans+="  <p><b>"+timeFormat.format(prog.getStart().getTime())+" - "+prog.getTitle()+"</b><br>"+prog.getChannelName()+", ends "+timeFormat.format(prog.getEnd().getTime())+"<br>"+prog.getDesc()+"</p>"+lineBreak;
			}
    
		}//for

		if(onScreen) {ans+="</font>";}
		
		ans+="<hr>"+lineBreak;
		ans+="<address>";
		
		if(onScreen) {ans+="<font face='helvetica, helv, arial, sans serif' size=1>";}
		
		ans+="FreeGuide J2 " + FreeGuide.version + " Copyright &copy;2001-2002 by Andy Balaam<br>Free software released under the GNU General Public Licence<br>http://freeguide-tv.sourceforge.net<br>freeguide@artificialworlds.net";
		
		if(onScreen) {ans+="</font>";}
		
		ans+="</address>"+lineBreak;
			
		ans+="</body>"+lineBreak;
		ans+="</html>"+lineBreak;

		return ans;
		
	}
	
	//------------------------------------------------------------------------
	// XML stuff
	
    public void startDocument() {  
		saxLoc = new String();
	}//startDocument
    
    public void endDocument() {
		saxLoc=null;
    }//endDocument
    
    public void startElement(String name, org.xml.sax.Attributes attrs) {
		
		//FreeGuide.log.info("startElement " + name + " START");
		
		saxLoc+=":"+name;
	
		if(doingProgs && saxLoc.equals(":tv:programme")) {
	    
			//assert currentProgramme == null;
			
			noProgsFound = false;
			
			currentProgramme = new FreeGuideProgramme();
			
			// Prepare a date formatter
			SimpleDateFormat fmt = new SimpleDateFormat("yyyyMMddHHmmss z");
			
			// Prepare GregorianCalendars for start and end
			Calendar start = GregorianCalendar.getInstance();
			Calendar end = GregorianCalendar.getInstance();
			
			// Assume it has a channel
			String channelID = attrs.getValue("channel");
			currentProgramme.setChannelID(channelID);
			currentProgramme.setChannelName(getChannelName(channelID));
			
			try {
			
				// Assume it has a start time
				start.setTime(fmt.parse(attrs.getValue("start")));
						
				// Could really assume it has an end time, since it's gone through
				// tv_split, but anyway, don't.
				if(attrs.getIndex("stop") != -1) {
					end.setTime(fmt.parse(attrs.getValue("stop")));
				} else {
					// Give it a fake end time, half an hour after the start
					end.setTimeInMillis(start.getTimeInMillis());
					end.add(Calendar.MINUTE, 30);
				}
				
			} catch(java.text.ParseException e) {
				e.printStackTrace();
			}
			
			// Check whether the time is outside our time range
			if(earliest.after(start)) {
				earliest.setTimeInMillis(start.getTimeInMillis());
			}
			if(latest.before(end)) {
				latest.setTimeInMillis(end.getTimeInMillis());
			}
			
			currentProgramme.setStart(start);
			currentProgramme.setEnd(end);
	    
		} else if(saxLoc.equals(":tv:channel")) {
			
			String id = attrs.getValue("id");
			
			tmpChannelID = id;
			
		}//if
		
		//FreeGuide.log.info("startElement END");
		
    }//startElement
    
    public void endElement(String name) {
		
		//FreeGuide.log.info("endElement " + name + " START");
		
		if(saxLoc.equals(":tv:programme")) {
			programmes.add(currentProgramme);
			currentProgramme = null;
		}
		
		if(saxLoc.endsWith(name)) {
	    
			saxLoc=saxLoc.substring(0, saxLoc.length()-(name.length()+1));
	    
		} else {
			parseError();
		}//if
	
		//FreeGuide.log.info("endElement END");
		
    }//endElement
    
    public void characters(String data) {
	
		//FreeGuide.log.info("characters "+ data + " START");
		
		if(doingProgs && saxLoc.equals(":tv:programme:title")) {
	    
			currentProgramme.setTitle(data);
	    
		} else if (doingProgs && saxLoc.equals(":tv:programme:desc")) {
	    
			currentProgramme.setDesc(data);
	    
		} else if (doingProgs && saxLoc.equals(":tv:programme:category")) {
	    
			currentProgramme.setCategory(data);
	    
		} else if (saxLoc.equals(":tv:channel:display-name")) {
			
			// Remember the name of the channel we're looking at
			
			// Get the channelIDs into a Vector
			Vector tmpChannelIDs = new Vector(Arrays.asList(channelIDs));
			
			// If it's a channel we're interested in
			// and it's not been named already, remember the name
			int i = tmpChannelIDs.indexOf(tmpChannelID);
			if(i!=-1 && !channelNamed[i]) {
				channelNames[i] = data;
				channelNamed[i] = true;
			}
			
		}//if
	
		//FreeGuide.log.info("characters END");
		
    }//characters
    
	/**
	 * Unhides this window after being hidden while launching another
	 * screen.
	 */
	public void reShow() {
		
		showScreen = true;
		updatePanel();
		
		if(showScreen) {
			setVisible(true);
		}
		
	}//reShow
	
	//------------------------------------------------------------------------
	// Helper functions
	
	/**
	 * Gets the channels required from the config file and puts them
	 * in the channelNames array
	 */
    private void getSelectedChannels() {
		
		// Get the channel IDs from config file or prefs
		channelIDs = FreeGuide.prefs.getChannelIDs();
		
		// Set default channel names, same as IDs
		channelNames = new String[channelIDs.length];
		channelNamed = new boolean[channelIDs.length];
		for(int i=0;i<channelIDs.length;i++) {
			channelNames[i] = channelIDs[i];
			channelNamed[i] = false;
		}
		
    }
	
	/**
	 * Returns the name of the channel whose ID is supplied.
	 */
	private String getChannelName(String channelID) {
		
		// Get the channelIDs into a Vector
		Vector tmpChannelIDs = new Vector();
		tmpChannelIDs.addAll(Arrays.asList(channelIDs));
		
		// If the ID exists
		int i = tmpChannelIDs.indexOf(tmpChannelID);
		if(i != -1) {
			return channelNames[i];
		} else {
			FreeGuide.log.warning("Unknown channel ID in request for channel name.");
			return "Unknown Channel";
		}
		
	}
	
	public String[] getChannelIDs() {
		return channelIDs;
	}
	
	public String[] getChannelNames() {
		return channelNames;
	}
	
    private void parseError() {
		FreeGuide.log.severe("FreeGuideViewer - Error parsing XML.");
		System.exit(1);
    }
	
	public FreeGuideLauncher getLauncher() {
		return launcher;
	}
	
//parseError


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox comTheDate;
    private javax.swing.JMenuItem menDownload;
    private javax.swing.JEditorPane printedGuideArea;
    private javax.swing.JMenuItem menUserGuide;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator3;
    private FreeGuideTimePanel timePanel;
    private javax.swing.JMenuItem menPrint;
    private javax.swing.JPanel channelNamePanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JPanel topPanel;
    private javax.swing.JButton butPrint;
    private javax.swing.JTextArea printedGuideAreaOld;
    private javax.swing.JMenuItem menOptions;
    private javax.swing.JScrollPane channelNameScrollPane;
    private javax.swing.JSplitPane splitPane;
    private javax.swing.JMenuItem menFavourites;
    private javax.swing.JMenu toolsMenu;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JMenuItem menAbout;
    private javax.swing.JButton butNext;
    private javax.swing.JButton butPrev;
    private javax.swing.JButton butGoToNow;
    private javax.swing.JPanel innerPanel;
    private javax.swing.JScrollPane innerScrollPane;
    private javax.swing.JPanel outerPanel;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JScrollPane printedGuideScrollPane;
    private javax.swing.JMenuItem menQuit;
    private javax.swing.JScrollPane timeScrollPane;
    private javax.swing.JMenu helpMenu;
    // End of variables declaration//GEN-END:variables
    
	
	private String[] channelIDs;
		// The IDs of the channels the user has chosen
    private String[] channelNames;
		// The names of the channels the user has chosen
	private boolean[] channelNamed;
		// Has this channel had its name set?
	
    //private FreeGuideChannelDay[] channels;
	// The FreeGuideChannelDay objects that hold the prog. info
    
    private String saxLoc;  // Holds our current pos in the XML hierarchy

    //private int curChan;    // The channel we're doing now
	private boolean doingProgs;	// Are we loading the programmes?
    
    private Calendar earliest;  // The beginning of this day
    private Calendar latest;    // The end of this day
    
    private Calendar theDate;   // The date for which we are listing programmes
    
    
    private Vector textAreas;	// Stores references to all the textareas shown
    private Vector programmes;	// The programmes to which each checkbox refers
	private Vector tickedProgrammes;	// Which programmes are chosen?
	private FreeGuideProgramme currentProgramme;
		// The programme we're loading in now
    
    //private static String wkDir;	// The home dir/root path of this prog
    
	private FreeGuideLauncher launcher;	// The screen that launched this one
	
	//private boolean ready;	// Have we prepared the screen yet?
	
	private String tmpChannelID;	// A temporary variable storing the channel ID
	
	private static final SimpleDateFormat comboBoxDateFormat = new SimpleDateFormat("EEE dd MMMM yyyy");
	private static final SimpleDateFormat htmlDateFormat = new SimpleDateFormat("EEEE dd MMMM yyyy");
	private static final SimpleDateFormat timeFormat = new SimpleDateFormat("HH:mm");
	
	private boolean noProgsFound;
	private boolean showScreen;
	private boolean missingFiles;
	
}
