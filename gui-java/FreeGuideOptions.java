/*
 * FreeGuide J2
 *
 * Copyright (c) 2001 by Andy Balaam
 *
 * Released under the GNU General Public License
 * with ABSOLUTELY NO WARRANTY.
 *
 * See the file COPYING for more information.
 */

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.Collections;
import java.util.Vector;
import javax.swing.DefaultListModel;
import javax.swing.JTextArea;
import javax.swing.JList;
import javax.swing.JOptionPane;

import javax.xml.parsers.ParserConfigurationException;
import javax.xml.parsers.SAXParserFactory;
import javax.xml.parsers.SAXParser;
import org.xml.sax.SAXException;
import org.xml.sax.helpers.DefaultHandler;

/**
 * The options screen in FreeGuide with tabs for Download Options,
 * View Options and Advanced Options.
 *
 * @author  Andy Balaam
 * @version 5
 */
public class FreeGuideOptions extends javax.swing.JFrame implements FreeGuideSAXInterface {

    public FreeGuideOptions(FreeGuideLauncher newLauncher) {
		
		launcher = newLauncher;
		
		channels = new DefaultListModel();
		
        initComponents();
		initMyComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
	private void initComponents() {//GEN-BEGIN:initComponents
		tabPane = new javax.swing.JTabbedPane();
		panDownload = new javax.swing.JPanel();
		labChannels = new javax.swing.JLabel();
		jScrollPane3 = new javax.swing.JScrollPane();
		lisChannels = new javax.swing.JList(channels);
		butRefresh = new javax.swing.JButton();
		labNote = new javax.swing.JLabel();
		jScrollPane5 = new javax.swing.JScrollPane();
		txaFeedback = new javax.swing.JTextArea();
		panView = new javax.swing.JPanel();
		labChannelHeight = new javax.swing.JLabel();
		txtChannelHeight = new javax.swing.JTextField();
		labVerGap = new javax.swing.JLabel();
		txtVerGap = new javax.swing.JTextField();
		labHorGap = new javax.swing.JLabel();
		txtHorGap = new javax.swing.JTextField();
		labPanelWidth = new javax.swing.JLabel();
		txtPanelWidth = new javax.swing.JTextField();
		labPixels = new javax.swing.JLabel();
		panAdvanced = new javax.swing.JPanel();
		labDLCmdLine = new javax.swing.JLabel();
		jScrollPane1 = new javax.swing.JScrollPane();
		txaDLCmdLine = new javax.swing.JTextArea();
		jScrollPane2 = new javax.swing.JScrollPane();
		txaChCmdLine = new javax.swing.JTextArea();
		labProgHTML = new javax.swing.JLabel();
		jScrollPane4 = new javax.swing.JScrollPane();
		texProgHTML = new javax.swing.JTextArea();
		labChFile = new javax.swing.JLabel();
		txtChFile = new javax.swing.JTextField();
		labFGHomeDir = new javax.swing.JLabel();
		txtFGHomeDir = new javax.swing.JTextField();
		labLogFile = new javax.swing.JLabel();
		txtLogFile = new javax.swing.JTextField();
		labBrowserCmdLine = new javax.swing.JLabel();
		txtBrowserCmdLine = new javax.swing.JTextField();
		labCSSFile = new javax.swing.JLabel();
		txtCSSFile = new javax.swing.JTextField();
		labMaxFilenameLength = new javax.swing.JLabel();
		txtMaxFilenameLength = new javax.swing.JTextField();
		labChCmdLine = new javax.swing.JLabel();
		txtProgDir = new javax.swing.JTextField();
		labProgDir = new javax.swing.JLabel();
		panBottom = new javax.swing.JPanel();
		butOK = new javax.swing.JButton();
		butCancel = new javax.swing.JButton();
		
		getContentPane().setLayout(new java.awt.GridBagLayout());
		java.awt.GridBagConstraints gridBagConstraints1;
		
		setTitle("FreeGuide Options");
		addWindowListener(new java.awt.event.WindowAdapter() {
			public void windowClosing(java.awt.event.WindowEvent evt) {
				exitForm(evt);
			}
		});
		
		panDownload.setLayout(new java.awt.GridBagLayout());
		java.awt.GridBagConstraints gridBagConstraints2;
		
		labChannels.setText("Channels to download:");
		gridBagConstraints2 = new java.awt.GridBagConstraints();
		gridBagConstraints2.gridx = 0;
		gridBagConstraints2.gridy = 0;
		gridBagConstraints2.insets = new java.awt.Insets(5, 5, 5, 5);
		panDownload.add(labChannels, gridBagConstraints2);
		
		lisChannels.addFocusListener(new java.awt.event.FocusAdapter() {
			public void focusLost(java.awt.event.FocusEvent evt) {
				lisChannelsFocusLost(evt);
			}
		});
		
		jScrollPane3.setViewportView(lisChannels);
		
		gridBagConstraints2 = new java.awt.GridBagConstraints();
		gridBagConstraints2.gridx = 0;
		gridBagConstraints2.gridy = 1;
		gridBagConstraints2.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints2.insets = new java.awt.Insets(5, 5, 0, 5);
		gridBagConstraints2.weightx = 0.1;
		gridBagConstraints2.weighty = 0.6;
		panDownload.add(jScrollPane3, gridBagConstraints2);
		
		butRefresh.setText("Refresh Channels List");
		butRefresh.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				butRefreshActionPerformed(evt);
			}
		});
		
		gridBagConstraints2 = new java.awt.GridBagConstraints();
		gridBagConstraints2.gridx = 0;
		gridBagConstraints2.gridy = 3;
		gridBagConstraints2.insets = new java.awt.Insets(5, 5, 5, 5);
		panDownload.add(butRefresh, gridBagConstraints2);
		
		labNote.setText("(Hold CTRL to select required channels)");
		labNote.setFont(new java.awt.Font("Dialog", 0, 12));
		gridBagConstraints2 = new java.awt.GridBagConstraints();
		gridBagConstraints2.gridx = 0;
		gridBagConstraints2.gridy = 2;
		gridBagConstraints2.insets = new java.awt.Insets(0, 0, 5, 0);
		panDownload.add(labNote, gridBagConstraints2);
		
		txaFeedback.setEditable(false);
		jScrollPane5.setViewportView(txaFeedback);
		
		gridBagConstraints2 = new java.awt.GridBagConstraints();
		gridBagConstraints2.gridx = 0;
		gridBagConstraints2.gridy = 4;
		gridBagConstraints2.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints2.insets = new java.awt.Insets(5, 5, 5, 5);
		gridBagConstraints2.weighty = 0.5;
		panDownload.add(jScrollPane5, gridBagConstraints2);
		
		tabPane.addTab("Download", panDownload);
		
		panView.setLayout(new java.awt.GridBagLayout());
		java.awt.GridBagConstraints gridBagConstraints3;
		
		labChannelHeight.setText("Channel height:");
		gridBagConstraints3 = new java.awt.GridBagConstraints();
		gridBagConstraints3.gridx = 0;
		gridBagConstraints3.gridy = 1;
		gridBagConstraints3.insets = new java.awt.Insets(5, 5, 5, 5);
		gridBagConstraints3.anchor = java.awt.GridBagConstraints.EAST;
		panView.add(labChannelHeight, gridBagConstraints3);
		
		txtChannelHeight.setPreferredSize(new java.awt.Dimension(10000, 20));
		txtChannelHeight.setMaximumSize(new java.awt.Dimension(10000, 20));
		txtChannelHeight.setMinimumSize(new java.awt.Dimension(200, 20));
		txtChannelHeight.addFocusListener(new java.awt.event.FocusAdapter() {
			public void focusLost(java.awt.event.FocusEvent evt) {
				txtChannelHeightFocusLost(evt);
			}
		});
		
		gridBagConstraints3 = new java.awt.GridBagConstraints();
		gridBagConstraints3.gridx = 1;
		gridBagConstraints3.gridy = 1;
		gridBagConstraints3.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints3.insets = new java.awt.Insets(5, 5, 5, 5);
		gridBagConstraints3.weightx = 0.9;
		panView.add(txtChannelHeight, gridBagConstraints3);
		
		labVerGap.setText("Ver. gap between channels:");
		gridBagConstraints3 = new java.awt.GridBagConstraints();
		gridBagConstraints3.gridx = 0;
		gridBagConstraints3.gridy = 2;
		gridBagConstraints3.insets = new java.awt.Insets(5, 5, 5, 5);
		gridBagConstraints3.anchor = java.awt.GridBagConstraints.EAST;
		panView.add(labVerGap, gridBagConstraints3);
		
		txtVerGap.setPreferredSize(new java.awt.Dimension(10000, 20));
		txtVerGap.setMaximumSize(new java.awt.Dimension(10000, 20));
		txtVerGap.setMinimumSize(new java.awt.Dimension(200, 20));
		txtVerGap.addFocusListener(new java.awt.event.FocusAdapter() {
			public void focusLost(java.awt.event.FocusEvent evt) {
				txtVerGapFocusLost(evt);
			}
		});
		
		gridBagConstraints3 = new java.awt.GridBagConstraints();
		gridBagConstraints3.gridx = 1;
		gridBagConstraints3.gridy = 2;
		gridBagConstraints3.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints3.insets = new java.awt.Insets(5, 5, 5, 5);
		gridBagConstraints3.weightx = 0.9;
		panView.add(txtVerGap, gridBagConstraints3);
		
		labHorGap.setText("Hor. gap betweeen programmes:");
		gridBagConstraints3 = new java.awt.GridBagConstraints();
		gridBagConstraints3.gridx = 0;
		gridBagConstraints3.gridy = 3;
		gridBagConstraints3.insets = new java.awt.Insets(5, 5, 5, 5);
		gridBagConstraints3.anchor = java.awt.GridBagConstraints.EAST;
		panView.add(labHorGap, gridBagConstraints3);
		
		txtHorGap.setPreferredSize(new java.awt.Dimension(10000, 20));
		txtHorGap.setMaximumSize(new java.awt.Dimension(10000, 20));
		txtHorGap.setMinimumSize(new java.awt.Dimension(200, 20));
		txtHorGap.addFocusListener(new java.awt.event.FocusAdapter() {
			public void focusLost(java.awt.event.FocusEvent evt) {
				txtHorGapFocusLost(evt);
			}
		});
		
		gridBagConstraints3 = new java.awt.GridBagConstraints();
		gridBagConstraints3.gridx = 1;
		gridBagConstraints3.gridy = 3;
		gridBagConstraints3.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints3.insets = new java.awt.Insets(5, 5, 5, 5);
		gridBagConstraints3.weightx = 0.9;
		panView.add(txtHorGap, gridBagConstraints3);
		
		labPanelWidth.setText("Width of full listings:");
		gridBagConstraints3 = new java.awt.GridBagConstraints();
		gridBagConstraints3.gridx = 0;
		gridBagConstraints3.gridy = 4;
		gridBagConstraints3.insets = new java.awt.Insets(5, 5, 5, 5);
		gridBagConstraints3.anchor = java.awt.GridBagConstraints.EAST;
		panView.add(labPanelWidth, gridBagConstraints3);
		
		txtPanelWidth.setPreferredSize(new java.awt.Dimension(10000, 20));
		txtPanelWidth.setMaximumSize(new java.awt.Dimension(10000, 20));
		txtPanelWidth.setMinimumSize(new java.awt.Dimension(200, 20));
		txtPanelWidth.addFocusListener(new java.awt.event.FocusAdapter() {
			public void focusLost(java.awt.event.FocusEvent evt) {
				txtPanelWidthFocusLost(evt);
			}
		});
		
		gridBagConstraints3 = new java.awt.GridBagConstraints();
		gridBagConstraints3.gridx = 1;
		gridBagConstraints3.gridy = 4;
		gridBagConstraints3.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints3.insets = new java.awt.Insets(5, 5, 5, 5);
		gridBagConstraints3.weightx = 0.9;
		panView.add(txtPanelWidth, gridBagConstraints3);
		
		labPixels.setText("(pixels)");
		gridBagConstraints3 = new java.awt.GridBagConstraints();
		gridBagConstraints3.gridx = 1;
		gridBagConstraints3.gridy = 0;
		panView.add(labPixels, gridBagConstraints3);
		
		tabPane.addTab("View", panView);
		
		panAdvanced.setLayout(new java.awt.GridBagLayout());
		java.awt.GridBagConstraints gridBagConstraints4;
		
		panAdvanced.setPreferredSize(new java.awt.Dimension(100, 20));
		panAdvanced.setMinimumSize(new java.awt.Dimension(100, 20));
		panAdvanced.setMaximumSize(new java.awt.Dimension(100, 20));
		labDLCmdLine.setText("Downloading command line:");
		gridBagConstraints4 = new java.awt.GridBagConstraints();
		gridBagConstraints4.gridx = 0;
		gridBagConstraints4.gridy = 0;
		gridBagConstraints4.insets = new java.awt.Insets(5, 5, 5, 5);
		gridBagConstraints4.anchor = java.awt.GridBagConstraints.NORTHEAST;
		panAdvanced.add(labDLCmdLine, gridBagConstraints4);
		
		jScrollPane1.setMinimumSize(new java.awt.Dimension(22, 42));
		txaDLCmdLine.setRows(3);
		txaDLCmdLine.setPreferredSize(new java.awt.Dimension(5000, 39));
		txaDLCmdLine.setMaximumSize(new java.awt.Dimension(5000, 200));
		txaDLCmdLine.setMinimumSize(new java.awt.Dimension(5000, 200));
		txaDLCmdLine.addFocusListener(new java.awt.event.FocusAdapter() {
			public void focusLost(java.awt.event.FocusEvent evt) {
				txaDLCmdLineFocusLost(evt);
			}
		});
		
		jScrollPane1.setViewportView(txaDLCmdLine);
		
		gridBagConstraints4 = new java.awt.GridBagConstraints();
		gridBagConstraints4.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints4.insets = new java.awt.Insets(5, 5, 5, 5);
		gridBagConstraints4.weightx = 0.9;
		gridBagConstraints4.weighty = 0.1;
		panAdvanced.add(jScrollPane1, gridBagConstraints4);
		
		jScrollPane2.setMinimumSize(new java.awt.Dimension(22, 42));
		txaChCmdLine.setRows(3);
		txaChCmdLine.setPreferredSize(new java.awt.Dimension(5000, 39));
		txaChCmdLine.setMaximumSize(new java.awt.Dimension(5000, 200));
		txaChCmdLine.setMinimumSize(new java.awt.Dimension(5000, 200));
		txaChCmdLine.addFocusListener(new java.awt.event.FocusAdapter() {
			public void focusLost(java.awt.event.FocusEvent evt) {
				txaChCmdLineFocusLost(evt);
			}
		});
		
		jScrollPane2.setViewportView(txaChCmdLine);
		
		gridBagConstraints4 = new java.awt.GridBagConstraints();
		gridBagConstraints4.gridx = 1;
		gridBagConstraints4.gridy = 1;
		gridBagConstraints4.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints4.insets = new java.awt.Insets(5, 5, 5, 5);
		gridBagConstraints4.weightx = 0.9;
		gridBagConstraints4.weighty = 0.1;
		panAdvanced.add(jScrollPane2, gridBagConstraints4);
		
		labProgHTML.setText("Programme HTML:");
		labProgHTML.setEnabled(false);
		gridBagConstraints4 = new java.awt.GridBagConstraints();
		gridBagConstraints4.gridx = 0;
		gridBagConstraints4.gridy = 2;
		gridBagConstraints4.insets = new java.awt.Insets(5, 5, 5, 5);
		gridBagConstraints4.anchor = java.awt.GridBagConstraints.NORTHEAST;
		panAdvanced.add(labProgHTML, gridBagConstraints4);
		
		jScrollPane4.setMinimumSize(new java.awt.Dimension(22, 42));
		jScrollPane4.setEnabled(false);
		texProgHTML.setRows(3);
		texProgHTML.setPreferredSize(new java.awt.Dimension(5000, 39));
		texProgHTML.setMaximumSize(new java.awt.Dimension(5000, 200));
		texProgHTML.setMinimumSize(new java.awt.Dimension(5000, 200));
		texProgHTML.setEnabled(false);
		jScrollPane4.setViewportView(texProgHTML);
		
		gridBagConstraints4 = new java.awt.GridBagConstraints();
		gridBagConstraints4.gridx = 1;
		gridBagConstraints4.gridy = 2;
		gridBagConstraints4.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints4.insets = new java.awt.Insets(5, 5, 5, 5);
		gridBagConstraints4.weightx = 0.9;
		gridBagConstraints4.weighty = 0.1;
		panAdvanced.add(jScrollPane4, gridBagConstraints4);
		
		labChFile.setText("Channels file name:");
		gridBagConstraints4 = new java.awt.GridBagConstraints();
		gridBagConstraints4.gridx = 0;
		gridBagConstraints4.gridy = 3;
		gridBagConstraints4.insets = new java.awt.Insets(5, 5, 5, 5);
		gridBagConstraints4.anchor = java.awt.GridBagConstraints.EAST;
		panAdvanced.add(labChFile, gridBagConstraints4);
		
		txtChFile.setPreferredSize(new java.awt.Dimension(10000, 20));
		txtChFile.setMaximumSize(new java.awt.Dimension(10000, 20));
		txtChFile.setMinimumSize(new java.awt.Dimension(200, 20));
		txtChFile.addFocusListener(new java.awt.event.FocusAdapter() {
			public void focusLost(java.awt.event.FocusEvent evt) {
				txtChFileFocusLost(evt);
			}
		});
		
		gridBagConstraints4 = new java.awt.GridBagConstraints();
		gridBagConstraints4.gridx = 1;
		gridBagConstraints4.gridy = 3;
		gridBagConstraints4.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints4.insets = new java.awt.Insets(5, 5, 5, 5);
		gridBagConstraints4.weightx = 0.9;
		panAdvanced.add(txtChFile, gridBagConstraints4);
		
		labFGHomeDir.setText("Working directory:");
		gridBagConstraints4 = new java.awt.GridBagConstraints();
		gridBagConstraints4.gridx = 0;
		gridBagConstraints4.gridy = 5;
		gridBagConstraints4.insets = new java.awt.Insets(5, 5, 5, 5);
		gridBagConstraints4.anchor = java.awt.GridBagConstraints.EAST;
		panAdvanced.add(labFGHomeDir, gridBagConstraints4);
		
		txtFGHomeDir.setPreferredSize(new java.awt.Dimension(10000, 20));
		txtFGHomeDir.setMaximumSize(new java.awt.Dimension(10000, 20));
		txtFGHomeDir.setMinimumSize(new java.awt.Dimension(200, 20));
		txtFGHomeDir.addFocusListener(new java.awt.event.FocusAdapter() {
			public void focusLost(java.awt.event.FocusEvent evt) {
				txtFGHomeDirFocusLost(evt);
			}
		});
		
		gridBagConstraints4 = new java.awt.GridBagConstraints();
		gridBagConstraints4.gridx = 1;
		gridBagConstraints4.gridy = 5;
		gridBagConstraints4.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints4.insets = new java.awt.Insets(5, 5, 5, 5);
		gridBagConstraints4.weightx = 0.9;
		panAdvanced.add(txtFGHomeDir, gridBagConstraints4);
		
		labLogFile.setText("Log file:");
		gridBagConstraints4 = new java.awt.GridBagConstraints();
		gridBagConstraints4.gridx = 0;
		gridBagConstraints4.gridy = 6;
		gridBagConstraints4.insets = new java.awt.Insets(5, 5, 5, 5);
		gridBagConstraints4.anchor = java.awt.GridBagConstraints.EAST;
		panAdvanced.add(labLogFile, gridBagConstraints4);
		
		txtLogFile.setPreferredSize(new java.awt.Dimension(10000, 20));
		txtLogFile.setMaximumSize(new java.awt.Dimension(10000, 20));
		txtLogFile.setMinimumSize(new java.awt.Dimension(200, 20));
		txtLogFile.addFocusListener(new java.awt.event.FocusAdapter() {
			public void focusLost(java.awt.event.FocusEvent evt) {
				txtLogFileFocusLost(evt);
			}
		});
		
		gridBagConstraints4 = new java.awt.GridBagConstraints();
		gridBagConstraints4.gridx = 1;
		gridBagConstraints4.gridy = 6;
		gridBagConstraints4.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints4.insets = new java.awt.Insets(5, 5, 5, 5);
		gridBagConstraints4.weightx = 0.9;
		panAdvanced.add(txtLogFile, gridBagConstraints4);
		
		labBrowserCmdLine.setText("Browser command:");
		gridBagConstraints4 = new java.awt.GridBagConstraints();
		gridBagConstraints4.gridx = 0;
		gridBagConstraints4.gridy = 7;
		gridBagConstraints4.insets = new java.awt.Insets(5, 5, 5, 5);
		gridBagConstraints4.anchor = java.awt.GridBagConstraints.EAST;
		panAdvanced.add(labBrowserCmdLine, gridBagConstraints4);
		
		txtBrowserCmdLine.setPreferredSize(new java.awt.Dimension(10000, 20));
		txtBrowserCmdLine.setMaximumSize(new java.awt.Dimension(10000, 20));
		txtBrowserCmdLine.setMinimumSize(new java.awt.Dimension(200, 20));
		txtBrowserCmdLine.addFocusListener(new java.awt.event.FocusAdapter() {
			public void focusLost(java.awt.event.FocusEvent evt) {
				txtBrowserCmdLineFocusLost(evt);
			}
		});
		
		gridBagConstraints4 = new java.awt.GridBagConstraints();
		gridBagConstraints4.gridx = 1;
		gridBagConstraints4.gridy = 7;
		gridBagConstraints4.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints4.insets = new java.awt.Insets(5, 5, 5, 5);
		gridBagConstraints4.weightx = 0.9;
		panAdvanced.add(txtBrowserCmdLine, gridBagConstraints4);
		
		labCSSFile.setText("CSS File:");
		gridBagConstraints4 = new java.awt.GridBagConstraints();
		gridBagConstraints4.gridx = 0;
		gridBagConstraints4.gridy = 8;
		gridBagConstraints4.insets = new java.awt.Insets(5, 5, 5, 5);
		gridBagConstraints4.anchor = java.awt.GridBagConstraints.EAST;
		panAdvanced.add(labCSSFile, gridBagConstraints4);
		
		txtCSSFile.setPreferredSize(new java.awt.Dimension(10000, 20));
		txtCSSFile.setMaximumSize(new java.awt.Dimension(10000, 20));
		txtCSSFile.setMinimumSize(new java.awt.Dimension(200, 20));
		txtCSSFile.addFocusListener(new java.awt.event.FocusAdapter() {
			public void focusLost(java.awt.event.FocusEvent evt) {
				txtCSSFileFocusLost(evt);
			}
		});
		
		gridBagConstraints4 = new java.awt.GridBagConstraints();
		gridBagConstraints4.gridx = 1;
		gridBagConstraints4.gridy = 8;
		gridBagConstraints4.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints4.insets = new java.awt.Insets(5, 5, 5, 5);
		gridBagConstraints4.weightx = 0.9;
		panAdvanced.add(txtCSSFile, gridBagConstraints4);
		
		labMaxFilenameLength.setText("Max. filename length:");
		labMaxFilenameLength.setEnabled(false);
		gridBagConstraints4 = new java.awt.GridBagConstraints();
		gridBagConstraints4.gridx = 0;
		gridBagConstraints4.gridy = 9;
		gridBagConstraints4.insets = new java.awt.Insets(5, 5, 5, 5);
		gridBagConstraints4.anchor = java.awt.GridBagConstraints.EAST;
		panAdvanced.add(labMaxFilenameLength, gridBagConstraints4);
		
		txtMaxFilenameLength.setPreferredSize(new java.awt.Dimension(10000, 20));
		txtMaxFilenameLength.setMaximumSize(new java.awt.Dimension(10000, 20));
		txtMaxFilenameLength.setMinimumSize(new java.awt.Dimension(200, 20));
		txtMaxFilenameLength.setEnabled(false);
		txtMaxFilenameLength.addFocusListener(new java.awt.event.FocusAdapter() {
			public void focusLost(java.awt.event.FocusEvent evt) {
				txtMaxFilenameLengthFocusLost(evt);
			}
		});
		
		gridBagConstraints4 = new java.awt.GridBagConstraints();
		gridBagConstraints4.gridx = 1;
		gridBagConstraints4.gridy = 9;
		gridBagConstraints4.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints4.insets = new java.awt.Insets(5, 5, 5, 5);
		gridBagConstraints4.weightx = 0.9;
		panAdvanced.add(txtMaxFilenameLength, gridBagConstraints4);
		
		labChCmdLine.setText("Channels command line:");
		gridBagConstraints4 = new java.awt.GridBagConstraints();
		gridBagConstraints4.gridx = 0;
		gridBagConstraints4.gridy = 1;
		gridBagConstraints4.insets = new java.awt.Insets(5, 5, 5, 5);
		gridBagConstraints4.anchor = java.awt.GridBagConstraints.NORTHEAST;
		panAdvanced.add(labChCmdLine, gridBagConstraints4);
		
		txtProgDir.setPreferredSize(new java.awt.Dimension(10000, 20));
		txtProgDir.setMaximumSize(new java.awt.Dimension(10000, 20));
		txtProgDir.setMinimumSize(new java.awt.Dimension(200, 20));
		txtProgDir.addFocusListener(new java.awt.event.FocusAdapter() {
			public void focusLost(java.awt.event.FocusEvent evt) {
				txtProgDirFocusLost(evt);
			}
		});
		
		gridBagConstraints4 = new java.awt.GridBagConstraints();
		gridBagConstraints4.gridx = 1;
		gridBagConstraints4.gridy = 4;
		gridBagConstraints4.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints4.insets = new java.awt.Insets(5, 5, 5, 5);
		gridBagConstraints4.weightx = 0.9;
		panAdvanced.add(txtProgDir, gridBagConstraints4);
		
		labProgDir.setText("Program directory:");
		gridBagConstraints4 = new java.awt.GridBagConstraints();
		gridBagConstraints4.gridx = 0;
		gridBagConstraints4.gridy = 4;
		gridBagConstraints4.insets = new java.awt.Insets(5, 5, 5, 5);
		gridBagConstraints4.anchor = java.awt.GridBagConstraints.EAST;
		panAdvanced.add(labProgDir, gridBagConstraints4);
		
		tabPane.addTab("Advanced", panAdvanced);
		
		gridBagConstraints1 = new java.awt.GridBagConstraints();
		gridBagConstraints1.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints1.weightx = 0.9;
		gridBagConstraints1.weighty = 0.9;
		getContentPane().add(tabPane, gridBagConstraints1);
		
		butOK.setText("OK");
		butOK.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				butOKActionPerformed(evt);
			}
		});
		
		panBottom.add(butOK);
		
		butCancel.setText("Cancel");
		butCancel.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				butCancelActionPerformed(evt);
			}
		});
		
		panBottom.add(butCancel);
		
		gridBagConstraints1 = new java.awt.GridBagConstraints();
		gridBagConstraints1.gridx = 0;
		gridBagConstraints1.gridy = 1;
		gridBagConstraints1.anchor = java.awt.GridBagConstraints.SOUTHEAST;
		getContentPane().add(panBottom, gridBagConstraints1);
		
		pack();
		java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
		setSize(new java.awt.Dimension(450, 400));
		setLocation((screenSize.width-450)/2,(screenSize.height-400)/2);
	}//GEN-END:initComponents

	private void txtProgDirFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtProgDirFocusLost
		
		FreeGuide.config.setValue("freeguideDirectory", txtProgDir.getText());
		
	}//GEN-LAST:event_txtProgDirFocusLost

	private void txtPanelWidthFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPanelWidthFocusLost
		
		FreeGuide.config.setValue("panelWidth", String.valueOf(Integer.parseInt(txtPanelWidth.getText())));
		
	}//GEN-LAST:event_txtPanelWidthFocusLost

	private void txtHorGapFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtHorGapFocusLost
		
		FreeGuide.config.setValue("horizontalGap", String.valueOf(Integer.parseInt(txtHorGap.getText())));
		
	}//GEN-LAST:event_txtHorGapFocusLost

	private void txtVerGapFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtVerGapFocusLost
		
		FreeGuide.config.setValue("verticalGap", String.valueOf(Integer.parseInt(txtVerGap.getText())));
		
	}//GEN-LAST:event_txtVerGapFocusLost

	private void txtChannelHeightFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtChannelHeightFocusLost
		
		FreeGuide.config.setValue("channelHeight", String.valueOf(Integer.parseInt(txtChannelHeight.getText())));
		
	}//GEN-LAST:event_txtChannelHeightFocusLost

	private void txtMaxFilenameLengthFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtMaxFilenameLengthFocusLost
		
		FreeGuide.config.setValue("maxFilenameLength", String.valueOf(Integer.parseInt(txtMaxFilenameLength.getText())));
		
	}//GEN-LAST:event_txtMaxFilenameLengthFocusLost

	private void txtCSSFileFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCSSFileFocusLost

		FreeGuide.config.setValue("cssFile", txtCSSFile.getText());
		
	}//GEN-LAST:event_txtCSSFileFocusLost

	private void txtBrowserCmdLineFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtBrowserCmdLineFocusLost
		
		FreeGuide.config.setValue("browserCommandLine", txtBrowserCmdLine.getText());
		
	}//GEN-LAST:event_txtBrowserCmdLineFocusLost

	private void txtLogFileFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtLogFileFocusLost
		
		FreeGuide.config.setValue("logFile", txtLogFile.getText());
		
	}//GEN-LAST:event_txtLogFileFocusLost

	private void txtFGHomeDirFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFGHomeDirFocusLost
		
		FreeGuide.config.setValue("workingDirectory", txtFGHomeDir.getText());
		
	}//GEN-LAST:event_txtFGHomeDirFocusLost

	private void txtChFileFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtChFileFocusLost
		
		FreeGuide.config.setValue("channelsFile", txtChFile.getText());
		
	}//GEN-LAST:event_txtChFileFocusLost

	private void txaChCmdLineFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txaChCmdLineFocusLost
		
		FreeGuide.config.setListValue("channelsCommandLine", getVectorFromJTextArea(txaChCmdLine));
		
	}//GEN-LAST:event_txaChCmdLineFocusLost

	private void txaDLCmdLineFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txaDLCmdLineFocusLost
		
		FreeGuide.config.setListValue("commandLine", getVectorFromJTextArea(txaDLCmdLine));
		
	}//GEN-LAST:event_txaDLCmdLineFocusLost

	private void lisChannelsFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_lisChannelsFocusLost
		
		FreeGuide.config.setListValue("channels", getVectorFromJList(lisChannels));
		
	}//GEN-LAST:event_lisChannelsFocusLost

	private void butRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butRefreshActionPerformed

		downloadChannels();
		
	}//GEN-LAST:event_butRefreshActionPerformed

	private void butCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butCancelActionPerformed
		
		if(FreeGuide.config.isChanged()) {
			
			FreeGuide.config.load();
			
		}
		
		quit();
		
	}//GEN-LAST:event_butCancelActionPerformed

	private void butOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butOKActionPerformed
		
		if(FreeGuide.config.isChanged()) {
			
			FreeGuide.config.save();
			
		}
		
		quit();
		
	}//GEN-LAST:event_butOKActionPerformed

	//------------------------------------------------------------------------
	
	/**
	 * Gets the values from the config file and places them in the controls
	 * on the screen.
	 */
	private void initMyComponents() {
	
		checkConfigFile();
		
		showAdvanced();
		
		showView();
		
		showDownload();
		
	}
	
	/**
	 * Checks whether our config file is properly set up and asks the user
	 * to do it if it's not.
	 */
	private void checkConfigFile() {
		
		// Use the workingDirectory as an indicator that all is set up
		if(FreeGuide.config.getValue("workingDirectory", true)==null) {
			
			JOptionPane.showMessageDialog(this, 
			"Your configuration file has not yet been set up.\n"
			+"This should have been set up during installation.\n"
			+"Please consult the file README to find out how to set it up.\n"
			+"Alternatively, you may try re-installing FreeGuide."
			, "Incomplete config file", JOptionPane.WARNING_MESSAGE);
			
		}
		
	}
	
	/**
	 * Gets the values for the Advanced tab from the config file.
	 */
	private void showAdvanced() {
		
		// Get the system line break character
		String lineBreak = System.getProperty("line.separator");
		
		// Do the download command line
		Vector tmp = FreeGuide.config.getListValue("commandLine", true);
		
		if(tmp!=null) {
		
			for(int i=0;i<tmp.size();i++) {
				txaDLCmdLine.append((String)tmp.get(i)+lineBreak);
			}
			
		}
		
		// Do the channels command line
		tmp = FreeGuide.config.getListValue("channelsCommandLine", true);
		
		if(tmp!=null) {
		
			for(int i=0;i<tmp.size();i++) {
				txaChCmdLine.append((String)tmp.get(i)+lineBreak);
			}
			
		}
		
		// Do the channels file, FreeGuide home directory and log boxes, etc
		txtChFile.setText(FreeGuide.config.getValue("channelsFile", true));
		txtProgDir.setText(FreeGuide.config.getValue("freeguideDirectory", true));
		txtFGHomeDir.setText(FreeGuide.config.getValue("workingDirectory", true));
		txtLogFile.setText(FreeGuide.config.getValue("logFile", true));
		txtBrowserCmdLine.setText(FreeGuide.config.getValue("browserCommandLine", true));
		txtCSSFile.setText(FreeGuide.config.getValue("cssFile", true));
		txtMaxFilenameLength.setText(FreeGuide.config.getValue("maxFilenameLength", true));
		
	}//showAdvanced
	
	/**
	 * Gets the values for the View tab from the config file.
	 */
	private void showView() {
		
		txtChannelHeight.setText(FreeGuide.config.getValue("channelHeight", true));
		txtVerGap.setText(FreeGuide.config.getValue("verticalGap", true));
		txtHorGap.setText(FreeGuide.config.getValue("horizontalGap", true));
		txtPanelWidth.setText(FreeGuide.config.getValue("panelWidth", true));
		
	}//showView
	
	/**
	 * Gets the values for the Download tab from the config file and
	 * channels.xml.
	 */
	private void showDownload() {
		
		// Do the channels box
		String strChannelsFile = FreeGuide.config.getValue("channelsFile");
		
		if(strChannelsFile!=null) {
			File channelsFile = new File(strChannelsFile);
				
			Vector tmpChannels = new Vector();
		
			if(channelsFile.exists()) {
				
				channelNames = new Vector();
				channelIDs = new Vector();
				channels.removeAllElements();
				
				try {//ParserExceptions etc
	    
					DefaultHandler handler = new FreeGuideSAXHandler(this);
					SAXParserFactory factory = SAXParserFactory.newInstance();
					
					SAXParser saxParser = factory.newSAXParser();
		
					saxParser.parse(channelsFile, handler);
	    
				} catch(ParserConfigurationException e) {
					e.printStackTrace();
				} catch(SAXException e) {
					e.printStackTrace();
				} catch(IOException e) {
					e.printStackTrace();
				}//try
				
				tmpChannels.addAll(channelNames);
				
				/*try {//IOException
		
					BufferedReader buffy = new BufferedReader(new FileReader(channelsFile));

					String line = buffy.readLine();

					while(line!=null) {
						
						tmpChannels.addElement(line.trim());
				
						line = buffy.readLine();
				
						if(line==null) {
							break;
						}//if
				
						line = buffy.readLine();
				
					}//while
			
					buffy.close();

				} catch(IOException e) {
			
					e.printStackTrace();
			
				}//try*/
				
			}//if

			if(tmpChannels.size()>0) {
			
				Collections.sort(tmpChannels);
		
				for(int i=0;i<tmpChannels.size();i++) {
					channels.addElement(tmpChannels.get(i));
				}
		
				Vector tmpSelChans = FreeGuide.config.getListValue("channels", true);
		
				if(tmpSelChans!=null) {
			
					int[] tmpSelInts = new int[tmpSelChans.size()];
		
					for(int i=0;i<tmpSelInts.length;i++) {
			
						//int sel = channelIDs.indexOf(tmpSelChans.get(i));
						int sel = channelNames.indexOf(tmpSelChans.get(i));
						if(sel>-1) {
							tmpSelInts[i] = tmpChannels.indexOf(channelNames.get(sel));
						}
			
					}//for
		
					lisChannels.setSelectedIndices(tmpSelInts);
				
				}//if
			}//if
		}//if
		
		//---------------
		
		// Do the download amount radio buttons
		/*String tmpDLAmt = FreeGuide.config.getValue("downloadAmount", true);
		
		if(tmpDLAmt==null || tmpDLAmt.equals("All")) {
			grpDLAmount.setSelected(radAll.getModel(), true);
		} else if(tmpDLAmt.equals("Week")) {
			grpDLAmount.setSelected(radWeek.getModel(), true);
		} else {
			grpDLAmount.setSelected(radDay.getModel(), true);
		}*/

	}//showDownload

	/**
	 * Download the list of channels from the web.
	 */
	private void downloadChannels() {
		
		// Get the name of the channels file
		String channelsFile = FreeGuide.config.getValue("channelsFile");
		
		// Get the commands to download the channels file
		Vector channelCmds = FreeGuide.config.getListValue("channelsCommandLine");
		
		// Execute the commands to download channels list
		for(int i=0;i<channelCmds.size();i++) {
		
			FreeGuide.execExternal(((String)channelCmds.get(i)), txaFeedback);
			
		}
		
		showDownload();
		 
		
	}
	
	/** 
	 * Puts each line of a JTestArea into a vector.
	 *
	 * @param txtArea the 
	 * @return        the Vector composed of individual Strings for each 
	 *		          line of txtArea
	 */
	private Vector getVectorFromJTextArea(JTextArea txtArea) {
		
		// Get the system line break character
		String lineBreak = System.getProperty("line.separator");
		
		// Get the text out of the text box
		String txt = txtArea.getText();
		
		// Initialise the vector we'll return
		Vector ans = new Vector();
		
		// Find the first line break
		int i = txt.indexOf(lineBreak);
		
		// Loop until no more line breaks were found
		while(i>-1) {
			
			// Cut out blank lines
			if(i>0) {
			
				// Add the first line in the string to the vector
				ans.add(txt.substring(0, i));
				
			}//if
			
			// Cut this line out of the vector
			txt = txt.substring(i+lineBreak.length());
			
			// Find the next line break
			i = txt.indexOf(lineBreak);
			
		}//while
		
		if(!txt.equals("")) {
			ans.add(txt);
		}
		
		return ans;
		
	}//getVectorFromJTextArea
	
	/** 
	 * Puts each selected channel into a vector, using its ID.
	 *
	 * @param list the list to process
	 * @return     the Vector composed of individual Strings for each 
	 *		       line of list
	 */
	
	private Vector getVectorFromJList(JList list) {
		
		// Initialise the vector we'll return
		Vector ans = new Vector();
		
		// Get the list values
		Object[] selectedItems = list.getSelectedValues();
		
		for(int i=0;i<selectedItems.length;i++) {
			
			//ans.add(channelIDs.get(channelNames.indexOf(selectedItems[i])));
			ans.add(selectedItems[i]);
			
		}
		
		return ans;
		
	}//getVectorFromJList
	
    /** 
	 * Calls the quit method to exit.
	 */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        
		quit();
		
    }//GEN-LAST:event_exitForm

	/** 
	 * Closes the form and goes back to the viewer.
	 */
	private void quit() {
		
		hide();
		launcher.reShow();
		dispose();
		
	}
	
	//----------------------------------------------------------------------
	// SAX Interface
	
	public void startDocument() {  
		saxLoc = new String();
	}//startDocument
    
    public void endDocument() {
		saxLoc=null;
    }//endDocument
    
    public void startElement(String name, org.xml.sax.Attributes attrs) {
		saxLoc+=":"+name;
	
		if(saxLoc.equals(":tv:channel")) {
	    
			String id = attrs.getValue("id");
			channelIDs.add(id);
		}//if
		
    }//startElement
    
    public void endElement(String name) {
	
		if(saxLoc.endsWith(name)) {
	    
			saxLoc=saxLoc.substring(0, saxLoc.length()-(name.length()+1));
	    
		} else {
			parseError();
		}//if
	
    }//endElement
    
    public void characters(String data) {
	
		if(saxLoc.equals(":tv:channel:display-name")) {
			
			//FreeGuide.log.writeLine(data);
			
			if(channelNames.size()<channelIDs.size()){
				channelNames.add(channelIDs.size()-1, data);
			}
	    
		}//if
	
    }//characters
	
	private void parseError() {
		FreeGuide.log.writeLine("FreeGuideOptions - Error parsing XML.");
		System.exit(1);
    }//parseError
	
	//----------------------------------------------------------------------
	
	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JTabbedPane tabPane;
	private javax.swing.JPanel panDownload;
	private javax.swing.JLabel labChannels;
	private javax.swing.JScrollPane jScrollPane3;
	private javax.swing.JList lisChannels;
	private javax.swing.JButton butRefresh;
	private javax.swing.JLabel labNote;
	private javax.swing.JScrollPane jScrollPane5;
	private javax.swing.JTextArea txaFeedback;
	private javax.swing.JPanel panView;
	private javax.swing.JLabel labChannelHeight;
	private javax.swing.JTextField txtChannelHeight;
	private javax.swing.JLabel labVerGap;
	private javax.swing.JTextField txtVerGap;
	private javax.swing.JLabel labHorGap;
	private javax.swing.JTextField txtHorGap;
	private javax.swing.JLabel labPanelWidth;
	private javax.swing.JTextField txtPanelWidth;
	private javax.swing.JLabel labPixels;
	private javax.swing.JPanel panAdvanced;
	private javax.swing.JLabel labDLCmdLine;
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JTextArea txaDLCmdLine;
	private javax.swing.JScrollPane jScrollPane2;
	private javax.swing.JTextArea txaChCmdLine;
	private javax.swing.JLabel labProgHTML;
	private javax.swing.JScrollPane jScrollPane4;
	private javax.swing.JTextArea texProgHTML;
	private javax.swing.JLabel labChFile;
	private javax.swing.JTextField txtChFile;
	private javax.swing.JLabel labFGHomeDir;
	private javax.swing.JTextField txtFGHomeDir;
	private javax.swing.JLabel labLogFile;
	private javax.swing.JTextField txtLogFile;
	private javax.swing.JLabel labBrowserCmdLine;
	private javax.swing.JTextField txtBrowserCmdLine;
	private javax.swing.JLabel labCSSFile;
	private javax.swing.JTextField txtCSSFile;
	private javax.swing.JLabel labMaxFilenameLength;
	private javax.swing.JTextField txtMaxFilenameLength;
	private javax.swing.JLabel labChCmdLine;
	private javax.swing.JTextField txtProgDir;
	private javax.swing.JLabel labProgDir;
	private javax.swing.JPanel panBottom;
	private javax.swing.JButton butOK;
	private javax.swing.JButton butCancel;
	// End of variables declaration//GEN-END:variables

	DefaultListModel channels;
		// The ListModel holding the names of channels in the listbox

	Vector channelNames;	// The channel names
	Vector channelIDs;		// The technical names of the channels
	
	private String saxLoc;  // Holds our current pos in the XML hierarchy
	
	private FreeGuideLauncher launcher;	// The screen that launched this one
	
}
