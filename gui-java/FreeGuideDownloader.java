/*
 * FreeGuide J2
 *
 * Copyright (c) 2001 by Andy Balaam
 *
 * Released under the GNU General Public License
 * with ABSOLUTELY NO WARRANTY.
 *
 * See the file COPYING for more information.
 */

import java.io.IOException;
import java.io.File;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Vector;

/**
 * Downloads the programme listings from
 * the Internet to local XMLTV files.
 *
 * @author Andy Balaam
 * @version 3
 */

public class FreeGuideDownloader extends javax.swing.JFrame implements Runnable, FreeGuideLauncher {

	/**
	 * Constructs the UI with a progress bar and two buttons.
	 */
    public FreeGuideDownloader(FreeGuideLauncher newLauncher) {
		
		launcher = newLauncher;
		
        initComponents();
		
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        butStart = new javax.swing.JButton();
        butCancel = new javax.swing.JButton();
        butOptions = new javax.swing.JButton();
        labCmdOutput = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txaCmdOutput = new javax.swing.JTextArea();
        butOK = new javax.swing.JButton();

        getContentPane().setLayout(new java.awt.GridBagLayout());

        setTitle("FreeGuide Downloader");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        butStart.setText("Download Listings");
        butStart.setSelected(true);
        butStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butStartActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(butStart, gridBagConstraints);

        butCancel.setText("Cancel");
        butCancel.setMaximumSize(new java.awt.Dimension(97, 23));
        butCancel.setMinimumSize(new java.awt.Dimension(97, 23));
        butCancel.setPreferredSize(new java.awt.Dimension(97, 23));
        butCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butCancelActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(butCancel, gridBagConstraints);

        butOptions.setFont(new java.awt.Font("Dialog", 0, 12));
        butOptions.setText("Options...");
        butOptions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butOptionsActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.9;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(butOptions, gridBagConstraints);

        labCmdOutput.setText("Command Output:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        getContentPane().add(labCmdOutput, gridBagConstraints);

        txaCmdOutput.setEditable(false);
        jScrollPane1.setViewportView(txaCmdOutput);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.9;
        gridBagConstraints.weighty = 0.9;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(jScrollPane1, gridBagConstraints);

        butOK.setText("OK");
        butOK.setMaximumSize(new java.awt.Dimension(97, 23));
        butOK.setMinimumSize(new java.awt.Dimension(97, 23));
        butOK.setPreferredSize(new java.awt.Dimension(97, 23));
        butOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butOKActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(butOK, gridBagConstraints);

        pack();
        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setSize(new java.awt.Dimension(400, 300));
        setLocation((screenSize.width-400)/2,(screenSize.height-300)/2);
    }//GEN-END:initComponents

	private void butOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butOKActionPerformed
		
		quit();
		
	}//GEN-LAST:event_butOKActionPerformed

	private void butOptionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butOptionsActionPerformed
		
		stop();
		new FreeGuideOptions(this).show();
		
		
	}//GEN-LAST:event_butOptionsActionPerformed

	private void butCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butCancelActionPerformed
		
		quit();
		
	}//GEN-LAST:event_butCancelActionPerformed

	private void butStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butStartActionPerformed
		
		butStart.setEnabled(false);
		butOptions.setEnabled(false);
		butOK.setEnabled(false);
		start();
		
	}//GEN-LAST:event_butStartActionPerformed
	
	//------------------------------------------------------------------------
	
	public void start() {
		thread = new Thread(this);
		thread.start();
	}//start
	
	public void stop() {
		thread=null;
	}//stop
	
	public void run() {
		// Get the current running thread
		//Thread thisThread = Thread.currentThread();
		
		// NOTE: insert here removal of old data files.
		
		//int day=0;	// The counter of what day we'return on
		//int nodays;	// The number of days to download
		
		// Find out how many days to download
		/*String dlAmt = FreeGuide.config.getValue("downloadAmount");
		if(dlAmt.equals("All")) {
			nodays = 14;
		} else if(dlAmt.equals("Week")) {
			nodays = 7;
		} else {
			nodays = 1;
		}*/
		
		//Vector channels = FreeGuide.config.getListValue("channels");
		
		//int channel=0;
		//int nochannels = channels.size();
		
		downloadListings();
		
		butStart.setEnabled(true);
		butOptions.setEnabled(true);
		butOK.setEnabled(true);
		
		//quit();
		
		// While the thread is active and we haven't finished
		/*while(thisThread == thread && day<nodays){
			
			downloadListings(day, (String)channels.get(channel));
			
			// Go to next channel
			channel++;

			// Update the progress bar
			prgProgress.setValue( (int)( 100*( (double)((day*nochannels)+channel) / (double)(nochannels*nodays) ) ) );
			
			// If channels are done, go to next day
			if(channel>=channels.size()) {
				day++;
				channel=0;
			}
			
		}//while*/
		
		// Close the form if we've finished
		/*if(day>=nodays) {
			quit();
		}*/
		
	}//run
	
	public void reShow() {
		
		show();
		
	}
	
	//------------------------------------------------------------------------
	
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        
		quit();
		
    }//GEN-LAST:event_exitForm

	private void quit() {
		
		stop();
		hide();
		launcher.reShow();
		dispose();
		
	}
	
	/**
	 * Downloads a given day's listings for a given channel and saves
	 * to a file whose name is determined by the day and channel.
	 *
	 * @param day the number of days after today the required day is
	 * @param channel the name of the required channel
	 */
	private void downloadListings() {

		// Find the required date: today plus "day" days
		//Date theDate = new Date();
		//theDate.setDate(theDate.getDate()+day);
		
		// Format the date appropriately
		//SimpleDateFormat fmt = new SimpleDateFormat("yyyyMMdd");
		//String datestr = fmt.format(theDate);
		
		// Format the channel to be a filename
		//String channelFilename = FreeGuide.makeRightFilenameLength(channel.toLowerCase());
		
		// Get the configuration options
		//String xmlFilename = FreeGuide.config.getValue("workingDirectory")+"data/"+channel+"-"+datestr+".fgd";	    
		
		// Check whether exists
		//if(chkOverwrite.isSelected() || !(new File(xmlFilename).exists())) {
			
		
		//String channelsFile = FreeGuide.config.getValue("channelsFile");
		//String[] parserCmds = FreeGuide.prefs.getCommands("tv_grab");
			
		FreeGuideUtils.execExternal(FreeGuide.prefs.getCommands("tv_grab"), txaCmdOutput);
		
		// Execute the commands to download and save listings
		//for(int i=0;i<parserCmds.length;i++) {
		
		//	String cmd = parserCmds[i];
		
		//	if(!cmd.equals("")) {
				//FreeGuide.execExternal(cmd+" \""+channel+"\" \""+datestr+"\" \""+xmlFilename+"\" \""+channelsFile+"\"");
		//		FreeGuideUtils.execExternal(cmd, txaCmdOutput);
		//	}
			
		//}
			
/*		} else {
			
			FreeGuide.log.writeLine("Freeguide - listings file "+xmlFilename+" already exists.");
			
		}*/
		
	}
	
	public FreeGuideLauncher getLauncher() {
		return launcher;
	}
	
	//------------------------------------------------------------------------

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea txaCmdOutput;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton butStart;
    private javax.swing.JButton butOK;
    private javax.swing.JButton butOptions;
    private javax.swing.JButton butCancel;
    private javax.swing.JLabel labCmdOutput;
    // End of variables declaration//GEN-END:variables
	
	private Thread thread;	// The thread in which to download
	
	private FreeGuideLauncher launcher;	// The screen that launched this one
	
}
