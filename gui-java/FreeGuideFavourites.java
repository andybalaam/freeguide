/*
 * FreeGuide J2
 *
 * Copyright (c) 2001 by Andy Balaam
 *
 * Released under the GNU General Public License
 * with ABSOLUTELY NO WARRANTY.
 *
 * See the file COPYING for more information.
 */

//import java.io.BufferedReader;
//import java.io.File;
//import java.io.FileReader;
//import java.io.IOException;
import java.util.Collections;
import java.util.Vector;
import javax.swing.DefaultListModel;
//import javax.swing.JTextArea;
import javax.swing.JList;

/**
 * The favourites screen that allows the user to choose strings which
 * identify programmes to be selected by default.
 *
 * @author  Andy Balaam
 * @version 1
 */
public class FreeGuideFavourites extends javax.swing.JFrame {

	/** Creates new form FreeGuideFavourites */
    public FreeGuideFavourites(FreeGuideLauncher newLauncher) {
        
		launcher = newLauncher;
		
		favourites = new DefaultListModel();
		
        initComponents();
		initMyComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
	private void initComponents() {//GEN-BEGIN:initComponents
		txtAdd = new javax.swing.JTextField();
		butAdd = new javax.swing.JButton();
		jScrollPane2 = new javax.swing.JScrollPane();
		lisFavourites = new JList(favourites);
		butRemove = new javax.swing.JButton();
		butOK = new javax.swing.JButton();
		butCancel = new javax.swing.JButton();
		
		getContentPane().setLayout(new java.awt.GridBagLayout());
		java.awt.GridBagConstraints gridBagConstraints1;
		
		setTitle("FreeGuide Favourites");
		addWindowListener(new java.awt.event.WindowAdapter() {
			public void windowClosing(java.awt.event.WindowEvent evt) {
				exitForm(evt);
			}
		});
		
		txtAdd.setPreferredSize(new java.awt.Dimension(74, 23));
		txtAdd.setMaximumSize(new java.awt.Dimension(2147483647, 23));
		txtAdd.setMinimumSize(new java.awt.Dimension(4, 23));
		txtAdd.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				txtAddActionPerformed(evt);
			}
		});
		
		gridBagConstraints1 = new java.awt.GridBagConstraints();
		gridBagConstraints1.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints1.insets = new java.awt.Insets(5, 5, 5, 5);
		gridBagConstraints1.weightx = 0.2;
		getContentPane().add(txtAdd, gridBagConstraints1);
		
		butAdd.setText("<- Add");
		butAdd.setPreferredSize(new java.awt.Dimension(89, 23));
		butAdd.setMaximumSize(new java.awt.Dimension(89, 23));
		butAdd.setMinimumSize(new java.awt.Dimension(89, 23));
		butAdd.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				butAddActionPerformed(evt);
			}
		});
		
		gridBagConstraints1 = new java.awt.GridBagConstraints();
		gridBagConstraints1.gridx = 1;
		gridBagConstraints1.gridy = 0;
		gridBagConstraints1.insets = new java.awt.Insets(5, 5, 5, 5);
		getContentPane().add(butAdd, gridBagConstraints1);
		
		lisFavourites.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent evt) {
				lisFavouritesMouseClicked(evt);
			}
		});
		
		jScrollPane2.setViewportView(lisFavourites);
		
		gridBagConstraints1 = new java.awt.GridBagConstraints();
		gridBagConstraints1.gridx = 0;
		gridBagConstraints1.gridy = 1;
		gridBagConstraints1.gridwidth = 3;
		gridBagConstraints1.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints1.insets = new java.awt.Insets(5, 5, 5, 5);
		gridBagConstraints1.weightx = 0.1;
		gridBagConstraints1.weighty = 0.1;
		getContentPane().add(jScrollPane2, gridBagConstraints1);
		
		butRemove.setText("Remove");
		butRemove.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				butRemoveActionPerformed(evt);
			}
		});
		
		gridBagConstraints1 = new java.awt.GridBagConstraints();
		gridBagConstraints1.gridx = 2;
		gridBagConstraints1.gridy = 0;
		gridBagConstraints1.insets = new java.awt.Insets(5, 5, 5, 5);
		getContentPane().add(butRemove, gridBagConstraints1);
		
		butOK.setText("OK");
		butOK.setPreferredSize(new java.awt.Dimension(89, 23));
		butOK.setMaximumSize(new java.awt.Dimension(89, 23));
		butOK.setMinimumSize(new java.awt.Dimension(89, 23));
		butOK.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				butOKActionPerformed(evt);
			}
		});
		
		gridBagConstraints1 = new java.awt.GridBagConstraints();
		gridBagConstraints1.gridx = 1;
		gridBagConstraints1.gridy = 2;
		gridBagConstraints1.insets = new java.awt.Insets(5, 5, 5, 5);
		getContentPane().add(butOK, gridBagConstraints1);
		
		butCancel.setText("Cancel");
		butCancel.setPreferredSize(new java.awt.Dimension(89, 23));
		butCancel.setMaximumSize(new java.awt.Dimension(89, 23));
		butCancel.setMinimumSize(new java.awt.Dimension(89, 23));
		butCancel.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				butCancelActionPerformed(evt);
			}
		});
		
		gridBagConstraints1 = new java.awt.GridBagConstraints();
		gridBagConstraints1.gridx = 2;
		gridBagConstraints1.gridy = 2;
		gridBagConstraints1.insets = new java.awt.Insets(5, 5, 5, 5);
		getContentPane().add(butCancel, gridBagConstraints1);
		
		pack();
	}//GEN-END:initComponents

	private void lisFavouritesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lisFavouritesMouseClicked
		
		if(evt.getClickCount()>1) {
			
			remove();
			
		}
		
	}//GEN-LAST:event_lisFavouritesMouseClicked

	private void txtAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAddActionPerformed
		
		add();
		
	}//GEN-LAST:event_txtAddActionPerformed

	private void butCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butCancelActionPerformed
		
		if(FreeGuide.config.isChanged()) {
			FreeGuide.config.load();
		}
		
		quit();
		
	}//GEN-LAST:event_butCancelActionPerformed

	private void butOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butOKActionPerformed
		
		if(FreeGuide.config.isChanged()) {	
			FreeGuide.config.save();
		}
		
		quit();
		
	}//GEN-LAST:event_butOKActionPerformed

	private void butRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butRemoveActionPerformed
		
		remove();
		
	}//GEN-LAST:event_butRemoveActionPerformed
	
	private void butAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butAddActionPerformed

		add();
		
	}//GEN-LAST:event_butAddActionPerformed

	private void remove() {
		
		int[] removeIndices = lisFavourites.getSelectedIndices();
		
		// Remove the selected favourites in reverse order
		for(int i=removeIndices.length-1;i>-1;i--) {
			
			favourites.remove(removeIndices[i]);
			
		}
		
		FreeGuide.config.setListValue("favourites", getVectorFromListModel(favourites));
		
	}
	
	private void add() {
	
		String txt = txtAdd.getText();
		
		if(txt!=null && !txt.equals("")) {
		
			favourites.addElement(txt);
			
		}
		
		FreeGuide.config.setListValue("favourites", getVectorFromListModel(favourites));
		
		txtAdd.setText("");
		
	}
	
	private void initMyComponents() {
		
		Vector tmpFavs = FreeGuide.config.getListValue("favourites");
		
		if(tmpFavs==null) {
			tmpFavs = new Vector();
		}
		
		Collections.sort(tmpFavs);
		
		for(int i=0;i<tmpFavs.size();i++) {
			favourites.addElement(tmpFavs.get(i));
		}
		
	}

	/** 
	 * Puts every line (selected or not) of a DefaultListModel into a vector.
	 *
	 * @param list the list to process
	 * @return     the Vector composed of individual Strings for each 
	 *		       line of list
	 */
	private Vector getVectorFromListModel(DefaultListModel list) {
		
		// Initialise the vector we'll return
		Vector ans = new Vector();
		
		for(int i=0;i<list.size();i++) {
			
			ans.add(list.get(i));
			
		}
		
		return ans;
		
	}//getVectorFromListModel
	
    /** Exit the screen */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        
		quit();
		
    }//GEN-LAST:event_exitForm

	/** 
	 * Closes the form and goes back to the viewer.
	 */
	private void quit() {
		
		hide();
		launcher.reShow();
		dispose();
		
		
	}


	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JTextField txtAdd;
	private javax.swing.JButton butAdd;
	private javax.swing.JScrollPane jScrollPane2;
	private javax.swing.JList lisFavourites;
	private javax.swing.JButton butRemove;
	private javax.swing.JButton butOK;
	private javax.swing.JButton butCancel;
	// End of variables declaration//GEN-END:variables

	DefaultListModel favourites;
		// The ListModel holding the favourites in the listbox

	private FreeGuideLauncher launcher;	// The screen that launched this one
}
