/*
 * FreeGuide J2
 *
 * Copyright (c) 2001-2003 by Andy Balaam and the FreeGuide contributors
 *
 * freeguide-tv.sourceforge.net
 *
 * Released under the GNU General Public License
 * with ABSOLUTELY NO WARRANTY.
 *
 * See the file COPYING for more information.
 */

import java.util.Arrays;
import java.util.Vector;
import java.util.HashMap;
import javax.swing.DefaultListModel;

/*
 * FreeGuideChannelSetList
 *
 * Provides a list of the user's channelset and allows them to add or edit
 * them by launching a FreeGuideChannelSetEditor.
 *
 * @author  Andy Balaam
 * @version 2
 */
public class FreeGuideChannelSetList extends javax.swing.JFrame implements FreeGuideLauncher {
	
	/** Creates new form FreeGuideChannelSetList */
	public FreeGuideChannelSetList(FreeGuideLauncher launcher, XMLTVLoader loader) {
		
		this.launcher = launcher;
		this.loader = loader;
		
		channelsetModel = new DefaultListModel();
		
		initComponents();
		
		loadChannelSet();
		
		fillList();
		
		latestIndex = 0;
		selectLatest();
		
	}
	
	private void selectLatest() {
		
		list.setSelectedIndex(latestIndex);
		
	}
	
	private void loadChannelSet() {
		
		channelset = new Vector(Arrays.asList(FreeGuide.prefs.getChannelSets()));
		
		
	}
	
	private void fillList() {
		
		
		channelsetModel.removeAllElements();
                //DMT: iterate over keys()	
		for(int i=0;i<channelset.size();i++) {
			channelsetModel.addElement( ((FreeGuideChannelSet)channelset.get(i)).getChannelSetName() );
		}
		
		//list = new javax.swing.JList(titles);
		
	}
	
	private void saveChannelSet() {
		
		// Write out our channelset to the config file
		// DMT TODO
		FreeGuide.prefs.replaceChannelSets(FreeGuideUtils.arrayFromVector_FreeGuideChannelSet(channelset));
		
		FreeGuide.prefs.flushAll();
		
	}
	
	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        butAdd = new javax.swing.JButton();
        butEdit = new javax.swing.JButton();
        butRemove = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        list = new javax.swing.JList(channelsetModel);
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        butOK = new javax.swing.JButton();
        butCancel = new javax.swing.JButton();

        getContentPane().setLayout(new java.awt.GridBagLayout());

        setTitle("List of channel sets");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        jPanel1.setLayout(new java.awt.GridBagLayout());

        butAdd.setText("Add");
        butAdd.setPreferredSize(new java.awt.Dimension(83, 26));
        butAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butAddActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 10);
        jPanel1.add(butAdd, gridBagConstraints);

        butEdit.setText("Edit");
        butEdit.setPreferredSize(new java.awt.Dimension(83, 26));
        butEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butEditActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 10);
        jPanel1.add(butEdit, gridBagConstraints);

        butRemove.setText("Remove");
        butRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butRemoveActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 10);
        jPanel1.add(butRemove, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        getContentPane().add(jPanel1, gridBagConstraints);

        jScrollPane1.setViewportView(list);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.9;
        gridBagConstraints.weighty = 0.9;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 5);
        getContentPane().add(jScrollPane1, gridBagConstraints);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Channel sets:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(jLabel1, gridBagConstraints);

        jPanel2.setLayout(new java.awt.GridBagLayout());

        butOK.setText("OK");
        butOK.setPreferredSize(new java.awt.Dimension(83, 26));
        butOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butOKActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 10, 5);
        jPanel2.add(butOK, gridBagConstraints);

        butCancel.setText("Cancel");
        butCancel.setPreferredSize(new java.awt.Dimension(83, 26));
        butCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butCancelActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 10, 10);
        jPanel2.add(butCancel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        getContentPane().add(jPanel2, gridBagConstraints);

        pack();
        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setSize(new java.awt.Dimension(400, 300));
        setLocation((screenSize.width-400)/2,(screenSize.height-300)/2);
    }//GEN-END:initComponents

	private void butRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butRemoveActionPerformed
		
		latestIndex = list.getSelectedIndex();
		if(latestIndex==channelsetModel.size()-1) {
			latestIndex--;
		}
		
		int[] sel = list.getSelectedIndices();
		
		for(int i=0;i<sel.length;i++) {
			channelset.remove(sel[i]);
		}
		
		fillList();
		selectLatest();
		
	}//GEN-LAST:event_butRemoveActionPerformed

	private void butCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butCancelActionPerformed
		
		quit();
		
	}//GEN-LAST:event_butCancelActionPerformed

	private void butOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butOKActionPerformed
		
		saveChannelSet();
		quit();
		
	}//GEN-LAST:event_butOKActionPerformed

	private void butEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butEditActionPerformed
		
		latestIndex = list.getSelectedIndex();
		int i = list.getSelectedIndex();
		if(i != -1 ) {
                        
			FreeGuideChannelSetImpl fav = (FreeGuideChannelSetImpl)channelset.get( i );
			//update the channel set names
                        fav.updateChannelNames(loader);

                        new FreeGuideChannelSetEditor(this, loader, fav).show();
		}
		
	}//GEN-LAST:event_butEditActionPerformed

	private void butAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butAddActionPerformed
		
		FreeGuideChannelSetImpl newCset = new FreeGuideChannelSetImpl();
	                
                channelset.add( newCset );
		new FreeGuideChannelSetEditor(this, loader, newCset).show();
		latestIndex = channelsetModel.size();
		
	}//GEN-LAST:event_butAddActionPerformed
	
	private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
		quit();
	}//GEN-LAST:event_exitForm
	
	/** 
	 * Closes the form and goes back to the viewer.
	 */
	private void quit() {
		
		hide();
		launcher.reShow();
		dispose();

	}
	
	public FreeGuideLauncher getLauncher() {
		return launcher;
	}
	
	public void reShow() {
		
		/*for(int i=0;i<channelset.size();i++) {
			System.out.println("fav " +i+ " " + channelset.get(i));
		}*/
		
		fillList();
		selectLatest();
	}
	
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton butEdit;
    private javax.swing.JButton butRemove;
    private javax.swing.JButton butAdd;
    private javax.swing.JList list;
    private javax.swing.JButton butOK;
    private javax.swing.JButton butCancel;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
	
	private Vector channelset;	// The channelsets
	private FreeGuideLauncher launcher;
	private XMLTVLoader loader;
	
	private DefaultListModel channelsetModel;
	
	private int latestIndex;
	
}
