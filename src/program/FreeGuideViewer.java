/*
 * FreeGuide J2
 *
 * Copyright (c) 2001 by Andy Balaam
 *
 * Released under the GNU General Public License
 * with ABSOLUTELY NO WARRANTY.
 *
 * See the file COPYING for more information.
 */

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.lang.Math;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Collections;
import java.util.GregorianCalendar;
import java.util.Vector;
//import java.util.regex.Pattern;
//import java.text.FieldPosition;
import javax.swing.JLabel;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.JTextArea;
import javax.swing.JScrollPane;
import javax.swing.text.JTextComponent;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;
import org.xml.sax.helpers.DefaultHandler;
import org.xml.sax.SAXException;

/**
 * A form that displays and prints TV listings.
 *
 * @author  Andy Balaam
 * @version 14
 */
public class FreeGuideViewer extends javax.swing.JFrame implements FreeGuideLauncher {

    public FreeGuideViewer(FreeGuideLauncher newLauncher, FreeGuidePleaseWait pleaseWait) {

		launcher = newLauncher;
		
		doingProgs = false;
		dontDownload = false;

		// Set up UI
		initComponents();

		// Set the date to today
		theDate = GregorianCalendar.getInstance();

		// Set up custom UI elements
		initMyComponents();

		// Draw the programmes on the screen
		//updatePanel();

		goToNow(true);

		if(pleaseWait!=null) {
			pleaseWait.dispose();
		}

    }

	private void updatePanel() {
		
		FreeGuide.prefs.flushAll();

		// Find what channels the user has chosen
		getSelectedChannels();

		// Load the data
		loadProgrammeData();
	

		
		// Error if we're missing programme info
		if(missingFiles) {
			
			if(!dontDownload) {
				
				String msg = "";
				for(int i=0; i<channelLoaded.size(); i++) {
					if(channelLoaded.get(i).equals(Boolean.FALSE)) {
						msg += channelNames.get(i) + "\n";
					}
				}

				JTextArea ta = new JTextArea(msg);
				JScrollPane sp = new JScrollPane(ta, JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED, JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
				sp.setPreferredSize(new Dimension(100,100));
				Object[] oa = new Object[3];
				oa[0]="There are missing listings for this day:";
				oa[1]=sp;
				oa[2]="Do you want to download more?";
				int r = JOptionPane.showConfirmDialog(this, oa, "Download listings?", JOptionPane.YES_NO_OPTION );

				if(r==0) {

					downloadListings();
 					missingFiles=false;
					
					/* WCD
					if (downloadListings()==1) {
						missingFiles=false;
					}
					else {
						dontDownload = true;
					}
					*/
					return;

				} else {

					dontDownload = true;

				}

			} //if (!dontDownload)
		} //if (missingFiles)
		
		drawProgrammes();
		updatePrintedGuide();
		setVisible(true);
		
		
    }
	
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        popProg = new javax.swing.JPopupMenu();
        menAddFav = new javax.swing.JMenuItem();
        topPanel = new javax.swing.JPanel();
        butGoToNow = new javax.swing.JButton();
        butPrev = new javax.swing.JButton();
        comTheDate = new javax.swing.JComboBox();
        butNext = new javax.swing.JButton();
        splitPane = new javax.swing.JSplitPane();
        printedGuideScrollPane = new javax.swing.JScrollPane();
        printedGuideArea = new javax.swing.JEditorPane();
        jSplitPane1 = new javax.swing.JSplitPane();
        channelNameScrollPane = new javax.swing.JScrollPane();
        channelNamePanel = new javax.swing.JPanel();
        //outerPanel = new javax.swing.JPanel();
        innerScrollPane = new javax.swing.JScrollPane();
        innerPanel = new FreeGuideInnerPanel();
        //timeScrollPane = new javax.swing.JScrollPane();
        timePanel = new FreeGuideTimePanel();
        butRevertFavs = new javax.swing.JButton();
        butPrint = new javax.swing.JButton();
        butDownload = new javax.swing.JButton();
        jMenuBar2 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        menDownload = new javax.swing.JMenuItem();
        menPrint = new javax.swing.JMenuItem();
        jSeparator5 = new javax.swing.JSeparator();
        menQuit = new javax.swing.JMenuItem();
        optionsMenu = new javax.swing.JMenu();
        menCustomiser = new javax.swing.JMenuItem();
        menChannels = new javax.swing.JMenuItem();
        menFavourites = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JSeparator();
        menOptions = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        menUserGuide = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JSeparator();
        menAbout = new javax.swing.JMenuItem();

        popProg.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
                popProgPopupMenuWillBecomeVisible(evt);
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
        });

        menAddFav.setText("Add to favourites");
        menAddFav.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menAddFavActionPerformed(evt);
            }
        });

        popProg.add(menAddFav);

        getContentPane().setLayout(new java.awt.GridBagLayout());

        setTitle("FreeGuide " + FreeGuide.getVersion());
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        topPanel.setLayout(new java.awt.GridBagLayout());

        butGoToNow.setFont(new java.awt.Font("Dialog", 0, 10));
        butGoToNow.setText("Go To Now");
        butGoToNow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butGoToNowActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        topPanel.add(butGoToNow, gridBagConstraints);

        butPrev.setText("-");
        butPrev.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butPrevActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        topPanel.add(butPrev, gridBagConstraints);

        comTheDate.setEditable(true);
        comTheDate.setMinimumSize(new java.awt.Dimension(150, 25));
        comTheDate.setPreferredSize(new java.awt.Dimension(150, 25));
        comTheDate.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comTheDateItemStateChanged(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        topPanel.add(comTheDate, gridBagConstraints);

        butNext.setText("+");
        butNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butNextActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        topPanel.add(butNext, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 2);
        getContentPane().add(topPanel, gridBagConstraints);

        splitPane.setDividerLocation(180);
		splitPane.setOneTouchExpandable(true);
        splitPane.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        printedGuideArea.setEditable(false);
        printedGuideArea.setContentType("text/html");
        printedGuideScrollPane.setViewportView(printedGuideArea);

        splitPane.setRightComponent(printedGuideScrollPane);

        channelNameScrollPane.setBorder(null);
        channelNameScrollPane.setVerticalScrollBarPolicy(javax.swing.JScrollPane.VERTICAL_SCROLLBAR_NEVER);
        channelNameScrollPane.setMinimumSize(new java.awt.Dimension(100, 100));
        channelNameScrollPane.setPreferredSize(new java.awt.Dimension(100, 100));
        channelNamePanel.setLayout(null);

        channelNamePanel.setBackground(new java.awt.Color(245, 245, 255));
		
		javax.swing.JPanel tmpJPanel = new javax.swing.JPanel();
		tmpJPanel.setPreferredSize(new java.awt.Dimension(24,24));
		tmpJPanel.setBackground(new java.awt.Color(245, 245, 255));
		channelNameScrollPane.setColumnHeaderView(tmpJPanel);
		
        channelNameScrollPane.setViewportView(channelNamePanel);

        jSplitPane1.setLeftComponent(channelNameScrollPane);

        //outerPanel.setLayout(new java.awt.GridBagLayout());

		timePanel.setPreferredSize(new java.awt.Dimension(24, 24));
		
        //outerPanel.setBackground(new java.awt.Color(245, 245, 255));
        innerScrollPane.setBorder(null);
        innerScrollPane.setColumnHeaderView(timePanel);
        innerPanel.setLayout(null);

        innerPanel.setBackground(new java.awt.Color(245, 245, 255));
        innerScrollPane.setViewportView(innerPanel);

        //gridBagConstraints = new java.awt.GridBagConstraints();
        //gridBagConstraints.gridx = 0;
        //gridBagConstraints.gridy = 2;
        //gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        //gridBagConstraints.weightx = 0.9;
        //gridBagConstraints.weighty = 0.9;
        //outerPanel.add(innerScrollPane, gridBagConstraints);

        //timeScrollPane.setBorder(null);
	    //timeScrollPane.setHorizontalScrollBarPolicy(javax.swing.JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
        //timeScrollPane.setVerticalScrollBarPolicy(javax.swing.JScrollPane.VERTICAL_SCROLLBAR_NEVER);
        //timeScrollPane.setMaximumSize(new java.awt.Dimension(24, 24));
        //timeScrollPane.setMinimumSize(new java.awt.Dimension(24, 24));
        //timeScrollPane.setPreferredSize(new java.awt.Dimension(24, 24));
        timePanel.setLayout(null);

        timePanel.setBackground(new java.awt.Color(245, 245, 255));
        //timeScrollPane.setViewportView(timePanel);

        //gridBagConstraints = new java.awt.GridBagConstraints();
        //gridBagConstraints.gridx = 0;
        //gridBagConstraints.gridy = 0;
        //gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        //gridBagConstraints.weightx = 0.9;
        //outerPanel.add(timeScrollPane, gridBagConstraints);

        //jSplitPane1.setRightComponent(outerPanel);
		jSplitPane1.setRightComponent(innerScrollPane);

        splitPane.setLeftComponent(jSplitPane1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.9;
        gridBagConstraints.weighty = 0.9;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        getContentPane().add(splitPane, gridBagConstraints);

        butRevertFavs.setFont(new java.awt.Font("Dialog", 0, 10));
        butRevertFavs.setText("Reset choices");
        butRevertFavs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butRevertFavsActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 2, 0);
        getContentPane().add(butRevertFavs, gridBagConstraints);

        butPrint.setFont(new java.awt.Font("Dialog", 0, 10));
        butPrint.setText("Print this personalised listing");
        butPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butPrintActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 2, 0);
        getContentPane().add(butPrint, gridBagConstraints);

        butDownload.setFont(new java.awt.Font("Dialog", 0, 10));
        butDownload.setText("Download Listings");
        butDownload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butDownloadActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 0, 0);
        getContentPane().add(butDownload, gridBagConstraints);

        fileMenu.setText("File");
        menDownload.setText("Download Listings");
        menDownload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menDownloadActionPerformed(evt);
            }
        });

        fileMenu.add(menDownload);
        menPrint.setText("Print this personalised listing");
        menPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menPrintActionPerformed(evt);
            }
        });

        fileMenu.add(menPrint);
        fileMenu.add(jSeparator5);
        menQuit.setText("Quit");
        menQuit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menQuitActionPerformed(evt);
            }
        });

        fileMenu.add(menQuit);
        jMenuBar2.add(fileMenu);
        optionsMenu.setText("Tools");
        menCustomiser.setText("Customise");
        menCustomiser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menCustomiserActionPerformed(evt);
            }
        });

        optionsMenu.add(menCustomiser);
        menChannels.setText("Channels");
        menChannels.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menChannelsActionPerformed(evt);
            }
        });

        optionsMenu.add(menChannels);
        menFavourites.setText("Favourites");
        menFavourites.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menFavouritesActionPerformed(evt);
            }
        });

        optionsMenu.add(menFavourites);
        optionsMenu.add(jSeparator1);
        menOptions.setText("Options");
        menOptions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menOptionsActionPerformed(evt);
            }
        });

        optionsMenu.add(menOptions);
        jMenuBar2.add(optionsMenu);
        helpMenu.setText("Help");
        menUserGuide.setText("User Guide...");
        menUserGuide.setEnabled(false);
        helpMenu.add(menUserGuide);
        helpMenu.add(jSeparator4);
        menAbout.setText("About...");
        menAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menAboutActionPerformed(evt);
            }
        });

        helpMenu.add(menAbout);
        jMenuBar2.add(helpMenu);
        setJMenuBar(jMenuBar2);

        pack();
        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
		
		// Load the window size and position etc.
		// --------------------------------------
		setSize(
			FreeGuide.prefs.screen.getInt("viewer_width", 615),
			FreeGuide.prefs.screen.getInt("viewer_height", 345) );
		
		setLocation(
			FreeGuide.prefs.screen.getInt("viewer_left", (screenSize.width-615)/2 ),
			FreeGuide.prefs.screen.getInt("viewer_top", (screenSize.height-345)/2 ) );
			
		jSplitPane1.setDividerLocation(FreeGuide.prefs.screen.getInt("viewer_splitpane_vertical", 100));
		splitPane.setDividerLocation(FreeGuide.prefs.screen.getInt("viewer_splitpane_horizontal", 150));
		
    }//GEN-END:initComponents

	private void popProgPopupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_popProgPopupMenuWillBecomeVisible
		
		// Find the current favourites
		FreeGuideFavourite[] favourites = FreeGuide.prefs.getFavourites();
		
		boolean isFav = false;
		
		// Find out whether the programme is a favourite
		for(int i=0;i<favourites.length;i++) {
						
			if(favourites[i].matches(rightClickedProg)) {
				isFav = true;
				break;
			}
						
		}//for
		
		if(isFav) {
			menAddFav.setText("Remove from favourites");
		} else {
			menAddFav.setText("Add to favourites");
		}
		
	}//GEN-LAST:event_popProgPopupMenuWillBecomeVisible

	private void butDownloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butDownloadActionPerformed
		
		downloadListings();
		
	}//GEN-LAST:event_butDownloadActionPerformed

	private void menChannelsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menChannelsActionPerformed
		setVisible(false);
		new FreeGuideChannelsChooser(this).setVisible(true);
		dispose();
	}//GEN-LAST:event_menChannelsActionPerformed

	private void menCustomiserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menCustomiserActionPerformed
		setVisible(false);
		new FreeGuideCustomiser(this).setVisible(true);
		dispose();
	}//GEN-LAST:event_menCustomiserActionPerformed

	private void menAddFavActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menAddFavActionPerformed
		
		if(menAddFav.getText().equals("Add to favourites")) {
		
			// Make a favourite
			FreeGuideFavourite fav = new FreeGuideFavourite();
			String title = rightClickedProg.getTitle();
			fav.setTitleString( title );
			fav.setName( title );
		
			// Remember the favourite
			FreeGuide.prefs.favourites.appendFreeGuideFavourite(fav);
		
			// Tick this programme
			if(!tickedProgrammes.contains(rightClickedProg)) {
		
				JLabel txt = getJLabelFromProg(rightClickedProg);
				//FreeGuideProgramme prog = getProgFromJLabel(txt);
		
				txt.setBackground( FreeGuide.prefs.screen.getColor("programme_chosen_colour", FreeGuide.PROGRAMME_CHOSEN_COLOUR) );
				tickedProgrammes.add(rightClickedProg);
			
				FreeGuide.prefs.addChoice(rightClickedProg);
			
				// Update the guide
				updatePrintedGuide();
			
			}
			
		} else {
			
			// Find the current favourites
			FreeGuideFavourite[] favourites = FreeGuide.prefs.getFavourites();
		
			// Find out whether the programme is a favourite
			for(int i=0;i<favourites.length;i++) {
						
				if(favourites[i].matches(rightClickedProg)) {
					
					int	r = JOptionPane.showConfirmDialog(this, "Remove favourite \"" + favourites[i].getName() + "\"?", "Remove favourite?", JOptionPane.YES_NO_OPTION );
			
					if(r==0) {
				
						//System.out.println(i);
						
						FreeGuide.prefs.favourites.removeFreeGuideFavourite(i+1);
					
						// Untick this programme
						if(tickedProgrammes.contains(rightClickedProg)) {
		
							JLabel txt = getJLabelFromProg(rightClickedProg);
		
							txt.setBackground( FreeGuide.prefs.screen.getColor("programme_colour", FreeGuide.PROGRAMME_NORMAL_COLOUR) );
							tickedProgrammes.remove(rightClickedProg);
			
							FreeGuide.prefs.removeChoice(rightClickedProg);
			
							// Update the guide
							updatePrintedGuide();
			
						}
				
					}
					
				}
		
			}//for
			
		}
		
	}//GEN-LAST:event_menAddFavActionPerformed

	private void butRevertFavsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butRevertFavsActionPerformed
		
		// Untick everything
		for(int i=0;i<tickedProgrammes.size();i++) {
			FreeGuide.prefs.removeChoice( (FreeGuideProgramme)tickedProgrammes.get(i) );
		}
		
		// Tell the prefs we've got no choices for today
		FreeGuide.prefs.chosenSomething( theDate, false );
		
		// Clear out the vector of ticked programmes
		tickedProgrammes.clear();
		
		// Tick favourites
		tickFavsOrChoices();
		updatePrintedGuide();
		
	}//GEN-LAST:event_butRevertFavsActionPerformed

	private void comTheDateItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comTheDateItemStateChanged
		
		updateIfDateChanged();
			
	}//GEN-LAST:event_comTheDateItemStateChanged

	private void menPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menPrintActionPerformed
		
		writeOutAsHTML();
		
	}//GEN-LAST:event_menPrintActionPerformed

	private void butGoToNowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butGoToNowActionPerformed
		
		goToNow();
		
	}//GEN-LAST:event_butGoToNowActionPerformed

	private void menAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menAboutActionPerformed
		
		new FreeGuideAbout(this, true).setVisible(true);
		
	}//GEN-LAST:event_menAboutActionPerformed

	private void menUserGuideActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menUserGuideActionPerformed
		
		
		
	}//GEN-LAST:event_menUserGuideActionPerformed

	private void menOptionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menOptionsActionPerformed
		
		setVisible(false);
		new FreeGuideOptions(this).setVisible(true);
		dispose();
		
	}//GEN-LAST:event_menOptionsActionPerformed

	private void menFavouritesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menFavouritesActionPerformed
				
		setVisible(false);
		new FreeGuideFavouritesList(this).setVisible(true);
		dispose();
		
	}//GEN-LAST:event_menFavouritesActionPerformed

	private void menDownloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menDownloadActionPerformed
		
		downloadListings();
		
	}//GEN-LAST:event_menDownloadActionPerformed

	private void downloadListings() {
		FreeGuideUtils.execAndWait(FreeGuide.prefs.getCommands("tv_grab"), "Downloading", this);
	}
	
	/* WCD Walter's substitution code - better done in performSubstitutions
	private int downloadListings() {
		
		// 1=success
		// 0=failure
		
		//  get today so we can calculate grabber offset
		Calendar realToday = GregorianCalendar.getInstance();	
		int realDOY = realToday.get(Calendar.DAY_OF_YEAR);
		int realY = realToday.get(Calendar.YEAR);
		
		//  Get freeguide visible day (this is the one we will grab)
		int visibleDOY = theDate.get(Calendar.DAY_OF_YEAR);
		int visibleY = theDate.get(Calendar.YEAR);
		
		// if today, and freeguideDay are in different years compensate
		if (Math.abs(visibleY-realY)>1) {
			FreeGuide.log.severe("downloadListings(): Trying to fetch a date greater than\n" +
				"    1 year from the present day is not supported.");
			return(0);
		}
		if ( visibleY>realY) {
			// add a real year number of days to the visible day of year
			// to compensate for the change in year
			visibleDOY+=realToday.getActualMaximum(Calendar.DAY_OF_YEAR);
		} else if ( visibleY<realY) {
			// add a visible year number of days to the real day of year
			// to compensate for the change in year
			realDOY+=theDate.getActualMaximum(Calendar.DAY_OF_YEAR);
		}
		
		// visible day after real day is future offset (positive)
		// visible day before real day is past offset (negative)
		int offset = visibleDOY - realDOY;
	
		String[] cmd = FreeGuide.prefs.getCommands("tv_grab");
		Pattern p_offset = Pattern.compile("%OFFSET");
		Pattern p_date = Pattern.compile("%DATE");
		
		SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");
		StringBuffer date_buffer = sdf.format(theDate.getTime(), new StringBuffer(), new FieldPosition(0));
		String date_string = date_buffer.toString();
		
		for(int i=0;i<cmd.length;i++) {
			//System.out.println("Before["+i+"]: "+cmd[i]);
			//cmd[i].replaceAll("TODAY", new Integer(offset).toString());
			//cmd[i].replaceAll("TODAY", new Integer(2).toString());
			cmd[i]=p_offset.matcher(cmd[i]).replaceAll(new Integer(offset).toString());
			cmd[i]=p_date.matcher(cmd[i]).replaceAll(date_string);
			//System.out.println("After["+i+"]: "+cmd[i]);
		}
		FreeGuideUtils.execAndWait(cmd, "Downloading", this);
		// FIXME -- we should return, and process the command status here.
		return(1);
	}*/
	
	private void menQuitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menQuitActionPerformed
		
		quit();
		
	}//GEN-LAST:event_menQuitActionPerformed

	private void butPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butPrintActionPerformed
		
		writeOutAsHTML();
		
	}//GEN-LAST:event_butPrintActionPerformed

	private void butNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butNextActionPerformed
		
		Calendar tmpDate = GregorianCalendar.getInstance();
		tmpDate.setTimeInMillis( theDate.getTimeInMillis() );

		tmpDate.add( Calendar.DAY_OF_YEAR, 1 );
		
		String datestr = comboBoxDateFormat.format(tmpDate.getTime());
		
		comTheDate.setSelectedItem(datestr);
		
	}//GEN-LAST:event_butNextActionPerformed

	private void butPrevActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butPrevActionPerformed
		
		Calendar tmpDate = GregorianCalendar.getInstance();
		tmpDate.setTimeInMillis( theDate.getTimeInMillis() );

		tmpDate.add( Calendar.DAY_OF_YEAR, -1 );

		String datestr = comboBoxDateFormat.format(tmpDate.getTime());

		comTheDate.setSelectedItem(datestr);
		
	}//GEN-LAST:event_butPrevActionPerformed

	private void addInnerScrollPaneAdjustmentListeners() {
		
		//innerScrollPane.getHorizontalScrollBar().addAdjustmentListener(new java.awt.event.AdjustmentListener() {
			//public void adjustmentValueChanged(java.awt.event.AdjustmentEvent evt) {
				//innerScrollPaneHorAdjust(evt);
			//}
		//});
	
		innerScrollPane.getVerticalScrollBar().addAdjustmentListener(new java.awt.event.AdjustmentListener() {
			public void adjustmentValueChanged(java.awt.event.AdjustmentEvent evt) {
				innerScrollPaneVerAdjust(evt);
			}
		});
	}
	
	private void removeInnerScrollPaneAdjustmentListeners() {
		
		java.awt.event.AdjustmentListener[] l = innerScrollPane.getHorizontalScrollBar().getAdjustmentListeners();
		for(int i=0;i<l.length;i++) {
			innerScrollPane.getHorizontalScrollBar().removeAdjustmentListener(l[i]);
		}
		
		l = innerScrollPane.getVerticalScrollBar().getAdjustmentListeners();
		for(int i=0;i<l.length;i++) {
			innerScrollPane.getVerticalScrollBar().removeAdjustmentListener(l[i]);
		}
		
	}
	
	private void makeDatesList() {
		Calendar tmpDate = GregorianCalendar.getInstance();
		tmpDate.setTimeInMillis( theDate.getTimeInMillis() );
		
		for(int i=0;i<14;i++) {
			
			comTheDate.addItem(comboBoxDateFormat.format(tmpDate.getTime()));
			tmpDate.add( Calendar.DAY_OF_YEAR, 1 );
			
		}
	}
	
	/**
	 * Add listeners to the two scrollbars in the GUI and put the relevant
	 * dates in the date list
	 */
    private void initMyComponents() {
		
		//  Do the listeners
		addInnerScrollPaneAdjustmentListeners();

		/*JMenuItem menuItem;
		popProg = new JPopupMenu();
		menuItem = new JMenuItem("A popup menu item");
		//menuItem.addActionListener(this);
		popProg.add(menuItem);
		menuItem = new JMenuItem("Another popup menu item");
		//menuItem.addActionListener(this);
		popProg.add(menuItem);*/
		
    }//initMyComponents
    
	private void goToNow() {
		goToNow(false);
	}

	private void goToNow(boolean update) {
		makeDatesList();

		int oldDay = theDate.get(Calendar.DAY_OF_YEAR);
		int oldYear = theDate.get(Calendar.YEAR);

		Calendar now = GregorianCalendar.getInstance();
		theDate.setTime(now.getTime());
		updateDaySpan();
		if (theDate.before(earliest)) theDate.add(Calendar.DAY_OF_YEAR,-1);
		comTheDate.setSelectedItem(comboBoxDateFormat.format(theDate.getTime()));
		//comTheDate.setSelectedIndex(0);

		// update now pointer
		updateDaySpan();
		timePanel.setTimes(earliest, latest);

		// I suspect, panel is not updated before scroll position is set
		// This seems to fix things in the case of a day change
		if (!(oldDay == theDate.get(Calendar.DAY_OF_YEAR) &&
			oldYear == theDate.get(Calendar.YEAR)) || update) {
			updatePanel();
		}
		//updatePrintedGuide();

		//timeScrollPane.getHorizontalScrollBar().setValue(tmpScr);
		innerScrollPane.getHorizontalScrollBar().
			setValue(timePanel.getNowScroll() - 100);
		
	}

	/**
	 * The event procedure for the horizontal scrollpane listener - just
	 * calls the scrollTime method.
	 */
    //private void innerScrollPaneHorAdjust(java.awt.event.AdjustmentEvent evt) {
		//scrollTime();
    //}//innerScrollPaneHorAdjust
    
	/**
	 * The event procedure for the vertical scrollpane listener - just
	 * calls the scrollChannelNames method.
	 */
    private void innerScrollPaneVerAdjust(java.awt.event.AdjustmentEvent evt) {
		scrollChannelNames();
    }//innerScrollPaneVerAdjust
    
	/**
	 * The event listener for the form closing event - calls the quit method
	 */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        quit();
    }//GEN-LAST:event_exitForm

	/**
	 * Quits the program.
	 */
	private void quit() {
		
		// Save the window size and position etc.
		// --------------------------------------
		FreeGuide.prefs.screen.putInt("viewer_left", getX());
		FreeGuide.prefs.screen.putInt("viewer_top", getY());
		FreeGuide.prefs.screen.putInt("viewer_width", getWidth());
		FreeGuide.prefs.screen.putInt("viewer_height", getHeight());
		FreeGuide.prefs.screen.putInt("viewer_splitpane_vertical", jSplitPane1.getDividerLocation());
		FreeGuide.prefs.screen.putInt("viewer_splitpane_horizontal", splitPane.getDividerLocation());
		
		// Delete old .fgd files
		// ---------------------
		
		String fs = System.getProperty("file.separator");
		
		// Get the date last week
		Calendar lastWeek = GregorianCalendar.getInstance();
		lastWeek.add(Calendar.WEEK_OF_YEAR, -1);
		Calendar cal = GregorianCalendar.getInstance();
		
		File wd = new File(FreeGuide.prefs.performSubstitutions(FreeGuide.prefs.misc.get("working_directory")));
		if(wd.isDirectory()) {
			String[] files = wd.list();
			for(int i=0;i<files.length;i++) {
				// If it's a fgd file, we may want to delete it
				if(files[i].endsWith(".fgd")) {
					int len = files[i].length();
					String dateStr = files[i].substring(len-12, len-4);
					try {
						cal.setTime( fileDateFormat.parse(dateStr) );
						if(cal.before(lastWeek)) {
							new File(wd + fs + files[i]).delete();
						}
					} catch(java.text.ParseException e) {
						e.printStackTrace();
					}
				}
			}
		}
		
		// Delete old entries in choices preferences
		Calendar[] choiceDates = FreeGuide.prefs.getAllChosenDays();
		for(int i=0;i<choiceDates.length;i++) {
			if(choiceDates[i].before(lastWeek)) {
				FreeGuide.prefs.chosenSomething(choiceDates[i], false);
			}
		}
		
		// Exit
		// ----
		FreeGuide.log.info("FreeGuide - Ending normally.");
		System.exit(0);
		
	}//quit
     
	/**
	 * Loads the programme data from a file and stores it in a class
	 * structure ready for display on the screen.
	 */
    private void loadProgrammeData() {
		
		String fs = System.getProperty("file.separator");

		// Are we missing any channel files?
		missingFiles = false;
		
		updateDaySpan();
		
		programmes = new Vector();

		String wkDir = FreeGuide.prefs.performSubstitutions(
			FreeGuide.prefs.misc.get("working_directory") );
		
		Calendar tomorrow = (Calendar)theDate.clone();
		tomorrow.add(Calendar.DAY_OF_YEAR,1);
		
		String date1str = fileDateFormat.format(theDate.getTime());
		String date2str = fileDateFormat.format(tomorrow.getTime());

		String day1Filename  = wkDir + fs + "tv-"+date1str+".xmltv";
		String day2Filename = wkDir + fs + "tv-"+date2str+".xmltv";
		String unprocFilename = wkDir + fs + "tv-unprocessed.xmltv";
		
		for(int curChan2=0;curChan2<channelNames.size();curChan2++) {
			channelLoaded.set(curChan2,Boolean.FALSE);
		}

		File day1File = new File(day1Filename);
		File day2File = new File(day2Filename);
		File unprocFile = new File(unprocFilename);
			
		// Parse any files that exist
		
		try {//ParserExceptions etc

			DefaultHandler handler = new FreeGuideSAXHandler(programmes,
				channelIDs, channelNames, channelLoaded, earliest, latest );
			
			SAXParserFactory factory = SAXParserFactory.newInstance();

			SAXParser saxParser = factory.newSAXParser();

			doingProgs=true;
			boolean parsedPartOfToday = false;

			// Hopefully we'll have a file for tomorrow, but it doesn't matter
			// if not.
			if(day2File.exists()) {
				saxParser.parse(day2Filename, handler);
				parsedPartOfToday = true;
			}
			
			// But we must have a file for today or we look for unprocessed
			// listings
			if(day1File.exists()) {
				saxParser.parse(day1Filename, handler);
				parsedPartOfToday = true;
			} else {
				
				if(unprocFile.exists()) {
				
					// The grabber must not be able to split into days,
					// so we'll deal with the unprocessed data.
					saxParser.parse(unprocFilename, handler);
				} else {
				
					if (!day1File.exists()) {
						FreeGuide.log.warning("Listings file not found: "
							+ day1Filename);
					}
				
					if (!day2File.exists()) {
						FreeGuide.log.warning("Listings file not found: " 
							+ day2Filename);
					}
				
					if (!unprocFile.exists()) {
						FreeGuide.log.warning("Listings file not found: " 
							+ unprocFilename);
					}
				
					missingFiles = true;
				
				}
			}
			
			doingProgs=false;

		} catch(ParserConfigurationException e) {
			e.printStackTrace();
			// FIXME - error dialog!
		} catch(SAXException e) {
			e.printStackTrace();
			// FIXME - error dialog!
		} catch(java.io.IOException e) {
			e.printStackTrace();
			// FIXME - error dialog!
		}//try

	}//loadProgrammeData

    private void updateDaySpan() {

		// Find the day's start and end
		FreeGuideTime divideTime = FreeGuide.prefs.misc.getFreeGuideTime("day_start_time");
		earliest = GregorianCalendar.getInstance();
		earliest.setTimeInMillis( theDate.getTimeInMillis() );
		divideTime.adjustCalendar(earliest);
		latest = GregorianCalendar.getInstance();
		latest.setTimeInMillis( theDate.getTimeInMillis() );
		latest.add( Calendar.DAY_OF_YEAR, 1);
		divideTime.adjustCalendar(latest);

    }
	
	/**
	 * Given the programme, returns the jlabel displaying it.
	 *
	 * @param prg the FreeGuideProgramme for a programme
	 * @returns  the programme referred to
	 */
	private JLabel getJLabelFromProg(FreeGuideProgramme prg) {
		int i = programmes.indexOf(prg);
		return (JLabel)textAreas.get(i);
	}//getJLabelFromPrpg
	
	/**
	 * Given the JLabel displaying it, returns the programme.
	 *
	 * @param bx the JLabel for a programme
	 * @returns  the programme referred to
	 */
	private FreeGuideProgramme getProgFromJLabel(JLabel bx) {
		int i = textAreas.indexOf(bx);
		return (FreeGuideProgramme)programmes.get(i);
	}//getProgFromJLabel

	/**
	 * The event procedure for a JLabel when it is clicked.
	 */
	private void jLabelClicked(java.awt.event.MouseEvent evt) {
		
		JLabel txt = (JLabel)evt.getSource();
		FreeGuideProgramme prog = getProgFromJLabel(txt);
		
		// Find out whether this is ticked
		if(tickedProgrammes.contains(prog)) {
			// Remove from ticked list

			txt.setBackground( FreeGuide.prefs.screen.getColor("programme_normal_colour", FreeGuide.PROGRAMME_NORMAL_COLOUR) );
			tickedProgrammes.remove(prog);
			
			FreeGuide.prefs.removeChoice(prog);
			
		} else {
			// Add to ticked list
			
			txt.setBackground( FreeGuide.prefs.screen.getColor("programme_chosen_colour", FreeGuide.PROGRAMME_CHOSEN_COLOUR) );
			tickedProgrammes.add(prog);
			
			FreeGuide.prefs.addChoice(prog);
			
		}
		
		updatePrintedGuide();
		
	}
    
	/**
	 * Scrolls the time panel to the same x-position as the main panel.
	 */
    //private void scrollTime() {
//		timeScrollPane.getHorizontalScrollBar().setValue(innerScrollPane.getHorizontalScrollBar().getValue());
    //}//scrollTime
    
	/**
	 * Scrolls the channel names to the same y-position as the main panel.
	 */
    private void scrollChannelNames() {
		channelNameScrollPane.getVerticalScrollBar().setValue(innerScrollPane.getVerticalScrollBar().getValue());	
    }//scrollChannelNames
    
	/**
	 * Does the main work of displaying the stored programmes on screen.
	 */
	private void drawProgrammes() {
		
		String lineBreak = System.getProperty("line.separator");
		
		// Read in viewing options
		int channelHeight = FreeGuide.prefs.screen.getInt("channel_height", FreeGuide.CHANNEL_HEIGHT);
		int halfVerGap = FreeGuide.prefs.screen.getInt("vertical_gap", FreeGuide.VERTICAL_GAP);
		int halfHorGap = FreeGuide.prefs.screen.getInt("horizontal_gap", FreeGuide.HORIZONTAL_GAP);
		int panelWidth = FreeGuide.prefs.screen.getInt("panel_width",FreeGuide.PANEL_WIDTH);
		
		int channelPanelWidth = FreeGuide.prefs.screen.getInt("channel_panel_width", FreeGuide.CHANNEL_PANEL_WIDTH);

		// Delete all the old textareas
		innerPanel.removeAll();
		
		int tmpH = channelIDs.size()*channelHeight;
		innerPanel.setPreferredSize(new java.awt.Dimension(panelWidth, tmpH));
		innerPanel.setMinimumSize(new java.awt.Dimension(panelWidth, tmpH));
		innerPanel.setMaximumSize(new java.awt.Dimension(panelWidth, tmpH));
		
		tmpH = timePanel.getPreferredSize().height;
		timePanel.setPreferredSize(new java.awt.Dimension(panelWidth, tmpH));
		timePanel.setMinimumSize(new java.awt.Dimension(panelWidth, tmpH));
		timePanel.setMaximumSize(new java.awt.Dimension(panelWidth, tmpH));
		
		Color channelColour = FreeGuide.prefs.screen.getColor("channel_colour", FreeGuide.CHANNEL_COLOUR);

		channelNamePanel.removeAll();
		
		textAreas = new Vector();	// Vector to store all the textareas
		tickedProgrammes = new Vector();	// And whether they'return ticked
	
		// Temporal width in millisecs
		long temporalWidth = latest.getTimeInMillis()-earliest.getTimeInMillis();
	
		// Find the multiplier to help us position programmes
		double widthMultiplier = (double)panelWidth/(double)temporalWidth;
	
		channelNamePanel.setPreferredSize(new Dimension(channelPanelWidth, channelIDs.size()*channelHeight+50));
	
		for(int c=0;c<channelIDs.size();c++) {
			
			if(channelLoaded.get(c).equals(Boolean.TRUE)) {
			
				JLabel ctxt = new JLabel(channelNames.get(c).toString());
				//ctxt.setBounds(0, timeScrollPane.getHeight()+(halfVerGap*2)+(c*channelHeight)-1, channelNamePanel.getPreferredSize().width-1, channelHeight-(halfVerGap*4));
				ctxt.setBounds(0, (halfVerGap*2)+(c*channelHeight)-1, channelNamePanel.getPreferredSize().width-1, channelHeight-(halfVerGap*4));
	    
		    	ctxt.setBackground(channelColour);
				ctxt.setFont(new java.awt.Font("Dialog", 1, 12));
				ctxt.setBorder(new javax.swing.border.LineBorder(java.awt.Color.black));
				ctxt.setHorizontalAlignment(JLabel.LEFT);
				ctxt.setOpaque(true);
		
				channelNamePanel.add(ctxt);
				
			}
			
		}
		
		for(int p=0;p<programmes.size();p++) {
	    
			FreeGuideProgramme prog = (FreeGuideProgramme)programmes.get(p);
			
			Calendar st = prog.getStart();
			Calendar ed = prog.getEnd();
		
			String progDesc = prog.getLongDesc();
			String progTitle = prog.getTitle();
			
			// Find the channel number
			String channelID = prog.getChannelID();
			int ch = channelIDs.indexOf(channelID);
			
			if(ch == -1) {
				FreeGuide.log.severe("Channel ID " + channelID + "not found when drawing channels.");
			}
			
			JLabel txt = new JLabel(timeFormat.format(st.getTime())+ " " + progTitle);
			
			textAreas.add(txt);

			if( progDesc == null ) {
				txt.setToolTipText(progTitle);
			} else {
				txt.setToolTipText(progTitle + " - " + prog.getShortDesc());
			}
		
			int left = halfHorGap+(int)((st.getTimeInMillis()-earliest.getTimeInMillis())*widthMultiplier);
			int right = ((int)((ed.getTimeInMillis()-earliest.getTimeInMillis())*widthMultiplier)) - (halfHorGap*2);
			int top = halfVerGap+(ch*channelHeight);
			int bottom = ((ch+1)*channelHeight)-(halfVerGap*2);

			//txt.setLineWrap(true);
			
			txt.setFont(new java.awt.Font("Dialog", 0, 10));
			txt.setBorder(new javax.swing.border.LineBorder(Color.black));
			txt.setOpaque(true);
			
			txt.setBounds(left, top, right-left, bottom-top);

			
			
			txt.addMouseListener(new java.awt.event.MouseListener() {
				public void mouseClicked(java.awt.event.MouseEvent evt) {
					jLabelClicked(evt);
				}
				public void mousePressed(java.awt.event.MouseEvent evt) {
					maybeShowPopup(evt);
				}
				public void mouseReleased(java.awt.event.MouseEvent evt) {
					maybeShowPopup(evt);
				}
				public void mouseEntered(java.awt.event.MouseEvent evt) {}
				public void mouseExited(java.awt.event.MouseEvent evt) {}
				private void maybeShowPopup(java.awt.event.MouseEvent evt) {
					if (evt.isPopupTrigger()) {
						rightClickedProg = getProgFromJLabel((JLabel)evt.getSource());
						popProg.show(evt.getComponent(), evt.getX(), evt.getY());
					}
				}
			});

			innerPanel.add(txt);
			
		}//for
		
		tickFavsOrChoices();
				
		timePanel.setTimes(earliest, latest);

		timePanel.revalidate();
		timePanel.repaint();

		innerPanel.revalidate();
		innerPanel.repaint();
		
		channelNamePanel.revalidate();
		channelNamePanel.repaint();
		
	}//drawChannels
	
	/**
	 * Shade those boxes that are favourite programmes or have been chosen.
	 */
	private void tickFavsOrChoices() {
		
		// Get whether the user's choice for today or null for none
		Vector choices = FreeGuide.prefs.getChosenProgs(theDate);
		
		// Get the colours we need
		Color tickedColour = FreeGuide.prefs.screen.getColor("programme_chosen_colour", FreeGuide.PROGRAMME_CHOSEN_COLOUR);
		Color nonTickedColour = FreeGuide.prefs.screen.getColor("programme_normal_colour", FreeGuide.PROGRAMME_NORMAL_COLOUR);
		
		for(int p=0;p<programmes.size();p++) {
	    
			// Get the programme and textarea we'return talking about
			FreeGuideProgramme prog = (FreeGuideProgramme)programmes.get(p);
			JLabel txt = (JLabel)textAreas.get(p);
			
			// Have we already got choices for today?
			if(choices!=null) {
				// Yes, use those choices
						
				for(int i=0;i<choices.size();i++) {
					
					if(choices.get(i).equals(prog)) {
						txt.setBackground(tickedColour);
						tickedProgrammes.add(prog);
						break;
					} else {
						txt.setBackground(nonTickedColour);
					}
					
				}
				
			} else {
				// No, use the favourites
			
				// Check if this is a favourite and tick it if so
				FreeGuideFavourite[] favourites = FreeGuide.prefs.getFavourites();
				if(favourites!=null) {
					
					boolean unticked = true;
					for(int i=0;i<favourites.length;i++) {
						
						if(favourites[i].matches(prog)) {
							// Remember this as a choice for next time
							FreeGuide.prefs.addChoice(prog);
				
							txt.setBackground(tickedColour);
							tickedProgrammes.add(prog);
							unticked = false;
							break;
						}
						
					}//for		
					if(unticked){
						txt.setBackground(nonTickedColour);
					}
				}//if
			}//if
			
		}//for
		
	}
	
	private void updateIfDateChanged() {
		
		//System.out.println(comboBoxDateFormat.format(theDate.getTime()) + " \n" +  comTheDate.getSelectedItem());
		
		if(!doingProgs && !comboBoxDateFormat.format(theDate.getTime()).equals((String)comTheDate.getSelectedItem())) {
		
			try {
			
				theDate.setTime( comboBoxDateFormat.parse((String)comTheDate.getSelectedItem()) );
			
			} catch(java.text.ParseException e) {
			
				e.printStackTrace();
			
			}//try

			updatePanel();
		
		}//if
		
	}
    
	// ------------------------------------------------------------------------
	// HMTL Guide stuff
	
    private void updatePrintedGuide() {

		printedGuideArea.setText(constructHTMLGuide(true));
	
    }
    
	/*
	 * Saves out the listings as an HTML file to be printed.
	 */
	private void writeOutAsHTML() {

		String fs = System.getProperty("file.separator");
		
		// Make a file in the default location
		File f = new File(FreeGuide.prefs.performSubstitutions(FreeGuide.prefs.misc.get("working_directory")+fs+"guide.html"));
		
		try {//IOException
			
			BufferedWriter buffy = new BufferedWriter(new FileWriter(f));

			buffy.write(constructHTMLGuide(false));

			buffy.close();
			
			String[] cmds = FreeGuideUtils.substitute(FreeGuide.prefs.commandline.getStrings("browser_command"), "%filename%", f.getPath());
			FreeGuideUtils.execNoWait(cmds);

		
		} catch(java.io.IOException e) {
			e.printStackTrace();
		}//try
		
	}//writeOutAsHTML
	
	/**
	 * Makes a TV Guide in HTML format and returns it as a string.
	 *
	 * @return the TV guide as a string of html
	 */
	private String constructHTMLGuide(boolean onScreen) {
		
		// The string we shall return
		String ans = "";
		
		// Set up some constants
		String lineBreak = System.getProperty("line.separator");

		ans+="<html>"+lineBreak;
		ans+="<head>"+lineBreak;
		ans+="  <title>TV Guide for "+htmlDateFormat.format(theDate.getTime())+"</title>"+lineBreak;
		ans+="  <style type='text/css'>"+lineBreak;
		ans+="	h1 {"+lineBreak;
		ans+="		font-family: helvetica, helv, arial;"+lineBreak;
		ans+="		font-weight: bold;"+lineBreak;
		ans+="		font-size: x-large;"+lineBreak;
		ans+="	}"+lineBreak;
		ans+="	h2 {"+lineBreak;
		ans+="		font-family: helvetica, helv, arial;"+lineBreak;
		ans+="		font-weight: bold;"+lineBreak;
		ans+="		font-size: large;"+lineBreak;
		ans+="	}"+lineBreak;
		ans+="	h3 {"+lineBreak;
		ans+="		font-family: helvetica, helv, arial;"+lineBreak;
		ans+="		font-weight: bold;"+lineBreak;
		ans+="		font-size: medium;"+lineBreak;
		ans+="	}"+lineBreak;
		ans+="	h4 {"+lineBreak;
		ans+="		font-family: helvetica, helv, arial;"+lineBreak;
		ans+="		font-weight: bold;"+lineBreak;
		ans+="		font-size: small;"+lineBreak;
		ans+="	}"+lineBreak;
		ans+="	body {"+lineBreak;
		ans+="		font-family: helvetica, helv, arial;"+lineBreak;
		ans+="		font-size: small;"+lineBreak;
		ans+="	}"+lineBreak;
		ans+="	address {"+lineBreak;
		ans+="		font-family: helvetica, helv, arial;"+lineBreak;
		ans+="		font-size: xx-small;"+lineBreak;
		ans+="	}"+lineBreak;
		ans+="  </style>"+lineBreak;
		ans+="</head>"+lineBreak;
		ans+="<body>"+lineBreak;
		ans+="  <h1>";
		
		if(onScreen) {
			ans+="<font face='helvetica, helv, arial, sans serif' size=4>";
			ans+="Your Personalised TV Guide for "+htmlDateFormat.format(theDate.getTime());
			ans+="</font>";
		} else {
			ans+="TV Guide for "+htmlDateFormat.format(theDate.getTime());
		}
		
		ans+="</h1>"+lineBreak;

		if(onScreen) {
			ans+="<font face='helvetica, helv, arial, sans serif' size=3>";
			ans+="<p>Select programmes above by clicking on them, and they will turn grey and appear below.</p>";
			ans+="</font>";
		}
		
		// Sort the programmes
		Collections.sort(tickedProgrammes, new FreeGuideProgrammeStartTimeComparator());

		// Add them to the HTML list
		// ----------------------------

		if(onScreen) {ans+="<font face='helvetica, helv, arial, sans serif' size=3>";}
		
		for(int i=0;i<tickedProgrammes.size();i++) {

			FreeGuideProgramme prog = (FreeGuideProgramme)tickedProgrammes.get(i);

			//fmt = new SimpleDateFormat("HH:mm");
    
			if(prog.getLongDesc() == null) {
				ans+="  <p><b>"+timeFormat.format(prog.getStart().getTime())+" - "+prog.getTitle()+"</b><br>"+prog.getChannelName()+", ends "+timeFormat.format(prog.getEnd().getTime())+"</p>"+lineBreak;
			} else {
				ans+="  <p><b>"+timeFormat.format(prog.getStart().getTime())+" - "+prog.getTitle()+"</b><br>"+prog.getChannelName()+", ends "+timeFormat.format(prog.getEnd().getTime())+"<br>"+prog.getLongDesc()+"</p>"+lineBreak;
			}
    
		}//for

		if(onScreen) {ans+="</font>";}
		
		if(!onScreen) {
		
			ans+="<hr>"+lineBreak;
			ans+="<address>";
			ans+="http://freeguide-tv.sourceforge.net";
			ans+="</address>"+lineBreak;
			
		}
			
		ans+="</body>"+lineBreak;
		ans+="</html>"+lineBreak;

		return ans;
		
	}
	
	//------------------------------------------------------------------------
	// XML stuff
	

    
	/**
	 * Unhides this window after being hidden while launching another
	 * screen.
	 */
	public void reShow() {

		updatePanel();

	}//reShow
	
	//------------------------------------------------------------------------
	// Helper functions
	
	/**
	 * Gets the channels required from the config file and puts them
	 * in the channelNames array
	 */
    private void getSelectedChannels() {
		
		// Get the channel IDs from config file or prefs
		channelIDs = new Vector();
		channelIDs.addAll(Arrays.asList(FreeGuide.prefs.getChannelIDs()));
		
		channelLoaded = new Vector(channelIDs.size());
		
		// Set default channel names, same as IDs
		channelNames = new Vector(channelIDs.size());
		for(int i=0;i<channelIDs.size();i++) {
			//System.out.println(channelIDs.get(i).toString());
			channelNames.add(channelIDs.get(i));
			channelLoaded.add(new Boolean("false"));
		}
		
    }
	
	//public String[] getChannelIDs() {
	public Vector getChannelIDs() {
		return channelIDs;
	}
	
	//public String[] getChannelNames() {
	public Vector getChannelNames() {
		return channelNames;
	}
	
	public FreeGuideLauncher getLauncher() {
		return launcher;
	}
	
//parseError


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox comTheDate;
    private javax.swing.JMenuItem menCustomiser;
    private javax.swing.JMenuItem menDownload;
    private javax.swing.JEditorPane printedGuideArea;
    private javax.swing.JMenuItem menUserGuide;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSeparator jSeparator4;
    private FreeGuideTimePanel timePanel;
    private javax.swing.JMenuItem menPrint;
    private javax.swing.JPanel channelNamePanel;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JMenuItem menAddFav;
    private javax.swing.JPanel topPanel;
    private javax.swing.JButton butPrint;
    private javax.swing.JButton butDownload;
    private javax.swing.JMenuItem menOptions;
    private javax.swing.JScrollPane channelNameScrollPane;
    private javax.swing.JSplitPane splitPane;
    private javax.swing.JMenuItem menFavourites;
    private javax.swing.JButton butRevertFavs;
    private javax.swing.JMenu optionsMenu;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JMenuItem menAbout;
    private javax.swing.JButton butNext;
    private javax.swing.JButton butPrev;
    private javax.swing.JButton butGoToNow;
    private FreeGuideInnerPanel innerPanel;
    private javax.swing.JScrollPane innerScrollPane;
    private javax.swing.JPopupMenu popProg;
    //private javax.swing.JPanel outerPanel;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JMenuItem menChannels;
    private javax.swing.JScrollPane printedGuideScrollPane;
    private javax.swing.JMenuItem menQuit;
    //private javax.swing.JScrollPane timeScrollPane;
    private javax.swing.JMenu helpMenu;
    // End of variables declaration//GEN-END:variables
    
	
	//private String[] channelIDs;
	private Vector channelIDs;
		// The IDs of the channels the user has chosen
	//private String[] channelNames;
	private Vector channelNames;
		// The names of the channels the user has chosen
	//private boolean[] channelNamed;
		// Has this channel had its name set?
	//private boolean[] channelLoaded;
	private Vector channelLoaded;
    
    

	private boolean doingProgs;	// Are we loading the programmes?
    
    private Calendar earliest;  // The beginning of this day
    private Calendar latest;    // The end of this day
    
    private Calendar theDate;   // The date for which we are listing programmes
    
    private Vector textAreas;	// Stores references to all the textareas shown
    private Vector programmes;	// The programmes being displayed
	private Vector tickedProgrammes;	// Which programmes are chosen?
	
    
	private FreeGuideLauncher launcher;	// The screen that launched this one
	
	private static final SimpleDateFormat comboBoxDateFormat = new SimpleDateFormat("EEEE d MMM yy");
	private static final SimpleDateFormat htmlDateFormat = new SimpleDateFormat("EEEE dd MMMM yyyy");
	private static final SimpleDateFormat timeFormat = new SimpleDateFormat("HH:mm");
	public static final SimpleDateFormat fileDateFormat = new SimpleDateFormat("yyyyMMdd");
	
	private boolean missingFiles;	// true if there were files missing
	private boolean dontDownload;	// true if user doesn't want to download missing files
	
	private FreeGuideProgramme rightClickedProg;
		// The programme the user last right clicked on
	
}

