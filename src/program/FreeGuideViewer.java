/*
 * FreeGuide J2
 *
 * Copyright (c) 2001 by Andy Balaam
 *
 * Released under the GNU General Public License
 * with ABSOLUTELY NO WARRANTY.
 *
 * See the file COPYING for more information.
 */

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.lang.Math;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.lang.Integer;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Collections;
import java.util.GregorianCalendar;
import java.util.Date;
import java.util.Vector;
import java.util.HashMap;
import javax.swing.JLabel;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.JTextArea;
import javax.swing.JScrollPane;
import javax.swing.JComboBox;
import java.awt.event.ItemEvent;
import javax.swing.text.JTextComponent;

/**
 * A form that displays and prints TV listings.
 *
 * @author  Andy Balaam
 * @version 15
 */
public class FreeGuideViewer extends javax.swing.JFrame implements FreeGuideLauncher {

    public FreeGuideViewer(FreeGuideLauncher newLauncher, FreeGuidePleaseWait pleaseWait) {

		launcher = newLauncher;

		dataDateList = new DataDateList( FreeGuide.prefs.performSubstitutions( 
			FreeGuide.prefs.misc.get("working_directory") ),
			"^tv-.*\\.xmltv$");
		
		loader = new XMLTVLoader();
                //set default channel set
                currentchset = (FreeGuideChannelSet)loader;
		
		doingProgs = false;
		dontDownload = false;

		// Set up UI
		initComponents();

		// Set the date to today
		theDate = GregorianCalendar.getInstance();

		// Set up custom UI elements
		initMyComponents();

		// Draw the programmes on the screen
		// FIXME Apparently on linux(java 1.4.0-b92), the goto now is broken w/o this
		//   If it is used, we wind up prompting twice for missing data if that case is true.
		//updatePanel();

		goToNow(true);

		if(pleaseWait!=null) {
			pleaseWait.dispose();
		}

    }

	private void updatePanel() {
		
		FreeGuide.prefs.flushAll();

		// Find what channels the user has chosen
		//getSelectedChannels();

		// Load the data
		doingProgs = true;
		loader.loadProgrammeData( theDate );
		doingProgs = false;
		
		// Error if we're missing programme info
		if( (!loader.hasData()) && (!dontDownload) ) {
				
			Object[] oa = new Object[2];
			oa[0]="There are missing listings for this day:";
			oa[1]="Do you want to download more?";
			int r = JOptionPane.showConfirmDialog(this, oa,
				"Download listings?", JOptionPane.YES_NO_OPTION );
				
			if(r==0) {

				downloadListings();
 				//missingFiles=false;
					
				/* WCD
				if (downloadListings()==1) {
					missingFiles=false;
				}
				else {
					dontDownload = true;
				}
				*/
				return;

			} 
				
			dontDownload = true;

		}
		
		drawChannelSets();
		drawProgrammes();
		updatePrintedGuide();
		setVisible(true);
		
		
    }
	
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        popProg = new javax.swing.JPopupMenu();
        menAddFav = new javax.swing.JMenuItem();
        topPanel = new javax.swing.JPanel();
        butGoToNow = new javax.swing.JButton();
        butPrev = new javax.swing.JButton();
        comTheDate = new javax.swing.JComboBox();
        comChannelSet = new javax.swing.JComboBox();
        butNext = new javax.swing.JButton();
        splitPane = new javax.swing.JSplitPane();
        printedGuideScrollPane = new javax.swing.JScrollPane();
        printedGuideArea = new javax.swing.JEditorPane();
        jSplitPane1 = new javax.swing.JSplitPane();
        channelNameScrollPane = new javax.swing.JScrollPane();
        channelNamePanel = new javax.swing.JPanel();
        //outerPanel = new javax.swing.JPanel();
        innerScrollPane = new javax.swing.JScrollPane();
        innerPanel = new FreeGuideInnerPanel();
        //timeScrollPane = new javax.swing.JScrollPane();
        timePanel = new FreeGuideTimePanel();
        butRevertFavs = new javax.swing.JButton();
        butPrint = new javax.swing.JButton();
        butDownload = new javax.swing.JButton();
        jMenuBar2 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        menDownload = new javax.swing.JMenuItem();
        menPrint = new javax.swing.JMenuItem();
        jSeparator5 = new javax.swing.JSeparator();
        menQuit = new javax.swing.JMenuItem();
        optionsMenu = new javax.swing.JMenu();
        menCustomiser = new javax.swing.JMenuItem();
        menConfigure = new javax.swing.JMenuItem();
        menFavourites = new javax.swing.JMenuItem();
        menChannelSets = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JSeparator();
        menOptions = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        menUserGuide = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JSeparator();
        menAbout = new javax.swing.JMenuItem();

        popProg.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
                popProgPopupMenuWillBecomeVisible(evt);
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
        });

        menAddFav.setText("Add to favourites");
        menAddFav.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menAddFavActionPerformed(evt);
            }
        });

        popProg.add(menAddFav);

        getContentPane().setLayout(new java.awt.GridBagLayout());

        setTitle("FreeGuide " + FreeGuide.getVersion());
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        topPanel.setLayout(new java.awt.GridBagLayout());

        butGoToNow.setFont(new java.awt.Font("Dialog", 0, 10));
        butGoToNow.setText("Go To Now");
        butGoToNow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butGoToNowActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        topPanel.add(butGoToNow, gridBagConstraints);

        butPrev.setText("-");
        butPrev.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butPrevActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        topPanel.add(butPrev, gridBagConstraints);

        comTheDate.setEditable(true);
		comTheDate.setFont(new java.awt.Font("Dialog", 0, 10));
        comTheDate.setMinimumSize(new java.awt.Dimension(120, 25));
        comTheDate.setPreferredSize(new java.awt.Dimension(120, 25));
        comTheDate.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comTheDateItemStateChanged(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        topPanel.add(comTheDate, gridBagConstraints);

        butNext.setText("+");
        butNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butNextActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        topPanel.add(butNext, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.weightx = 0.9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.CENTER;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 2);
        getContentPane().add(topPanel, gridBagConstraints);

        comChannelSet.setEditable(false);
		comChannelSet.setFont(new java.awt.Font("Dialog", 0, 10));
        comChannelSet.setMinimumSize(new java.awt.Dimension(170, 25));
        comChannelSet.setPreferredSize(new java.awt.Dimension(140, 25));
        comChannelSet.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comChannelSetItemStateChanged(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        getContentPane().add(comChannelSet, gridBagConstraints);

        splitPane.setDividerLocation(180);
		splitPane.setOneTouchExpandable(true);
        splitPane.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        printedGuideArea.setEditable(false);
        printedGuideArea.setContentType("text/html");
        printedGuideScrollPane.setViewportView(printedGuideArea);

        splitPane.setRightComponent(printedGuideScrollPane);

        channelNameScrollPane.setBorder(null);
        channelNameScrollPane.setVerticalScrollBarPolicy(javax.swing.JScrollPane.VERTICAL_SCROLLBAR_NEVER);
        channelNameScrollPane.setMinimumSize(new java.awt.Dimension(100, 100));
        channelNameScrollPane.setPreferredSize(new java.awt.Dimension(100, 100));
        channelNamePanel.setLayout(null);

        channelNamePanel.setBackground(new java.awt.Color(245, 245, 255));
		
		javax.swing.JPanel tmpJPanel = new javax.swing.JPanel();
		tmpJPanel.setPreferredSize(new java.awt.Dimension(24,24));
		tmpJPanel.setBackground(new java.awt.Color(245, 245, 255));
		channelNameScrollPane.setColumnHeaderView(tmpJPanel);
		
        channelNameScrollPane.setViewportView(channelNamePanel);

        jSplitPane1.setLeftComponent(channelNameScrollPane);

		timePanel.setPreferredSize(new java.awt.Dimension(24, 24));
		
        innerScrollPane.setBorder(null);
        innerScrollPane.setColumnHeaderView(timePanel);
        innerPanel.setLayout(null);

        innerPanel.setBackground(new java.awt.Color(245, 245, 255));
        innerScrollPane.setViewportView(innerPanel);

        timePanel.setLayout(null);

        timePanel.setBackground(new java.awt.Color(245, 245, 255));

		jSplitPane1.setRightComponent(innerScrollPane);

        splitPane.setLeftComponent(jSplitPane1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.9;
        gridBagConstraints.weighty = 0.9;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        getContentPane().add(splitPane, gridBagConstraints);

        butRevertFavs.setFont(new java.awt.Font("Dialog", 0, 10));
        butRevertFavs.setText("Reset choices");
        butRevertFavs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butRevertFavsActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 2, 0);
        getContentPane().add(butRevertFavs, gridBagConstraints);

        butPrint.setFont(new java.awt.Font("Dialog", 0, 10));
        butPrint.setText("Print this personalised listing");
        butPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butPrintActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 2, 0);
        getContentPane().add(butPrint, gridBagConstraints);

        butDownload.setFont(new java.awt.Font("Dialog", 0, 10));
        butDownload.setText("Download Listings");
        butDownload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butDownloadActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 0, 0);
        getContentPane().add(butDownload, gridBagConstraints);

        fileMenu.setText("File");
        menDownload.setText("Download Listings");
        menDownload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menDownloadActionPerformed(evt);
            }
        });

        fileMenu.add(menDownload);

        menPrint.setText("Print this personalised listing");
        menPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menPrintActionPerformed(evt);
            }
        });

        fileMenu.add(menPrint);

        fileMenu.add(jSeparator5);

        menQuit.setText("Quit");
        menQuit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menQuitActionPerformed(evt);
            }
        });

        fileMenu.add(menQuit);

        jMenuBar2.add(fileMenu);

        optionsMenu.setText("Tools");
        menCustomiser.setText("Customise");
        menCustomiser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menCustomiserActionPerformed(evt);
            }
        });

        optionsMenu.add(menCustomiser);
		
        menConfigure.setText("Configure Grabber");
		menConfigure.setEnabled( false );
        menConfigure.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menConfigureActionPerformed(evt);
            }
        });

        optionsMenu.add(menConfigure);
	
        menFavourites.setText("Favourites");
        menFavourites.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menFavouritesActionPerformed(evt);
            }
        });

        optionsMenu.add(menFavourites);

        menChannelSets.setText("Channel Sets");
        menChannelSets.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menChannelSetsActionPerformed(evt);
            }
        });

        optionsMenu.add(menChannelSets);
        optionsMenu.add(jSeparator1);

        menOptions.setText("Options");
        menOptions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menOptionsActionPerformed(evt);
            }
        });

        optionsMenu.add(menOptions);

        jMenuBar2.add(optionsMenu);

        helpMenu.setText("Help");
        menUserGuide.setText("User Guide...");
        menUserGuide.setEnabled(false);
        helpMenu.add(menUserGuide);

        helpMenu.add(jSeparator4);

        menAbout.setText("About...");
        menAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menAboutActionPerformed(evt);
            }
        });

        helpMenu.add(menAbout);

        jMenuBar2.add(helpMenu);

        setJMenuBar(jMenuBar2);

        pack();
        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
		
		// Load the window size and position etc.
		// --------------------------------------
		setSize(
			FreeGuide.prefs.screen.getInt("viewer_width", 640),
			FreeGuide.prefs.screen.getInt("viewer_height", 400) );
		
		setLocation(
			FreeGuide.prefs.screen.getInt("viewer_left", (screenSize.width-640)/2 ),
			FreeGuide.prefs.screen.getInt("viewer_top", (screenSize.height-400)/2 ) );
			
		jSplitPane1.setDividerLocation(FreeGuide.prefs.screen.getInt("viewer_splitpane_vertical", 100));
		splitPane.setDividerLocation(FreeGuide.prefs.screen.getInt("viewer_splitpane_horizontal", 150));
		
    }//GEN-END:initComponents

	private void popProgPopupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_popProgPopupMenuWillBecomeVisible
		
		// Find the current favourites
		FreeGuideFavourite[] favourites = FreeGuide.prefs.getFavourites();
		
		boolean isFav = false;
		
		// Find out whether the programme is a favourite
		for(int i=0;i<favourites.length;i++) {
						
			if(favourites[i].matches(rightClickedProg)) {
				isFav = true;
				break;
			}
						
		}//for
		
		if(isFav) {
			menAddFav.setText("Remove from favourites");
		} else {
			menAddFav.setText("Add to favourites");
		}
		
	}//GEN-LAST:event_popProgPopupMenuWillBecomeVisible

	private void butDownloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butDownloadActionPerformed
		
		downloadListings();
		
	}//GEN-LAST:event_butDownloadActionPerformed

	private void menConfigureActionPerformed(java.awt.event.ActionEvent evt) {
		
		//setVisible(false);
		//new Configurator(this).setVisible(true);
		//dispose();
		
	}

	private void menCustomiserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menCustomiserActionPerformed
		setVisible(false);
		new FreeGuideCustomiser(this).setVisible(true);
		dispose();
	}//GEN-LAST:event_menCustomiserActionPerformed

	private void menAddFavActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menAddFavActionPerformed
		
		if(menAddFav.getText().equals("Add to favourites")) {
		
			// Make a favourite
			FreeGuideFavourite fav = new FreeGuideFavourite();
			String title = rightClickedProg.getTitle();
			fav.setTitleString( title );
			fav.setName( title );
		
			// Remember the favourite
			FreeGuide.prefs.favourites.appendFreeGuideFavourite(fav);
		
			// Tick this programme
			if(!tickedProgrammes.contains(rightClickedProg)) {
		
				JLabel txt = getJLabelFromProg(rightClickedProg);
				//FreeGuideProgramme prog = getProgFromJLabel(txt);
		
				txt.setBackground( FreeGuide.prefs.screen.getColor("programme_chosen_colour", FreeGuide.PROGRAMME_CHOSEN_COLOUR) );
				tickedProgrammes.add(rightClickedProg);
			
				FreeGuide.prefs.addChoice( rightClickedProg, theDate );
			
				// Update the guide
				updatePrintedGuide();
			
			}
			
		} else {
			
			// Find the current favourites
			FreeGuideFavourite[] favourites = FreeGuide.prefs.getFavourites();
		
			// Find out whether the programme is a favourite
			for(int i=0;i<favourites.length;i++) {
						
				if(favourites[i].matches(rightClickedProg)) {
					
					int	r = JOptionPane.showConfirmDialog(this, "Remove favourite \"" + favourites[i].getName() + "\"?", "Remove favourite?", JOptionPane.YES_NO_OPTION );
			
					if(r==0) {
				
						//System.out.println(i);
						
						FreeGuide.prefs.favourites.removeFreeGuideFavourite(i+1);
					
						// Untick this programme
						if(tickedProgrammes.contains(rightClickedProg)) {
		
							JLabel txt = getJLabelFromProg(rightClickedProg);
		
							txt.setBackground( FreeGuide.prefs.screen.getColor("programme_colour", FreeGuide.PROGRAMME_NORMAL_COLOUR) );
							tickedProgrammes.remove(rightClickedProg);
			
							FreeGuide.prefs.removeChoice(rightClickedProg);
			
							// Update the guide
							updatePrintedGuide();
			
						}
				
					}
					
				}
		
			}//for
			
		}
		
	}//GEN-LAST:event_menAddFavActionPerformed

	private void butRevertFavsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butRevertFavsActionPerformed
		
		// Untick everything
		for(int i=0;i<tickedProgrammes.size();i++) {
			FreeGuide.prefs.removeChoice(
				(FreeGuideProgramme)tickedProgrammes.get(i) );
		}
		
		// Tell the prefs we've got no choices for today
		FreeGuide.prefs.chosenSomething( theDate, false );
		
		// Clear out the vector of ticked programmes
		tickedProgrammes.clear();
		
		// Tick favourites
		tickFavsOrChoices();
		
		updatePrintedGuide();
		
	}//GEN-LAST:event_butRevertFavsActionPerformed

	private void comChannelSetItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comChannelSetItemStateChanged
		
            if (evt.getStateChange() == ItemEvent.SELECTED)
                updateChannelSet();
			
	}//GEN-LAST:event_comChannelSetItemStateChanged
	private void comTheDateItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comTheDateItemStateChanged
		
		updateIfDateChanged();
			
	}//GEN-LAST:event_comTheDateItemStateChanged

	private void menPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menPrintActionPerformed
		
		writeOutAsHTML();
		
	}//GEN-LAST:event_menPrintActionPerformed

	private void butGoToNowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butGoToNowActionPerformed
		
		goToNow();
		
	}//GEN-LAST:event_butGoToNowActionPerformed

	private void menAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menAboutActionPerformed
		
		new FreeGuideAbout(this, true).setVisible(true);
		
	}//GEN-LAST:event_menAboutActionPerformed

	private void menUserGuideActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menUserGuideActionPerformed
		
		
		
	}//GEN-LAST:event_menUserGuideActionPerformed

	private void menOptionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menOptionsActionPerformed
		
		setVisible(false);
		new FreeGuideOptions(this).setVisible(true);
		dispose();
		
	}//GEN-LAST:event_menOptionsActionPerformed

	private void menChannelSetsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menChannelSetsActionPerformed
				
		setVisible(false);
		new FreeGuideChannelSetList(this,loader).setVisible(true);
		dispose();
		
	}//GEN-LAST:event_menChannelSetsActionPerformed

	private void menFavouritesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menFavouritesActionPerformed
				
		setVisible(false);
		new FreeGuideFavouritesList(this).setVisible(true);
		dispose();
		
	}//GEN-LAST:event_menFavouritesActionPerformed

	private void menDownloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menDownloadActionPerformed
		
		downloadListings();
		
	}//GEN-LAST:event_menDownloadActionPerformed

	private void downloadListings() {
		FreeGuideUtils.execAndWait(FreeGuide.prefs.getCommands("tv_grab"), "Downloading", this, theDate);
		// We assume the list of files has changed
		makeDatesList();
	}

	private void menQuitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menQuitActionPerformed

		quit();

	}//GEN-LAST:event_menQuitActionPerformed

	private void butPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butPrintActionPerformed

		writeOutAsHTML();

	}//GEN-LAST:event_butPrintActionPerformed

	private void butNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butNextActionPerformed

		Calendar tmpDate = GregorianCalendar.getInstance();
		tmpDate.setTimeInMillis( theDate.getTimeInMillis() );

		tmpDate.add( Calendar.DAY_OF_YEAR, 1 );

		String datestr = comboBoxDateFormat.format(tmpDate.getTime());

		comTheDate.setSelectedItem(datestr);

	}//GEN-LAST:event_butNextActionPerformed

	private void butPrevActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butPrevActionPerformed

		Calendar tmpDate = GregorianCalendar.getInstance();
		tmpDate.setTimeInMillis( theDate.getTimeInMillis() );

		tmpDate.add( Calendar.DAY_OF_YEAR, -1 );

		String datestr = comboBoxDateFormat.format(tmpDate.getTime());

		comTheDate.setSelectedItem(datestr);

	}//GEN-LAST:event_butPrevActionPerformed

	private void addInnerScrollPaneAdjustmentListeners() {

		//innerScrollPane.getHorizontalScrollBar().addAdjustmentListener(new java.awt.event.AdjustmentListener() {
			//public void adjustmentValueChanged(java.awt.event.AdjustmentEvent evt) {
				//innerScrollPaneHorAdjust(evt);
			//}
		//});

		innerScrollPane.getVerticalScrollBar().addAdjustmentListener(new java.awt.event.AdjustmentListener() {
			public void adjustmentValueChanged(java.awt.event.AdjustmentEvent evt) {
				innerScrollPaneVerAdjust(evt);
			}
		});
	}

	private void removeInnerScrollPaneAdjustmentListeners() {

		java.awt.event.AdjustmentListener[] l = innerScrollPane.getHorizontalScrollBar().getAdjustmentListeners();
		for(int i=0;i<l.length;i++) {
			innerScrollPane.getHorizontalScrollBar().removeAdjustmentListener(l[i]);
		}

		l = innerScrollPane.getVerticalScrollBar().getAdjustmentListeners();
		for(int i=0;i<l.length;i++) {
			innerScrollPane.getVerticalScrollBar().removeAdjustmentListener(l[i]);
		}

	}

	/**
	 * @return 	a Date object that is either the date represented by the given
	 * 			line of the given combobox or today's date if something goes
	 * 			wrong (i.e. the line is null or the parsing fails).
	 */
	private static Date parseComboItem(JComboBox cbox, int i) {
		
		Date d1;
		String s1 = (String)cbox.getItemAt(i);
		
		if ( s1 != null ) {
			try {
				
				d1 = ((SimpleDateFormat)comboBoxDateFormat).parse(s1);
				
			} catch (java.text.ParseException e) {
				
				d1 = new Date();
				
			}
			
		} else {
			
			d1 = new Date();
			
		}
		
		return d1;
		
	}
	/**  use channelsethash, iterate thru keys after "All Channels" **/
	private void drawChannelSets()
	{
		Object selItem = comChannelSet.getSelectedItem();
                int noItems = comChannelSet.getItemCount();
               
                    for( int i = noItems-1; i >= 0; i-- ) 
                    {
			if( !( comChannelSet.getItemAt( i ).equals( selItem ) ) )
                        {
                            comChannelSet.removeItemAt( i );
                        }
                    }
                FreeGuideChannelSet[] csets = FreeGuide.prefs.getChannelSets();
                boolean noneSelected = ( comChannelSet.getSelectedIndex() == -1 );
		
                if ( noneSelected || ( !(((String)selItem).equals( "All Channels" ))))
                {
                    comChannelSet.insertItemAt( "All Channels", 0);
                }
                
                for (int j = 0; j < csets.length; j++)
                {
                    if ( noneSelected || ( !(((String)selItem).equals( csets[j].getChannelSetName()))))
                        comChannelSet.insertItemAt( csets[j].getChannelSetName(), j+1);
                }
                if (noneSelected)
                    comChannelSet.setSelectedItem("All Channels");
     		
	}

	// FIXME -- WCD -- makeDatesList()  Dynamic operation
	// FIXME -- Might actually work if we can get it to wait for the grabber to complete
	// Think it does now ... ?
	private void makeDatesList() {
		
		// First reduce the list to just the selected item without causing a
		// "comTheDateItemStateChanged" event.
		
		Object selItem = comTheDate.getSelectedItem();
		
		int noItems = comTheDate.getItemCount();
		for( int i = noItems-1; i >= 0; i-- ) {
			
			if( !( comTheDate.getItemAt( i ).equals( selItem ) ) ) {
				
				comTheDate.removeItemAt( i );
				
			}
			
		}
		
		// Next fill in the list of dates.
		
		// Get a list of all the needed dates
		dataDateList.updateDates();
		
		Date selectedDate = parseComboItem(
			comTheDate, comTheDate.getSelectedIndex() );
		
		boolean noneSelected = ( comTheDate.getSelectedIndex() == -1 );
		
		Date newDate;
		String s1;
		
		// Step through each date in the newly-created list
		for( int i=0; i < dataDateList.size(); i++ ) {

			newDate = (Date)dataDateList.get(i);
			
			// Add this new date if it's not already there
			if ( noneSelected || ( !(selectedDate.equals( newDate )) ) ) {
				
				comTheDate.insertItemAt( comboBoxDateFormat.format( 
					newDate ), i );
				
			}
		}
		
		
		//comTheDate.setSelectedItem(
		//	comboBoxDateFormat.format( theDate.getTime() ) );

	}
	
	/**
	 * Add listeners to the two scrollbars in the GUI and put the relevant
	 * dates in the date list
	 */
    private void initMyComponents() {
		
		//  Do the listeners
		addInnerScrollPaneAdjustmentListeners();
		
    }//initMyComponents
    
	private void goToNow() {
		goToNow(false);
	}

	private void goToNow(boolean update) {
		
		makeDatesList();

		int oldDay = theDate.get(Calendar.DAY_OF_YEAR);
		int oldYear = theDate.get(Calendar.YEAR);

		//Calendar now = GregorianCalendar.getInstance();
		//theDate.setTime( now.getTime() );
		
		theDate = GregorianCalendar.getInstance();
		
		//loader.updateDaySpan( theDate );
		
		// TODO -- WCD -- handle case where grabber day start is not 00:00
		
		FreeGuideTime nowTime = new FreeGuideTime( theDate );
		FreeGuideTime day_start_time = FreeGuide.prefs.misc.getFreeGuideTime(
			"day_start_time" );
		
		if ( nowTime.before( day_start_time, new FreeGuideTime( 0, 0 ) ) ) {
			
			theDate.add( Calendar.DAY_OF_YEAR, -1 );
			
		}
		
		
		comTheDate.setSelectedItem(
			comboBoxDateFormat.format( theDate.getTime() ) );

		// update now pointer
		//loader.updateDaySpan( theDate );
		//timePanel.setTimes( loader.earliest, loader.latest );

		// I suspect, panel is not updated before scroll position is set
		// This seems to fix things in the case of a day change
		if ( !( oldDay == theDate.get(Calendar.DAY_OF_YEAR) &&
				oldYear == theDate.get(Calendar.YEAR) ) 
			|| update ) {
			
			updatePanel();
			
		}

		innerScrollPane.getHorizontalScrollBar().
			setValue( timePanel.getNowScroll() - 100 );
		
	}

	/**
	 * The event procedure for the horizontal scrollpane listener - just
	 * calls the scrollTime method.
	 */
    //private void innerScrollPaneHorAdjust(java.awt.event.AdjustmentEvent evt) {
		//scrollTime();
    //}//innerScrollPaneHorAdjust
    
	/**
	 * The event procedure for the vertical scrollpane listener - just
	 * calls the scrollChannelNames method.
	 */
    private void innerScrollPaneVerAdjust(java.awt.event.AdjustmentEvent evt) {
		scrollChannelNames();
    }//innerScrollPaneVerAdjust
    
	/**
	 * The event listener for the form closing event - calls the quit method
	 */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        quit();
    }//GEN-LAST:event_exitForm

	/**
	 * Quits the program.
	 */
	private void quit() {
		
		// Save the window size and position etc.
		// --------------------------------------
		FreeGuide.prefs.screen.putInt("viewer_left", getX());
		FreeGuide.prefs.screen.putInt("viewer_top", getY());
		FreeGuide.prefs.screen.putInt("viewer_width", getWidth());
		FreeGuide.prefs.screen.putInt("viewer_height", getHeight());
		FreeGuide.prefs.screen.putInt("viewer_splitpane_vertical", jSplitPane1.getDividerLocation());
		FreeGuide.prefs.screen.putInt("viewer_splitpane_horizontal", splitPane.getDividerLocation());
		
		// Delete old .xmltv files
		// ---------------------
		
		String fs = System.getProperty("file.separator");
		
		// Get the date last week
		Calendar lastWeek = GregorianCalendar.getInstance();
		lastWeek.add(Calendar.WEEK_OF_YEAR, -1);
		Calendar cal = GregorianCalendar.getInstance();
		
		File wd = new File( FreeGuide.prefs.performSubstitutions(
			FreeGuide.prefs.misc.get("working_directory") ) );
		
		if( wd.isDirectory() ) {
			
			String[] files = wd.list();
			for(int i=0;i<files.length;i++) {
				
				// If it's an xmltv file, we may want to delete it
				if(files[i].matches("tv-\\d{8}.xmltv")) {
					
					int len = files[i].length();
					String dateStr = files[i].substring(3, 11);
					
					try {
						
						cal.setTime( fileDateFormat.parse(dateStr) );
						if( cal.before(lastWeek) ) {
							
							new File(wd + fs + files[i]).delete();
							
						}
					} catch(java.text.ParseException e) {
						e.printStackTrace();
					}
				}
			} // for
			
		}// if
		
		// Delete old entries in choices preferences
		Calendar[] choiceDates = FreeGuide.prefs.getAllChosenDays();
		for(int i=0;i<choiceDates.length;i++) {
			if(choiceDates[i].before(lastWeek)) {
				FreeGuide.prefs.chosenSomething(choiceDates[i], false);
			}
		}
		
		// Exit
		// ----
		FreeGuide.log.info("FreeGuide - Ending normally.");
		System.exit(0);
		
	}//quit
	
	/**
	 * Given the programme, returns the jlabel displaying it.
	 *
	 * @param prg the FreeGuideProgramme for a programme
	 * @returns  the programme referred to
	 */
	private JLabel getJLabelFromProg(FreeGuideProgramme prg) {
		int i = loader.programmes.indexOf(prg);
		return (JLabel)textAreas.get(i);
	}//getJLabelFromPrpg
	
	/**
	 * Given the JLabel displaying it, returns the programme.
	 *
	 * @param bx the JLabel for a programme
	 * @returns  the programme referred to
	 */
	private FreeGuideProgramme getProgFromJLabel(JLabel bx) {
		int i = textAreas.indexOf(bx);
		return (FreeGuideProgramme)loader.programmes.get(i);
	}//getProgFromJLabel

	/**
	 * The event procedure for a JLabel when it is clicked.
	 */
	private void jLabelClicked(java.awt.event.MouseEvent evt) {
		
		JLabel txt = (JLabel)evt.getSource();
		FreeGuideProgramme prog = getProgFromJLabel(txt);
		
		// Find out whether this is ticked
		if(tickedProgrammes.contains(prog)) {
			// Remove from ticked list
                        if (prog.getIsMovie())
                            txt.setBackground( FreeGuide.prefs.screen.getColor("programme_movie_colour", FreeGuide.PROGRAMME_NORMAL_COLOUR) );
                        else
                            txt.setBackground( FreeGuide.prefs.screen.getColor("programme_normal_colour", FreeGuide.PROGRAMME_NORMAL_COLOUR) );
			tickedProgrammes.remove(prog);
			
			FreeGuide.prefs.removeChoice(prog);
			
		} else {
			// Add to ticked list
			
			txt.setBackground( FreeGuide.prefs.screen.getColor("programme_chosen_colour", FreeGuide.PROGRAMME_CHOSEN_COLOUR) );
			tickedProgrammes.add(prog);
			
			FreeGuide.prefs.addChoice( prog, theDate );
			
		}
		
		updatePrintedGuide();
		
	}
    
	/**
	 * Scrolls the time panel to the same x-position as the main panel.
	 */
    //private void scrollTime() {
//		timeScrollPane.getHorizontalScrollBar().setValue(innerScrollPane.getHorizontalScrollBar().getValue());
    //}//scrollTime
    
	/**
	 * Scrolls the channel names to the same y-position as the main panel.
	 */
    private void scrollChannelNames() {
		channelNameScrollPane.getVerticalScrollBar().setValue(innerScrollPane.getVerticalScrollBar().getValue());	
    }//scrollChannelNames
    
	/**
	 * Does the main work of displaying the stored programmes on screen.
	 */
	private void drawProgrammes() {
		
		String lineBreak = System.getProperty("line.separator");
		
		// Read in viewing options
		int channelHeight = FreeGuide.prefs.screen.getInt("channel_height", FreeGuide.CHANNEL_HEIGHT);
		int halfVerGap = FreeGuide.prefs.screen.getInt("vertical_gap", FreeGuide.VERTICAL_GAP);
		int halfHorGap = FreeGuide.prefs.screen.getInt("horizontal_gap", FreeGuide.HORIZONTAL_GAP);
		int panelWidth = FreeGuide.prefs.screen.getInt("panel_width",FreeGuide.PANEL_WIDTH);
		
		String fontName = FreeGuide.prefs.screen.get("font_name", "Dialog");
		int fontStyle = FreeGuide.prefs.screen.getInt("font_style", Font.PLAIN );
		int fontSize = FreeGuide.prefs.screen.getInt("font_size", 12 );
                
                boolean drawtime = FreeGuide.prefs.screen.getBoolean("display_programme_time", true);
                boolean draw24time = FreeGuide.prefs.screen.getBoolean("display_24hour_time", true);
		SimpleDateFormat usetimeformat = (draw24time ? time24Format : timeFormat);
		Font channelFont = new Font( fontName, Font.BOLD, fontSize );
		Font font = new Font( fontName, fontStyle, fontSize );
		
		int channelPanelWidth = FreeGuide.prefs.screen.getInt("channel_panel_width", FreeGuide.CHANNEL_PANEL_WIDTH);

		// Delete all the old textareas
		innerPanel.removeAll();
		
		int tmpH = currentchset.getNoChannels()*channelHeight;
		innerPanel.setPreferredSize(new java.awt.Dimension(panelWidth, tmpH));
		innerPanel.setMinimumSize(new java.awt.Dimension(panelWidth, tmpH));
		innerPanel.setMaximumSize(new java.awt.Dimension(panelWidth, tmpH));
		
		tmpH = timePanel.getPreferredSize().height;
		timePanel.setPreferredSize(new java.awt.Dimension(panelWidth, tmpH));
		timePanel.setMinimumSize(new java.awt.Dimension(panelWidth, tmpH));
		timePanel.setMaximumSize(new java.awt.Dimension(panelWidth, tmpH));
		
		Color channelColour = FreeGuide.prefs.screen.getColor("channel_colour", FreeGuide.CHANNEL_COLOUR);

		channelNamePanel.removeAll();
		
		textAreas = new Vector();	// Vector to store all the textareas
		tickedProgrammes = new Vector();	// And whether they'return ticked
	
		// Temporal width in millisecs
		long temporalWidth = loader.latest.getTimeInMillis() - 
			loader.earliest.getTimeInMillis();
	
		// Find the multiplier to help us position programmes
		double widthMultiplier = (double)panelWidth/(double)temporalWidth;
	
		channelNamePanel.setPreferredSize(
			new Dimension( 
				channelPanelWidth,
				currentchset.getNoChannels() * channelHeight + 50 ) );
	
		for( int c=0; c < currentchset.getNoChannels(); c++) {
			
			//if( loader.channelLoaded.get(c).equals( Boolean.TRUE ) ) {
			
			JLabel ctxt = new JLabel( currentchset.getChannelName( c ) );
				
			ctxt.setBounds(0, (halfVerGap*2)+(c*channelHeight)-1, channelNamePanel.getPreferredSize().width-1, channelHeight-(halfVerGap*4));
	    
		    ctxt.setBackground(channelColour);
			ctxt.setFont( font );
			ctxt.setBorder(new javax.swing.border.LineBorder(java.awt.Color.black));
			ctxt.setHorizontalAlignment(JLabel.LEFT);
			ctxt.setOpaque(true);
		
			channelNamePanel.add(ctxt);
				
			//}
			
		}
		
		for( int p=0; p < loader.programmes.size(); p++ ) {
	    
			FreeGuideProgramme prog =
				(FreeGuideProgramme)loader.programmes.get(p);
			
			Calendar st = prog.getStart();
			Calendar ed = prog.getEnd();
		
			String progDesc = prog.getLongDesc();
			String progTitle = prog.getTitle();
			
			// Find the channel number
			String channelID = prog.getChannelID();
			int ch = currentchset.getChannelNo( channelID );
			
			if(ch == -1) {
                            //DMT: not severe when doing channel sets
				FreeGuide.log.severe("Channel ID " + channelID + "not found when drawing channels.");
                               
                        }
                        
                        
			StringBuffer txtstr = new StringBuffer();
                        if (drawtime)
                        {
                            txtstr.append(usetimeformat.format(st.getTime())).append(" ");
                        }
			
                        txtstr.append(progTitle);
                        if (prog.getIsMovie())
                            txtstr.append(" ").append(prog.getStarString());
                        if (prog.getPreviouslyShown()) 
                            txtstr.append(" (R)");
			
                        JLabel txt = new JLabel(txtstr.toString());
			
			textAreas.add(txt);
                        if (ch == -1)
                        {
                            //DMT don't add it to the panel, but we need
                            // the item in textAreas for other parts of system
                            // to work
                            continue;
                        }

			if( progDesc == null ) {
				txt.setToolTipText(usetimeformat.format(st.getTime())+ " " +progTitle);
			} else {
                                String tt = usetimeformat.format(st.getTime())+ " " +progTitle + " - " + prog.getShortDesc();
                                if (prog.getIsMovie()) tt += " " + prog.getStarString();
                                if (prog.getPreviouslyShown()) tt += " (R)";
				txt.setToolTipText(tt);
			}
		
			int left = halfHorGap + (int)( (st.getTimeInMillis() - 
				loader.earliest.getTimeInMillis() ) * widthMultiplier );
			
			int right = ( (int)( ( ed.getTimeInMillis() -
				loader.earliest.getTimeInMillis() ) * widthMultiplier) ) -
				( halfHorGap * 2 );
			
			int top = halfVerGap+( ch * channelHeight );
			int bottom = ( (ch+1) * channelHeight ) - ( halfVerGap * 2 );

			//txt.setLineWrap(true);
			
			txt.setFont( font );
			txt.setBorder(new javax.swing.border.LineBorder(Color.black));
			txt.setOpaque(true);
			
			txt.setBounds(left, top, right-left, bottom-top);

			
			
			txt.addMouseListener(new java.awt.event.MouseListener() {
				public void mouseClicked(java.awt.event.MouseEvent evt) {
					jLabelClicked(evt);
				}
				public void mousePressed(java.awt.event.MouseEvent evt) {
					maybeShowPopup(evt);
				}
				public void mouseReleased(java.awt.event.MouseEvent evt) {
					maybeShowPopup(evt);
				}
				public void mouseEntered(java.awt.event.MouseEvent evt) {}
				public void mouseExited(java.awt.event.MouseEvent evt) {}
				private void maybeShowPopup(java.awt.event.MouseEvent evt) {
					if (evt.isPopupTrigger()) {
						rightClickedProg = getProgFromJLabel((JLabel)evt.getSource());
						popProg.show(evt.getComponent(), evt.getX(), evt.getY());
					}
				}
			});

			innerPanel.add(txt);
			
		}//for
		
		tickFavsOrChoices();
				
		timePanel.setTimes( loader.earliest, loader.latest );

		timePanel.revalidate();
		timePanel.repaint();

		innerPanel.revalidate();
		innerPanel.repaint();
		
		channelNamePanel.revalidate();
		channelNamePanel.repaint();
		
	}//drawChannels
	
	/**
	 * Shade those boxes that are favourite programmes or have been chosen.
	 */
	private void tickFavsOrChoices() {
		
		// Get whether the user's choice for today or null for none
		Vector choices = FreeGuide.prefs.getChosenProgs( theDate );
		
		// Get the colours we need
		Color tickedColour = FreeGuide.prefs.screen.getColor(
			"programme_chosen_colour", FreeGuide.PROGRAMME_CHOSEN_COLOUR );
		Color nonTickedColour = FreeGuide.prefs.screen.getColor(
			"programme_normal_colour", FreeGuide.PROGRAMME_NORMAL_COLOUR );
                Color movieColour = FreeGuide.prefs.screen.getColor(
                        "programme_movie_colour", FreeGuide.PROGRAMME_MOVIE_COLOUR);
		
		for(int p=0; p < loader.programmes.size(); p++) {
	    
			// Get the programme and textarea we'return talking about
			FreeGuideProgramme prog = 
				(FreeGuideProgramme)loader.programmes.get(p);
			
			JLabel txt = (JLabel)textAreas.get(p);
                        
                        
			
			// Have we already got choices for today?
			if(choices != null) {
				// Yes, use those choices
						
				for(int i=0;i<choices.size();i++) {
					
					if(choices.get(i).equals(prog)) {
						txt.setBackground(tickedColour);
						tickedProgrammes.add(prog);
						break;
					} else {
                                            if (prog.getIsMovie())
                                                txt.setBackground(movieColour);
                                            else
						txt.setBackground(nonTickedColour);
					}
					
				}
				
			} else {
				// No, use the favourites
			
				// Check if this is a favourite and tick it if so
				FreeGuideFavourite[] favourites =
					FreeGuide.prefs.getFavourites();
				
				if(favourites!=null) {
					
					boolean unticked = true;
					for(int i=0;i<favourites.length;i++) {
						
						if( favourites[i].matches(prog) ) {
							
							// Remember this as a choice for next time
							FreeGuide.prefs.addChoice( prog, theDate );
				
							txt.setBackground(tickedColour);
							tickedProgrammes.add(prog);
							unticked = false;
							break;
							
						}
						
					}//for		
					if(unticked){
                                             if (prog.getIsMovie())
                                                txt.setBackground(movieColour);
                                             else
						txt.setBackground(nonTickedColour);
					}
				}//if
			}//if
			
		}//for
		
	}
        
        private void updateChannelSet()
        {
            
            if (!doingProgs)
            {
                String chset = (String)comChannelSet.getSelectedItem();
                if (chset == null) return;
                if (chset.equalsIgnoreCase("All Channels"))
                {
                    this.currentchset = (FreeGuideChannelSet)loader;
                }
                else
                {
                    //get the channel sets
                    FreeGuideChannelSet[] csets = FreeGuide.prefs.getChannelSets();
                    for (int j = 0; j < csets.length; j++)
                    {
                        if (csets[j].getChannelSetName().equals(chset))
                        {
                            this.currentchset = csets[j];
                            //update the names
                            ((FreeGuideChannelSetImpl)currentchset).updateChannelNames(loader);
                            break;
                        }
                    }
                }
                updatePanel();
            }
        }
	
	private void updateIfDateChanged() {
		
		if(!doingProgs && 
				!comboBoxDateFormat.format( theDate.getTime() ).equals(
					(String)comTheDate.getSelectedItem() ) ) {
		
			try {
			
				theDate.setTime( comboBoxDateFormat.parse(
					(String)comTheDate.getSelectedItem() ) );
				
				Calendar nowDate = GregorianCalendar.getInstance();
				
				FreeGuideTime nowTime = new FreeGuideTime( nowDate );
				
				nowTime.adjustCalendar( theDate );
			
			} catch(java.text.ParseException e) {
			
				e.printStackTrace();
			
			}//try

			updatePanel();
		
		}//if
		
	}
    
	// ------------------------------------------------------------------------
	// HMTL Guide stuff
	
    private void updatePrintedGuide() {

		printedGuideArea.setText(constructHTMLGuide(true));
	
    }
    
	/*
	 * Saves out the listings as an HTML file to be printed.
	 */
	private void writeOutAsHTML() {

		String fs = System.getProperty("file.separator");
		
		// Make a file in the default location
		File f = new File(FreeGuide.prefs.performSubstitutions(FreeGuide.prefs.misc.get("working_directory")+fs+"guide.html"));
		
		try {//IOException
			
			BufferedWriter buffy = new BufferedWriter(new FileWriter(f));

			buffy.write( constructHTMLGuide(false) );

			buffy.close();
			
			String[] cmds = FreeGuideUtils.substitute(FreeGuide.prefs.commandline.getStrings("browser_command"), "%filename%", f.getPath());
			FreeGuideUtils.execNoWait(cmds);

		
		} catch(java.io.IOException e) {
			e.printStackTrace();
		}//try
		
	}//writeOutAsHTML
	
	/**
	 * Makes a TV Guide in HTML format and returns it as a string.
	 *
	 * @return the TV guide as a string of html
	 */
	private String constructHTMLGuide(boolean onScreen) {
		boolean draw24time = FreeGuide.prefs.screen.getBoolean("display_24hour_time", true);
		SimpleDateFormat usetimeformat = (draw24time ? time24Format : timeFormat);

		// The string we shall return
		String ans = "";
		
		// Set up some constants
		String lineBreak = System.getProperty("line.separator");

		ans+="<html>"+lineBreak;
		ans+="<head>"+lineBreak;
		ans+="  <title>TV Guide for "+htmlDateFormat.format(theDate.getTime())+"</title>"+lineBreak;
		ans+="  <style type='text/css'>"+lineBreak;
		ans+="	h1 {"+lineBreak;
		ans+="		font-family: helvetica, helv, arial;"+lineBreak;
		ans+="		font-weight: bold;"+lineBreak;
		ans+="		font-size: x-large;"+lineBreak;
		ans+="	}"+lineBreak;
		ans+="	h2 {"+lineBreak;
		ans+="		font-family: helvetica, helv, arial;"+lineBreak;
		ans+="		font-weight: bold;"+lineBreak;
		ans+="		font-size: large;"+lineBreak;
		ans+="	}"+lineBreak;
		ans+="	h3 {"+lineBreak;
		ans+="		font-family: helvetica, helv, arial;"+lineBreak;
		ans+="		font-weight: bold;"+lineBreak;
		ans+="		font-size: medium;"+lineBreak;
		ans+="	}"+lineBreak;
		ans+="	h4 {"+lineBreak;
		ans+="		font-family: helvetica, helv, arial;"+lineBreak;
		ans+="		font-weight: bold;"+lineBreak;
		ans+="		font-size: small;"+lineBreak;
		ans+="	}"+lineBreak;
		ans+="	body {"+lineBreak;
		ans+="		font-family: helvetica, helv, arial;"+lineBreak;
		ans+="		font-size: small;"+lineBreak;
		ans+="	}"+lineBreak;
		ans+="	address {"+lineBreak;
		ans+="		font-family: helvetica, helv, arial;"+lineBreak;
		ans+="		font-size: xx-small;"+lineBreak;
		ans+="	}"+lineBreak;
		ans+="  </style>"+lineBreak;
		ans+="</head>"+lineBreak;
		ans+="<body>"+lineBreak;
		ans+="  <h1>";
		
		if(onScreen) {
			ans+="<font face='helvetica, helv, arial, sans serif' size=4>";
			ans+="Your Personalised TV Guide for "+htmlDateFormat.format(
				theDate.getTime() );
			ans+="</font>";
		} else {
			ans+="TV Guide for "+htmlDateFormat.format( theDate.getTime() );
		}
		
		ans+="</h1>"+lineBreak;

		if(onScreen) {
			ans += "<font face='helvetica, helv, arial, sans serif' size=3>";
			ans += "<p>Select programmes above by clicking on them, and they";
			ans += " will be highlighted and appear below.</p>";
			ans += "</font>";
		}
		
		// Sort the programmes
		Collections.sort( tickedProgrammes,
			new FreeGuideProgrammeStartTimeComparator() );

		// Add them to the HTML list
		// ----------------------------

		if(onScreen) {
			ans += "<font face='helvetica, helv, arial, sans serif' size=3>";
		}
		
		for(int i=0;i<tickedProgrammes.size();i++) {

			FreeGuideProgramme prog =
				(FreeGuideProgramme)tickedProgrammes.get(i);
    
			if(prog.getLongDesc() == null) {
				
				ans += "  <p><b>" + usetimeformat.format(
					prog.getStart().getTime() ) + " - " +
					prog.getTitle() + "</b><br>" + 
					prog.getChannelName() + ", ends " + 
					usetimeformat.format( prog.getEnd().getTime() ) + "</p>" + 
					lineBreak;
					
			} else {
				
				ans += "  <p><b>" + usetimeformat.format( 
				prog.getStart().getTime() ) + " - " +
				prog.getTitle() + "</b><br>" + 
				prog.getChannelName() + ", ends " + 
				usetimeformat.format( prog.getEnd().getTime() ) + "<br>" + 
				prog.getLongDesc();
                if (prog.getPreviouslyShown()) {
					ans += "(Repeat)" + "<br>";
				}
                if (prog.getIsMovie() && prog.getStarRating() != null ) {
					ans += " Rating: " + prog.getStarRating() + "<br>";
				}
                ans += "</p>" + lineBreak;
				
			}
    
		}//for

		if(onScreen) {ans+="</font>";}
		
		if(!onScreen) {
		
			ans+="<hr />"+lineBreak;
			ans+="<address>";
			ans+="http://freeguide-tv.sourceforge.net";
			ans+="</address>"+lineBreak;
			
		}
			
		ans+="</body>"+lineBreak;
		ans+="</html>"+lineBreak;

		return ans;
		
	}
	
	//------------------------------------------------------------------------
	// XML stuff
	

    
	/**
	 * Unhides this window after being hidden while launching another
	 * screen.
	 */
	public void reShow() {

		updateChannelSet();
		updatePanel();

	}//reShow
	
	//------------------------------------------------------------------------
	// Helper functions
	
	/**
	 * Gets the channels required from the config file and puts them
	 * in the channelNames array
	 */
    /*private void getSelectedChannels() {
		
		// Get the channel IDs from config file or prefs
		channelIDs = new Vector();
		channelIDs.addAll(Arrays.asList(FreeGuide.prefs.getChannelIDs()));
		
		channelLoaded = new Vector(channelIDs.size());
		
		// Set default channel names, same as IDs
		channelNames = new Vector(channelIDs.size());
		for(int i=0;i<channelIDs.size();i++) {
			//System.out.println(channelIDs.get(i).toString());
			channelNames.add(channelIDs.get(i));
			channelLoaded.add(new Boolean("false"));
		}
		
    }*/
	
	public Vector getChannelIDs() {
		return loader.getChannelIDs();
	}
	
	public Vector getChannelNames() {
		return loader.getChannelNames();
	}
	
	public FreeGuideLauncher getLauncher() {
		return launcher;
	}

	//public Calendar getTheDate() {
	//	return theDate;
	//}
	
//parseError


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox comTheDate;
    private javax.swing.JComboBox comChannelSet;
    private javax.swing.JMenuItem menCustomiser;
    private javax.swing.JMenuItem menDownload;
    private javax.swing.JEditorPane printedGuideArea;
    private javax.swing.JMenuItem menUserGuide;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSeparator jSeparator4;
    private FreeGuideTimePanel timePanel;
    private javax.swing.JMenuItem menPrint;
    private javax.swing.JPanel channelNamePanel;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JMenuItem menAddFav;
    private javax.swing.JPanel topPanel;
    private javax.swing.JButton butPrint;
    private javax.swing.JButton butDownload;
    private javax.swing.JMenuItem menOptions;
    private javax.swing.JScrollPane channelNameScrollPane;
    private javax.swing.JSplitPane splitPane;
    private javax.swing.JMenuItem menFavourites;
    private javax.swing.JMenuItem menChannelSets;
    private javax.swing.JButton butRevertFavs;
    private javax.swing.JMenu optionsMenu;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JMenuItem menAbout;
    private javax.swing.JButton butNext;
    private javax.swing.JButton butPrev;
    private javax.swing.JButton butGoToNow;
    private FreeGuideInnerPanel innerPanel;
    private javax.swing.JScrollPane innerScrollPane;
    private javax.swing.JPopupMenu popProg;
    //private javax.swing.JPanel outerPanel;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JMenuItem menConfigure;
    private javax.swing.JScrollPane printedGuideScrollPane;
    private javax.swing.JMenuItem menQuit;
    //private javax.swing.JScrollPane timeScrollPane;
    private javax.swing.JMenu helpMenu;
    // End of variables declaration//GEN-END:variables
    
	
	private XMLTVLoader loader;
        private FreeGuideChannelSet currentchset;
        private HashMap channelsethash;

	private boolean doingProgs;	// Are we loading the programmes?
    
    public Calendar theDate;   // The date for which we are listing programmes
    
    private Vector textAreas;	// Stores references to all the textareas shown

	private Vector tickedProgrammes;	// Which programmes are chosen?
	
	private FreeGuideLauncher launcher;	// The screen that launched this one
	
	private static final SimpleDateFormat comboBoxDateFormat
		= new SimpleDateFormat("EEEE d MMM yy");
	private static final SimpleDateFormat htmlDateFormat
		= new SimpleDateFormat("EEEE dd MMMM yyyy");
	private static final SimpleDateFormat timeFormat
		= new SimpleDateFormat("hh:mm aa");
	private static final SimpleDateFormat time24Format
		= new SimpleDateFormat("HH:mm");
	public static final SimpleDateFormat fileDateFormat
		= new SimpleDateFormat("yyyyMMdd");
	
	private boolean dontDownload;	// true if user doesn't want to download missing files
	
	private FreeGuideProgramme rightClickedProg;
		// The programme the user last right clicked on
		
	private DataDateList dataDateList;

}

