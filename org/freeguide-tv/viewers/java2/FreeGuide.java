/*
 * FreeGuide J2
 *
 * Copyright (c) 2001 by Andy Balaam
 *
 * Released under the GNU General Public License
 * with ABSOLUTELY NO WARRANTY.
 *
 * See the file COPYING for more information.
 */

import java.awt.*;
import java.io.*;
import java.text.*;
import java.util.*;
import javax.swing.*;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.parsers.SAXParserFactory;
import javax.xml.parsers.SAXParser;
import org.xml.sax.*;
import org.xml.sax.helpers.DefaultHandler;

public class FreeGuide extends javax.swing.JFrame {

    public FreeGuide() {
        initComponents();
	initMyComponents();
	theDate = new Date();
        updatePanel();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        menQuit = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        menChannels = new javax.swing.JMenuItem();
        menFavourites = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JSeparator();
        menParser = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        menUserGuide = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JSeparator();
        menAbout = new javax.swing.JMenuItem();
        topPanel = new javax.swing.JPanel();
        butGetListings = new javax.swing.JButton();
        butPrev = new javax.swing.JButton();
        comTheDate = new javax.swing.JComboBox();
        butNext = new javax.swing.JButton();
        splitPane = new javax.swing.JSplitPane();
        outerPanel = new javax.swing.JPanel();
        innerScrollPane = new javax.swing.JScrollPane();
        innerPanel = new javax.swing.JPanel();
        channelNameScrollPane = new javax.swing.JScrollPane();
        channelNamePanel = new javax.swing.JPanel();
        timeScrollPane = new javax.swing.JScrollPane();
        timePanel = new javax.swing.JPanel();
        printedGuideScrollPane = new javax.swing.JScrollPane();
        printedGuideArea = new javax.swing.JTextArea();
        labStatus = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();
        
        fileMenu.setText("File");
        menQuit.setText("Quit");
        fileMenu.add(menQuit);
        menuBar.add(fileMenu);
        editMenu.setText("Edit");
        menChannels.setText("Channels...");
        editMenu.add(menChannels);
        menFavourites.setText("Favourites...");
        editMenu.add(menFavourites);
        editMenu.add(jSeparator1);
        menParser.setText("Parser Options...");
        editMenu.add(menParser);
        menuBar.add(editMenu);
        helpMenu.setText("Help");
        menUserGuide.setText("User Guide...");
        helpMenu.add(menUserGuide);
        helpMenu.add(jSeparator2);
        menAbout.setText("About...");
        helpMenu.add(menAbout);
        menuBar.add(helpMenu);
        
        getContentPane().setLayout(new java.awt.GridBagLayout());
        java.awt.GridBagConstraints gridBagConstraints1;
        
        setTitle("FreeGuide J2 0.1");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });
        
        butGetListings.setText("Get Listings...");
        topPanel.add(butGetListings);
        
        butPrev.setText("Previous Day");
        topPanel.add(butPrev);
        
        comTheDate.setEditable(true);
        topPanel.add(comTheDate);
        
        butNext.setText("Next Day");
        topPanel.add(butNext);
        
        gridBagConstraints1 = new java.awt.GridBagConstraints();
        gridBagConstraints1.gridx = 0;
        gridBagConstraints1.gridy = 0;
        gridBagConstraints1.gridwidth = 2;
        gridBagConstraints1.insets = new java.awt.Insets(0, 0, 0, 2);
        gridBagConstraints1.anchor = java.awt.GridBagConstraints.EAST;
        getContentPane().add(topPanel, gridBagConstraints1);
        
        splitPane.setDividerLocation(250);
        splitPane.setDividerSize(5);
        splitPane.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        outerPanel.setLayout(new java.awt.GridBagLayout());
        java.awt.GridBagConstraints gridBagConstraints2;
        
        outerPanel.setBackground(new java.awt.Color(245, 245, 255));
        innerScrollPane.setBorder(null);
        innerPanel.setLayout(null);
        
        innerPanel.setBackground(new java.awt.Color(245, 245, 255));
        innerPanel.setPreferredSize(new java.awt.Dimension(0, 0));
        innerPanel.setMinimumSize(new java.awt.Dimension(0, 0));
        innerPanel.setMaximumSize(new java.awt.Dimension(0, 0));
        innerScrollPane.setViewportView(innerPanel);
        
        gridBagConstraints2 = new java.awt.GridBagConstraints();
        gridBagConstraints2.gridx = 2;
        gridBagConstraints2.gridy = 2;
        gridBagConstraints2.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints2.weightx = 0.9;
        gridBagConstraints2.weighty = 0.9;
        outerPanel.add(innerScrollPane, gridBagConstraints2);
        
        channelNameScrollPane.setBorder(null);
        channelNameScrollPane.setVerticalScrollBarPolicy(javax.swing.JScrollPane.VERTICAL_SCROLLBAR_NEVER);
        channelNameScrollPane.setHorizontalScrollBarPolicy(javax.swing.JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
        channelNameScrollPane.setPreferredSize(new java.awt.Dimension(100, 100));
        channelNameScrollPane.setMinimumSize(new java.awt.Dimension(100, 100));
        channelNameScrollPane.setMaximumSize(new java.awt.Dimension(100, 100));
        channelNamePanel.setLayout(null);
        
        channelNamePanel.setBackground(new java.awt.Color(245, 245, 255));
        channelNamePanel.setPreferredSize(new java.awt.Dimension(100, 100));
        channelNamePanel.setMinimumSize(new java.awt.Dimension(100, 100));
        channelNamePanel.setMaximumSize(new java.awt.Dimension(100, 100));
        channelNameScrollPane.setViewportView(channelNamePanel);
        
        gridBagConstraints2 = new java.awt.GridBagConstraints();
        gridBagConstraints2.gridx = 0;
        gridBagConstraints2.gridy = 2;
        gridBagConstraints2.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints2.weighty = 0.9;
        outerPanel.add(channelNameScrollPane, gridBagConstraints2);
        
        timeScrollPane.setBorder(null);
        timeScrollPane.setVerticalScrollBarPolicy(javax.swing.JScrollPane.VERTICAL_SCROLLBAR_NEVER);
        timeScrollPane.setHorizontalScrollBarPolicy(javax.swing.JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
        timeScrollPane.setPreferredSize(new java.awt.Dimension(24, 24));
        timeScrollPane.setMinimumSize(new java.awt.Dimension(24, 24));
        timeScrollPane.setMaximumSize(new java.awt.Dimension(24, 24));
        timePanel.setLayout(null);
        
        timePanel.setBackground(new java.awt.Color(245, 245, 255));
        timePanel.setPreferredSize(new java.awt.Dimension(24, 24));
        timePanel.setMinimumSize(new java.awt.Dimension(24, 24));
        timePanel.setMaximumSize(new java.awt.Dimension(24, 24));
        timeScrollPane.setViewportView(timePanel);
        
        gridBagConstraints2 = new java.awt.GridBagConstraints();
        gridBagConstraints2.gridx = 2;
        gridBagConstraints2.gridy = 0;
        gridBagConstraints2.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints2.weightx = 0.9;
        outerPanel.add(timeScrollPane, gridBagConstraints2);
        
        splitPane.setLeftComponent(outerPanel);
        
        printedGuideArea.setLineWrap(true);
        printedGuideArea.setEditable(false);
        printedGuideArea.setBackground(new java.awt.Color(230, 230, 230));
        printedGuideArea.setBorder(new javax.swing.border.LineBorder(java.awt.Color.black));
        printedGuideScrollPane.setViewportView(printedGuideArea);
        
        splitPane.setRightComponent(printedGuideScrollPane);
        
        gridBagConstraints1 = new java.awt.GridBagConstraints();
        gridBagConstraints1.gridx = 0;
        gridBagConstraints1.gridy = 2;
        gridBagConstraints1.gridwidth = 2;
        gridBagConstraints1.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints1.insets = new java.awt.Insets(2, 2, 2, 2);
        gridBagConstraints1.weightx = 0.9;
        gridBagConstraints1.weighty = 0.9;
        getContentPane().add(splitPane, gridBagConstraints1);
        
        labStatus.setText("Welcome.");
        labStatus.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        labStatus.setFont(new java.awt.Font("Dialog", 0, 12));
        labStatus.setPreferredSize(new java.awt.Dimension(50, 20));
        labStatus.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.LOWERED));
        gridBagConstraints1 = new java.awt.GridBagConstraints();
        gridBagConstraints1.gridx = 0;
        gridBagConstraints1.gridy = 4;
        gridBagConstraints1.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints1.insets = new java.awt.Insets(0, 2, 2, 2);
        gridBagConstraints1.weightx = 0.9;
        getContentPane().add(labStatus, gridBagConstraints1);
        
        progressBar.setFont(new java.awt.Font("Dialog", 0, 12));
        progressBar.setPreferredSize(new java.awt.Dimension(100, 20));
        progressBar.setBorder(new javax.swing.border.LineBorder(java.awt.Color.black));
        progressBar.setMinimumSize(new java.awt.Dimension(100, 20));
        progressBar.setMaximumSize(new java.awt.Dimension(100, 20));
        gridBagConstraints1 = new java.awt.GridBagConstraints();
        gridBagConstraints1.gridx = 1;
        gridBagConstraints1.gridy = 4;
        gridBagConstraints1.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints1.insets = new java.awt.Insets(0, 0, 2, 2);
        gridBagConstraints1.weightx = 0.1;
        getContentPane().add(progressBar, gridBagConstraints1);
        
        pack();
        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setSize(new java.awt.Dimension(600, 400));
        setLocation((screenSize.width-600)/2,(screenSize.height-400)/2);
    }//GEN-END:initComponents

    private void initMyComponents() {
	
	innerScrollPane.getHorizontalScrollBar().addAdjustmentListener(new java.awt.event.AdjustmentListener() {
	    public void adjustmentValueChanged(java.awt.event.AdjustmentEvent evt) {
		innerScrollPaneHorAdjust(evt);
	    }
	});
	
	innerScrollPane.getVerticalScrollBar().addAdjustmentListener(new java.awt.event.AdjustmentListener() {
	    public void adjustmentValueChanged(java.awt.event.AdjustmentEvent evt) {
		innerScrollPaneVerAdjust(evt);
	    }
	});
	
    }
    
    private void innerScrollPaneHorAdjust(java.awt.event.AdjustmentEvent evt) {
	scrollTime();
    }
    
    private void innerScrollPaneVerAdjust(java.awt.event.AdjustmentEvent evt) {
	scrollChannelNames();
    }
    
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        System.exit(0);
    }//GEN-LAST:event_exitForm

    private void getChannelNames() {
	// Will be replaced with reading a config file.
	channelNames = new String[7];
        channelNames[0]="BBC1";
	channelNames[1]="BBC2";
        //channelNames[2]="Carlton_&#38;_LWT";
        channelNames[2]="Channel_4";
	channelNames[3]="Sky_One";
	channelNames[4]="FilmFour";
	channelNames[5]="ITV2";
        channelNames[6]="BBC_Choice";
    }
    
    private void execExternal(String cmdstr) {
	
	try {
	
	    lg("Executing system command: "+cmdstr+" ...");
	    Process pr = Runtime.getRuntime().exec(cmdstr);
	    pr.waitFor();
	    lg("Finished execution.");
	    
	} catch(IOException e) {
	    e.printStackTrace();
	} catch(InterruptedException e) {
	    e.printStackTrace();
	}
	
	
    }
    
    private void getChannelData() {
	channels[curChan] = new FreeGuideChannelDay(channelNames[curChan]);
	
	freeGuideHomeDir = "/home/andy/FreeGuide/";
	
	String parserCommand = "perl /home/andy/FreeGuide/parsers/uktvguide/uktvguide.pl";
	String parserChannelFile = "/home/andy/FreeGuide/parsers/uktvguide/channels.txt";
	
	int hMFNL = (int)(MAX_FILENAME_LENGTH/2);
        
	//String datestr = String.valueOf(1900+theDate.getYear())+twoDigits(theDate.getMonth()+1)+twoDigits(theDate.getDate());
	
	SimpleDateFormat fmt = new SimpleDateFormat("yyyyMMdd");
	String datestr = fmt.format(theDate);
	
	// Check for the right file already existing
	    
	String tmp = channelNames[curChan].toLowerCase().replace(' ', '_');
	
	if(tmp.length()>MAX_FILENAME_LENGTH) {
	    tmp = tmp.substring(0, hMFNL-1) + "-" + tmp.substring(tmp.length()-(hMFNL-1), tmp.length());
	}
        
	// Check for the existence of the needed file
	    
	String xmlFilename = freeGuideHomeDir+"data/"+tmp+"-"+datestr+".fgd";
	    
	if(!(new File(xmlFilename).exists())) {	
	// If it doesn't exist
		
	    // Check for a channels file
	    if(!(new File(parserChannelFile).exists())) {

		// Remember the status text and change it
		tmp = labStatus.getText();
		labStatus.setText("Downloading channels list...");
		
		// Make a channels file if it doesn't exist
		execExternal(parserCommand+" --listchannels "+parserChannelFile);
	    
		// Replace the status text
		labStatus.setText(tmp);
		
	    }
	    
	    // Remember the status text and change it
	    tmp = labStatus.getText();
	    labStatus.setText("Downloading channel "+channelNames[curChan]+".");
	    
	    // Make an xml file of the programmes on this channel this day
	    execExternal(parserCommand+" "+channelNames[curChan]+" "+datestr+" "+xmlFilename+" "+parserChannelFile);

	    // Replace the status text
	    labStatus.setText(tmp);
	    
	}
	
	try {
	    
	    DefaultHandler handler = new FreeGuideSAXHandler(this);
	    SAXParserFactory factory = SAXParserFactory.newInstance();
	    SAXParser saxParser = factory.newSAXParser();
		
	    // Will be a different name for each channel and whatever
	    // date we're on obviously
	    saxParser.parse(xmlFilename, handler);
	    
	} catch(ParserConfigurationException e) {
	    e.printStackTrace();
	} catch(SAXException e) {
	    e.printStackTrace();
	} catch(IOException e) {
	    e.printStackTrace();
	}
    }
    
    private void initForDraw() {
	
	// Find out the start time of this day
	// -----------------------------------
	
	earliest = null;
	
	// Get the start time of each channel
	for(int i=0;i<channels.length;i++) {
	    
	    Date tmp = channels[i].getStart();
	    if(tmp!=null && (earliest==null || tmp.before(earliest))) {
		earliest = new Date(tmp.getTime());
	    }
	    
	}
	
	// If we failed to get an earliest time
	if(earliest==null) {
	    lg("FreeGuide:: initForDraw - earliest was null.");
	    // Set it to 24 hours before the day we're doing
	    earliest = new Date(theDate.getTime() - 1000*60*60*24);
	}
	
	// Find out the end time of this day
	// ---------------------------------
	
	latest = null;
	
	// Get the end time of each channel
	for(int i=0;i<channels.length;i++) {
	    
	    Date tmp = channels[i].getEnd();
	    if(tmp!=null && (latest==null || tmp.after(latest))) {
		latest = new Date(tmp.getTime());
	    }
	    
	}
	
	// If we failed to get a latest time
	if(latest==null) {
	    lg("FreeGuide:: initForDraw - latest was null.");
	    // Set it to 24 hours after the day we're doing
	    latest = new Date(theDate.getTime() + 1000*60*60*24);
	}
	
    }
    
    /*private FreeGuideProgramme getProgFromCheckbox(Checkbox bx) {
	int i = chks.indexOf(bx);
	return (FreeGuideProgramme)progRefs.get(i);
    }*/
    
    private FreeGuideProgramme getProgFromCheckbox(JCheckBox bx) {
	int i = chks.indexOf(bx);
	return (FreeGuideProgramme)progRefs.get(i);
    }

    private void chkItemStateChanged(java.awt.event.ItemEvent evt) {
	updatePrintedGuide();
    }
    
    /*private void labMouseMoved(java.awt.event.MouseEvent evt) {
	
	// Called when the mouse is moved over a checkbox
	
	Checkbox source = (Checkbox)evt.getSource();
	FreeGuideProgramme prog = getProgFromCheckbox(source);

	infoLabel.setText(source.getLabel() + " - " + prog.getDesc());
	
    }*/

    /*private String twoDigits(int num) {
	
	String ans = String.valueOf(num);
	
	while(ans.length()<2) {
	    ans="0"+num;
	}
	
	return ans;
	
    }*/
    
    private void scrollTime() {
	timeScrollPane.getHorizontalScrollBar().setValue(innerScrollPane.getHorizontalScrollBar().getValue());
    }
    
    private void scrollChannelNames() {
	channelNameScrollPane.getVerticalScrollBar().setValue(innerScrollPane.getVerticalScrollBar().getValue());	
    }
    
    private void drawChannels() {
	
	// Read from options file?
	int channelHeight = 60;
	int halfVerGap = 1;
	int halfHorGap=1;
	int panelWidth = 7500;
	
	SimpleDateFormat fmt = new SimpleDateFormat("HH:mm");
	
	// Delete any old boxes
	if(chks!=null) {
	    for(int i=0;i<chks.size();i++) {
		innerPanel.remove((JCheckBox)chks.get(i));
		innerPanel.remove((JTextArea)txts.get(i));
	    }
	}
	
	// References which allow us to relate a checkbox to a programme:
	chks = new Vector();
	txts = new Vector();
	progRefs = new Vector();
	
	// Temporal width in millisecs
	long temporalWidth = latest.getTime()-earliest.getTime();
	
	// Find the multiplier to help us position programmes
	double widthMultiplier = (double)panelWidth/(double)temporalWidth;
	
	channelNamePanel.setPreferredSize(new Dimension(0, channels.length*channelHeight+50));
	channelNamePanel.setMinimumSize(new Dimension(0, channels.length*channelHeight+50));
	channelNamePanel.setMaximumSize(new Dimension(0, channels.length*channelHeight+50));
	
	long hourCount = earliest.getTime();
	
	hourCount = hourCount - (hourCount % (60*60*1000));
	
	for(long h=hourCount;h<latest.getTime();h+=(60*60*1000)) {
	    
	    JLabel lab = new JLabel(fmt.format(new Date(h)));
	    //System.out.println(fmt.format(new Date(h)));
	    int tmp = (int)((h-earliest.getTime())*widthMultiplier);
	    lab.setBounds(tmp, 0, tmp+(int)(1000*60*60*widthMultiplier)+1, timePanel.getHeight());
	    //lab.setBounds(0,0,100,100);
	    //lab.setOpaque(true);
	    //lab.setBackground(Color.black);
	    //lab.setText("l'km");
	    lab.setFont(new java.awt.Font("Dialog", 0, 12));
	    lab.setBorder(new javax.swing.border.LineBorder(java.awt.Color.black));
	    
	    timePanel.add(lab);
	    txts.add(lab);
	    
	}
	
	timePanel.setPreferredSize(new Dimension((int)((latest.getTime()-earliest.getTime())*widthMultiplier)+50,0));
	timePanel.setMinimumSize(new Dimension((int)((latest.getTime()-earliest.getTime())*widthMultiplier)+50,0));
	timePanel.setMaximumSize(new Dimension((int)((latest.getTime()-earliest.getTime())*widthMultiplier)+50,0));
	
	for(int ch=0;ch<channels.length;ch++) {
	    
	    Vector progs = channels[ch].getProgrammes();
	    
	    JLabel ctxt = new JLabel(channels[ch].getName());
	    ctxt.setBounds(0, (halfVerGap*2)+(ch*channelHeight), channelNamePanel.getWidth()-1, channelHeight-(halfVerGap*4));
	    
	    ctxt.setBackground(Color.yellow);
	    //ctxt.setLineWrap(true);
	    //ctxt.setEditable(false);
	    ctxt.setFont(new java.awt.Font("Dialog", 1, 12));
	    ctxt.setBorder(new javax.swing.border.LineBorder(java.awt.Color.black));
	    //ctxt.setSelectionColor(java.awt.Color.yellow);
	    ctxt.setHorizontalAlignment(JLabel.CENTER);
	    ctxt.setOpaque(true);
	    
	    channelNamePanel.add(ctxt);
	    txts.add(ctxt);
	    
	    for(int pr=0;pr<progs.size();pr++) {
		
		FreeGuideProgramme prog = (FreeGuideProgramme)progs.get(pr);
		
		Date st = prog.getStart();
		Date ed = prog.getSomeEnd();
		
		//JCheckBox chk = new JCheckBox(fmt.format(dte)+" "+prog.getTitle());
		
		JCheckBox chk = new JCheckBox("");
		JTextArea txt = new JTextArea(fmt.format(st)+ "     " + prog.getTitle() + "\n" + prog.getDesc());
		txt.setToolTipText(fmt.format(st)+"-"+fmt.format(ed) + " " + prog.getChannel() + " - " + prog.getTitle() + " - " + prog.getDesc());
		chk.setToolTipText(fmt.format(st)+"-"+fmt.format(ed) + " " + prog.getChannel() + " - " + prog.getTitle() + " - " + prog.getDesc());
		
		//System.out.println(txt.getToolTipText());
		
		//JCheckBox chk = new JCheckBox(twoDigits(prog.getStart().getHours())+":"+twoDigits(prog.getStart().getMinutes())+" "+prog.getTitle());

		int left = halfHorGap+(int)((st.getTime()-earliest.getTime())*widthMultiplier);
		int right = ((int)((ed.getTime()-earliest.getTime())*widthMultiplier)) - (halfHorGap*2);
		int top = halfVerGap+(ch*channelHeight);
		int bottom = ((ch+1)*channelHeight)-(halfVerGap*2);
		
		txt.setBounds(left, top, right-left, bottom-top);
		if(right-left<54) {
		    chk.setBounds(left+((right-left)/2)-6, top+4, 12, 12);
		    txt.setText("\n"+txt.getText());
		} else {
		    chk.setBounds(left+41, top+4, 12, 12);
		}
		txt.setBackground(Color.white);
		chk.setBackground(Color.white);
		
		txt.setLineWrap(true);
		txt.setEditable(false);
		txt.setFont(new java.awt.Font("Dialog", 0, 12));
		txt.setBorder(new javax.swing.border.LineBorder(java.awt.Color.black));
		txt.setSelectionColor(java.awt.Color.white);
		
		/*chk.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
		    public void mouseMoved(java.awt.event.MouseEvent evt) {
			chkMouseMoved(evt);
		    }
		});*/
		
		chk.addItemListener(new java.awt.event.ItemListener() {
		    public void itemStateChanged(java.awt.event.ItemEvent evt) {
			chkItemStateChanged(evt);
		    }
		});
		
		innerPanel.add(chk);
		innerPanel.add(txt);
		
		chks.add(chk);
		txts.add(txt);
		progRefs.add(prog);
		
	    }
	    
	}
	
	//innerPanel.setSize(panelWidth, channels.length*channelHeight);
	innerPanel.setPreferredSize(new java.awt.Dimension(panelWidth, channels.length*channelHeight));
	innerPanel.setMinimumSize(new java.awt.Dimension(panelWidth, channels.length*channelHeight));
	innerPanel.setMaximumSize(new java.awt.Dimension(panelWidth, channels.length*channelHeight));
	//innerScrollPane.setViewportView(innerPanel);
	
	
    }

    private void updatePanel() {
       
	SimpleDateFormat fmt = new SimpleDateFormat("EEE yyyy-MM-dd");
	
	//labDate.setText((1900+theDate.getYear()) + "-" + twoDigits(theDate.getMonth()+1) + "-" + twoDigits(theDate.getDate()));
	
	//labDate.setText(fmt.format(theDate));
	
	getChannelNames();
	
	// Count the channels
	int noChans=channelNames.length;
	
	// Make an array of FreeGuideChannelDay objects
	channels = new FreeGuideChannelDay[noChans];
	
	/*pleaseWait = new FreeGuidePleaseWait();
	pleaseWait.show();*/
	
	labStatus.setText("Processing programme info...");
	
	for(curChan=0;curChan<noChans;curChan++) {
	    
	    /*pleaseWait.setChannel(channelNames[curChan]);
	    pleaseWait.setProgress((int)(100*((float)curChan/(float)noChans)));*/
	    
	    getChannelData();  
	    
	}
	
	labStatus.setText("Done.");
	
	initForDraw();
	
	drawChannels();
	
	updatePrintedGuide();
	
    }
    
    private void updatePrintedGuide() {
	
	SimpleDateFormat fmt = new SimpleDateFormat("EEE yyyy-MM-dd");
	
	printedGuideArea.setText("Your TV Guide for "+fmt.format(theDate)+":\n");
	
	//guideTextArea.setText("Your TV Guide for "+(1900+theDate.getYear())+"-"+twoDigits(theDate.getMonth()+1)+"-"+twoDigits(theDate.getDate())+":\n");
	
	
	// Get all ticked programmes into a vector
	// ---------------------------------------
	
	Vector listedProgs = new Vector();
	
	for(int i=0;i<chks.size();i++) {
	    
	    if(((JCheckBox)chks.get(i)).isSelected()) {
		
		listedProgs.add((FreeGuideProgramme)progRefs.get(i));
		
	    }
	    
	}
	
	// Sort by start time
	// ------------------
	Collections.sort(listedProgs, new FreeGuideProgrammeStartTimeComparator());
	
	// Add them to the printer list
	// ----------------------------
	
	for(int i=0;i<listedProgs.size();i++) {
	
	    FreeGuideProgramme prog = (FreeGuideProgramme)listedProgs.get(i);
	
	    fmt = new SimpleDateFormat("HH:mm");
	    
	    printedGuideArea.append("\n"+fmt.format(prog.getStart())+"-"+fmt.format(prog.getSomeEnd())+" "+prog.getChannel()+" - "+prog.getTitle()+"\n");
	    printedGuideArea.append(prog.getDesc()+"\n");
	    
	}
	
    }
    
    public void startDocument() {  
	saxLoc = new String();
    }
    
    public void endDocument() {
	saxLoc=null;
    }
    
    public void startElement(String name, org.xml.sax.Attributes attrs) {
	saxLoc+=":"+name;
	
	if(saxLoc.equals(":tv:programme")) {
	    
	    String start = attrs.getValue("start");
	    
	    if(attrs.getIndex("end")!=-1) {

		String end = attrs.getValue("end");
		channels[curChan].addProgramme(start, end);
		
	    } else {

		channels[curChan].addProgramme(start);

	    }
	    
	}
    }
    
    public void endElement(String name) {
	
	if(saxLoc.endsWith(name)) {
	    
	    saxLoc=saxLoc.substring(0, saxLoc.length()-(name.length()+1));
	    
	} else {
	    parseError();
	}
	
    }
    
    public void characters(String data) {
	
	//System.out.println("chars"+saxLoc+"  "+data);
	
	if(saxLoc.equals(":tv:programme:title")) {
	    
	    channels[curChan].getLatestProg().setTitle(data);
	    
	} else if (saxLoc.equals(":tv:programme:desc")) {
	    
	    channels[curChan].getLatestProg().setDesc(data);
	    
	} else if (saxLoc.equals(":tv:programme:category")) {
	    
	    channels[curChan].getLatestProg().setCategory(data);
	    
	}
	
    }
    
    private void parseError() {
	lg("Error parsing XML.");
	
	//Thread.currentThread().dumpStack();
	
	System.exit(1);
    }
    
    private void lg(String logstr) {
    
	Date dt = new Date();
	
	SimpleDateFormat fmt = new SimpleDateFormat("yyyy-MM-dd HH:mm-ss");
	
	String str = fmt.format(dt) + " - Viewer(java2) - "+logstr; 

	System.out.println(str);
	
	try {
	    
	    BufferedWriter buffy = new BufferedWriter(new FileWriter(freeGuideHomeDir+"log.txt", true));
	    
	    buffy.write(str);
	    buffy.newLine();

	    buffy.close();
	    
	} catch(IOException e) {
	    e.printStackTrace();
	}
	
    }
    
    public static void main(String args[]) {
	new FreeGuide().show();
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenuItem menQuit;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem menChannels;
    private javax.swing.JMenuItem menFavourites;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JMenuItem menParser;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JMenuItem menUserGuide;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JMenuItem menAbout;
    private javax.swing.JPanel topPanel;
    private javax.swing.JButton butGetListings;
    private javax.swing.JButton butPrev;
    private javax.swing.JComboBox comTheDate;
    private javax.swing.JButton butNext;
    private javax.swing.JSplitPane splitPane;
    private javax.swing.JPanel outerPanel;
    private javax.swing.JScrollPane innerScrollPane;
    private javax.swing.JPanel innerPanel;
    private javax.swing.JScrollPane channelNameScrollPane;
    private javax.swing.JPanel channelNamePanel;
    private javax.swing.JScrollPane timeScrollPane;
    private javax.swing.JPanel timePanel;
    private javax.swing.JScrollPane printedGuideScrollPane;
    private javax.swing.JTextArea printedGuideArea;
    private javax.swing.JLabel labStatus;
    private javax.swing.JProgressBar progressBar;
    // End of variables declaration//GEN-END:variables

    private static final int MAX_FILENAME_LENGTH=16;
    
    private String[] channelNames;
	// The names of the channels the user has chosen
    private FreeGuideChannelDay[] channels;
	// The FreeGuideChannelDay objects that hold the prog. info
    
    private String saxLoc;  // Holds our current pos in the XML hierarchy

    private int curChan;    // The channel we're doing now
    
    private Date earliest;  // The beginning of this day
    private Date latest;    // The end of this day
    
    private Date theDate;   // The date for which we are listing programmes
    
    private Vector chks;	// Stores references to all the checkboxes shown
    private Vector txts;	// Stores references to all the textareas shown
    private Vector progRefs;	// The programmes to which each checkbox refers
    
    private String freeGuideHomeDir;	// The home dir/root path of this prog
    
}
