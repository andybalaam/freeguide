/*
 * FreeGuide J2
 *
 * Copyright (c) 2001 by Andy Balaam
 *
 * Released under the GNU General Public License
 * with ABSOLUTELY NO WARRANTY.
 *
 * See the file COPYING for more information.
 */

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.Collections;
import java.util.Vector;
import javax.swing.DefaultListModel;
import javax.swing.JTextArea;
import javax.swing.JList;

/**
 * The options screen in FreeGuide with tabs for Download Options,
 * View Options and Advanced Options.
 *
 * @author  Andy Balaam
 * @version 2
 */
public class FreeGuideOptions extends javax.swing.JFrame {

	/** Creates new form FreeGuideOptions */
    public FreeGuideOptions() {
		channels = new DefaultListModel();
		
        initComponents();
		initMyComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
	private void initComponents() {//GEN-BEGIN:initComponents
		grpDLAmount = new javax.swing.ButtonGroup();
		tabPane = new javax.swing.JTabbedPane();
		panDownload = new javax.swing.JPanel();
		labChannels = new javax.swing.JLabel();
		labAmount = new javax.swing.JLabel();
		radDay = new javax.swing.JRadioButton();
		radWeek = new javax.swing.JRadioButton();
		radAll = new javax.swing.JRadioButton();
		jScrollPane3 = new javax.swing.JScrollPane();
		lisChannels = new javax.swing.JList(channels);
		butRefresh = new javax.swing.JButton();
		labNote = new javax.swing.JLabel();
		panView = new javax.swing.JPanel();
		labNone = new javax.swing.JLabel();
		panAdvanced = new javax.swing.JPanel();
		labDLCmdLine = new javax.swing.JLabel();
		jScrollPane1 = new javax.swing.JScrollPane();
		txaDLCmdLine = new javax.swing.JTextArea();
		labChCmdLine = new javax.swing.JLabel();
		jScrollPane2 = new javax.swing.JScrollPane();
		txaChCmdLine = new javax.swing.JTextArea();
		labChFile = new javax.swing.JLabel();
		txtChFile = new javax.swing.JTextField();
		labFGHomeDir = new javax.swing.JLabel();
		txtFGHomeDir = new javax.swing.JTextField();
		labLogFile = new javax.swing.JLabel();
		txtLogFile = new javax.swing.JTextField();
		panBottom = new javax.swing.JPanel();
		butOK = new javax.swing.JButton();
		butCancel = new javax.swing.JButton();
		
		grpDLAmount.add(radDay);
		grpDLAmount.add(radWeek);
		grpDLAmount.add(radAll);
		
		getContentPane().setLayout(new java.awt.GridBagLayout());
		java.awt.GridBagConstraints gridBagConstraints1;
		
		setTitle("FreeGuide Options");
		addWindowListener(new java.awt.event.WindowAdapter() {
			public void windowClosing(java.awt.event.WindowEvent evt) {
				exitForm(evt);
			}
		});
		
		panDownload.setLayout(new java.awt.GridBagLayout());
		java.awt.GridBagConstraints gridBagConstraints2;
		
		labChannels.setText("Channels to download:");
		gridBagConstraints2 = new java.awt.GridBagConstraints();
		gridBagConstraints2.gridx = 0;
		gridBagConstraints2.gridy = 0;
		gridBagConstraints2.insets = new java.awt.Insets(5, 5, 5, 5);
		panDownload.add(labChannels, gridBagConstraints2);
		
		labAmount.setText("Amount to download:");
		gridBagConstraints2 = new java.awt.GridBagConstraints();
		gridBagConstraints2.gridx = 0;
		gridBagConstraints2.gridy = 5;
		gridBagConstraints2.insets = new java.awt.Insets(20, 5, 5, 5);
		panDownload.add(labAmount, gridBagConstraints2);
		
		radDay.setText("Today");
		radDay.setPreferredSize(new java.awt.Dimension(116, 21));
		radDay.setMaximumSize(new java.awt.Dimension(116, 21));
		radDay.setMinimumSize(new java.awt.Dimension(116, 21));
		radDay.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				radDayActionPerformed(evt);
			}
		});
		
		gridBagConstraints2 = new java.awt.GridBagConstraints();
		gridBagConstraints2.gridx = 0;
		gridBagConstraints2.gridy = 6;
		gridBagConstraints2.insets = new java.awt.Insets(5, 0, 0, 0);
		panDownload.add(radDay, gridBagConstraints2);
		
		radWeek.setText("This Week");
		radWeek.setPreferredSize(new java.awt.Dimension(116, 21));
		radWeek.setMaximumSize(new java.awt.Dimension(116, 21));
		radWeek.setMinimumSize(new java.awt.Dimension(116, 21));
		radWeek.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				radWeekActionPerformed(evt);
			}
		});
		
		gridBagConstraints2 = new java.awt.GridBagConstraints();
		gridBagConstraints2.gridx = 0;
		gridBagConstraints2.gridy = 7;
		gridBagConstraints2.insets = new java.awt.Insets(5, 0, 0, 0);
		panDownload.add(radWeek, gridBagConstraints2);
		
		radAll.setText("All Available");
		radAll.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				radAllActionPerformed(evt);
			}
		});
		
		gridBagConstraints2 = new java.awt.GridBagConstraints();
		gridBagConstraints2.gridx = 0;
		gridBagConstraints2.gridy = 8;
		gridBagConstraints2.insets = new java.awt.Insets(5, 0, 5, 0);
		panDownload.add(radAll, gridBagConstraints2);
		
		lisChannels.addFocusListener(new java.awt.event.FocusAdapter() {
			public void focusLost(java.awt.event.FocusEvent evt) {
				lisChannelsFocusLost(evt);
			}
		});
		
		jScrollPane3.setViewportView(lisChannels);
		
		gridBagConstraints2 = new java.awt.GridBagConstraints();
		gridBagConstraints2.gridx = 0;
		gridBagConstraints2.gridy = 1;
		gridBagConstraints2.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints2.weightx = 0.1;
		gridBagConstraints2.weighty = 0.9;
		panDownload.add(jScrollPane3, gridBagConstraints2);
		
		butRefresh.setText("Refresh Channels List");
		butRefresh.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				butRefreshActionPerformed(evt);
			}
		});
		
		gridBagConstraints2 = new java.awt.GridBagConstraints();
		gridBagConstraints2.gridx = 0;
		gridBagConstraints2.gridy = 3;
		gridBagConstraints2.insets = new java.awt.Insets(5, 5, 5, 5);
		gridBagConstraints2.anchor = java.awt.GridBagConstraints.NORTHEAST;
		panDownload.add(butRefresh, gridBagConstraints2);
		
		labNote.setText("(Hold CTRL to select required channels)");
		labNote.setFont(new java.awt.Font("Dialog", 0, 12));
		gridBagConstraints2 = new java.awt.GridBagConstraints();
		gridBagConstraints2.gridx = 0;
		gridBagConstraints2.gridy = 2;
		panDownload.add(labNote, gridBagConstraints2);
		
		tabPane.addTab("Download", panDownload);
		
		panView.setLayout(new java.awt.BorderLayout());
		
		labNone.setText("[No Settings]");
		labNone.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		panView.add(labNone, java.awt.BorderLayout.CENTER);
		
		tabPane.addTab("View", panView);
		
		panAdvanced.setLayout(new java.awt.GridBagLayout());
		java.awt.GridBagConstraints gridBagConstraints3;
		
		panAdvanced.setPreferredSize(new java.awt.Dimension(100, 20));
		panAdvanced.setMinimumSize(new java.awt.Dimension(100, 20));
		panAdvanced.setMaximumSize(new java.awt.Dimension(100, 20));
		labDLCmdLine.setText("Downloading command line:");
		gridBagConstraints3 = new java.awt.GridBagConstraints();
		gridBagConstraints3.gridx = 0;
		gridBagConstraints3.gridy = 0;
		gridBagConstraints3.insets = new java.awt.Insets(5, 5, 5, 5);
		gridBagConstraints3.anchor = java.awt.GridBagConstraints.NORTHEAST;
		panAdvanced.add(labDLCmdLine, gridBagConstraints3);
		
		txaDLCmdLine.setRows(3);
		txaDLCmdLine.setPreferredSize(new java.awt.Dimension(5000, 39));
		txaDLCmdLine.setMaximumSize(new java.awt.Dimension(5000, 200));
		txaDLCmdLine.setMinimumSize(new java.awt.Dimension(5000, 200));
		txaDLCmdLine.addFocusListener(new java.awt.event.FocusAdapter() {
			public void focusLost(java.awt.event.FocusEvent evt) {
				txaDLCmdLineFocusLost(evt);
			}
		});
		
		jScrollPane1.setViewportView(txaDLCmdLine);
		
		gridBagConstraints3 = new java.awt.GridBagConstraints();
		gridBagConstraints3.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints3.insets = new java.awt.Insets(5, 5, 5, 5);
		gridBagConstraints3.weightx = 0.9;
		gridBagConstraints3.weighty = 0.1;
		panAdvanced.add(jScrollPane1, gridBagConstraints3);
		
		labChCmdLine.setText("Channels command line:");
		gridBagConstraints3 = new java.awt.GridBagConstraints();
		gridBagConstraints3.gridx = 0;
		gridBagConstraints3.gridy = 1;
		gridBagConstraints3.insets = new java.awt.Insets(5, 5, 5, 5);
		gridBagConstraints3.anchor = java.awt.GridBagConstraints.NORTHEAST;
		panAdvanced.add(labChCmdLine, gridBagConstraints3);
		
		txaChCmdLine.setRows(3);
		txaChCmdLine.setPreferredSize(new java.awt.Dimension(5000, 39));
		txaChCmdLine.setMaximumSize(new java.awt.Dimension(5000, 200));
		txaChCmdLine.setMinimumSize(new java.awt.Dimension(5000, 200));
		txaChCmdLine.addFocusListener(new java.awt.event.FocusAdapter() {
			public void focusLost(java.awt.event.FocusEvent evt) {
				txaChCmdLineFocusLost(evt);
			}
		});
		
		jScrollPane2.setViewportView(txaChCmdLine);
		
		gridBagConstraints3 = new java.awt.GridBagConstraints();
		gridBagConstraints3.gridx = 1;
		gridBagConstraints3.gridy = 1;
		gridBagConstraints3.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints3.insets = new java.awt.Insets(5, 5, 5, 5);
		gridBagConstraints3.weightx = 0.9;
		gridBagConstraints3.weighty = 0.1;
		panAdvanced.add(jScrollPane2, gridBagConstraints3);
		
		labChFile.setText("Channels file name:");
		gridBagConstraints3 = new java.awt.GridBagConstraints();
		gridBagConstraints3.gridx = 0;
		gridBagConstraints3.gridy = 2;
		gridBagConstraints3.insets = new java.awt.Insets(5, 5, 5, 5);
		gridBagConstraints3.anchor = java.awt.GridBagConstraints.EAST;
		panAdvanced.add(labChFile, gridBagConstraints3);
		
		txtChFile.setPreferredSize(new java.awt.Dimension(10000, 20));
		txtChFile.setMaximumSize(new java.awt.Dimension(10000, 20));
		txtChFile.setMinimumSize(new java.awt.Dimension(200, 20));
		txtChFile.addFocusListener(new java.awt.event.FocusAdapter() {
			public void focusLost(java.awt.event.FocusEvent evt) {
				txtChFileFocusLost(evt);
			}
		});
		
		gridBagConstraints3 = new java.awt.GridBagConstraints();
		gridBagConstraints3.gridx = 1;
		gridBagConstraints3.gridy = 2;
		gridBagConstraints3.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints3.insets = new java.awt.Insets(5, 5, 5, 5);
		gridBagConstraints3.weightx = 0.9;
		panAdvanced.add(txtChFile, gridBagConstraints3);
		
		labFGHomeDir.setText("FreeGuide home directory:");
		gridBagConstraints3 = new java.awt.GridBagConstraints();
		gridBagConstraints3.gridx = 0;
		gridBagConstraints3.gridy = 3;
		gridBagConstraints3.insets = new java.awt.Insets(5, 5, 5, 5);
		gridBagConstraints3.anchor = java.awt.GridBagConstraints.EAST;
		panAdvanced.add(labFGHomeDir, gridBagConstraints3);
		
		txtFGHomeDir.setPreferredSize(new java.awt.Dimension(10000, 20));
		txtFGHomeDir.setMaximumSize(new java.awt.Dimension(10000, 20));
		txtFGHomeDir.setMinimumSize(new java.awt.Dimension(200, 20));
		txtFGHomeDir.addFocusListener(new java.awt.event.FocusAdapter() {
			public void focusLost(java.awt.event.FocusEvent evt) {
				txtFGHomeDirFocusLost(evt);
			}
		});
		
		gridBagConstraints3 = new java.awt.GridBagConstraints();
		gridBagConstraints3.gridx = 1;
		gridBagConstraints3.gridy = 3;
		gridBagConstraints3.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints3.insets = new java.awt.Insets(5, 5, 5, 5);
		gridBagConstraints3.weightx = 0.9;
		panAdvanced.add(txtFGHomeDir, gridBagConstraints3);
		
		labLogFile.setText("Log file:");
		gridBagConstraints3 = new java.awt.GridBagConstraints();
		gridBagConstraints3.gridx = 0;
		gridBagConstraints3.gridy = 4;
		gridBagConstraints3.insets = new java.awt.Insets(5, 5, 5, 5);
		gridBagConstraints3.anchor = java.awt.GridBagConstraints.EAST;
		panAdvanced.add(labLogFile, gridBagConstraints3);
		
		txtLogFile.setPreferredSize(new java.awt.Dimension(10000, 20));
		txtLogFile.setMaximumSize(new java.awt.Dimension(10000, 20));
		txtLogFile.setMinimumSize(new java.awt.Dimension(200, 20));
		txtLogFile.addFocusListener(new java.awt.event.FocusAdapter() {
			public void focusLost(java.awt.event.FocusEvent evt) {
				txtLogFileFocusLost(evt);
			}
		});
		
		gridBagConstraints3 = new java.awt.GridBagConstraints();
		gridBagConstraints3.gridx = 1;
		gridBagConstraints3.gridy = 4;
		gridBagConstraints3.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints3.insets = new java.awt.Insets(5, 5, 5, 5);
		gridBagConstraints3.weightx = 0.9;
		panAdvanced.add(txtLogFile, gridBagConstraints3);
		
		tabPane.addTab("Advanced", panAdvanced);
		
		gridBagConstraints1 = new java.awt.GridBagConstraints();
		gridBagConstraints1.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints1.weightx = 0.9;
		gridBagConstraints1.weighty = 0.9;
		getContentPane().add(tabPane, gridBagConstraints1);
		
		butOK.setText("OK");
		butOK.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				butOKActionPerformed(evt);
			}
		});
		
		panBottom.add(butOK);
		
		butCancel.setText("Cancel");
		butCancel.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				butCancelActionPerformed(evt);
			}
		});
		
		panBottom.add(butCancel);
		
		gridBagConstraints1 = new java.awt.GridBagConstraints();
		gridBagConstraints1.gridx = 0;
		gridBagConstraints1.gridy = 1;
		gridBagConstraints1.anchor = java.awt.GridBagConstraints.SOUTHEAST;
		getContentPane().add(panBottom, gridBagConstraints1);
		
		pack();
		java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
		setSize(new java.awt.Dimension(450, 400));
		setLocation((screenSize.width-450)/2,(screenSize.height-400)/2);
	}//GEN-END:initComponents

	private void radDayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radDayActionPerformed
		
		FreeGuide.config.setValue("downloadAmount", "Day");
		
	}//GEN-LAST:event_radDayActionPerformed

	private void radAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radAllActionPerformed
		
		FreeGuide.config.setValue("downloadAmount", "All");
		
	}//GEN-LAST:event_radAllActionPerformed

	private void radWeekActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radWeekActionPerformed
		
		FreeGuide.config.setValue("downloadAmount", "Week");
		
	}//GEN-LAST:event_radWeekActionPerformed

	private void txtLogFileFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtLogFileFocusLost
		
		FreeGuide.config.setValue("logFile", txtLogFile.getText());
		
	}//GEN-LAST:event_txtLogFileFocusLost

	private void txtFGHomeDirFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFGHomeDirFocusLost
		
		FreeGuide.config.setValue("freeguideDir", txtFGHomeDir.getText());
		
	}//GEN-LAST:event_txtFGHomeDirFocusLost

	private void txtChFileFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtChFileFocusLost
		
		FreeGuide.config.setValue("channelsFile", txtChFile.getText());
		
	}//GEN-LAST:event_txtChFileFocusLost

	private void txaChCmdLineFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txaChCmdLineFocusLost
		
		FreeGuide.config.setListValue("channelsCommandLine", getVectorFromJTextArea(txaChCmdLine));
		
	}//GEN-LAST:event_txaChCmdLineFocusLost

	private void txaDLCmdLineFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txaDLCmdLineFocusLost
		
		FreeGuide.config.setListValue("downloadCommandLine", getVectorFromJTextArea(txaDLCmdLine));
		
	}//GEN-LAST:event_txaDLCmdLineFocusLost

	private void lisChannelsFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_lisChannelsFocusLost
		
		FreeGuide.config.setListValue("channels", getVectorFromJList(lisChannels));
		
	}//GEN-LAST:event_lisChannelsFocusLost

	private void butRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butRefreshActionPerformed

		downloadChannels();
		
	}//GEN-LAST:event_butRefreshActionPerformed

	private void butCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butCancelActionPerformed
		
		if(FreeGuide.config.isChanged()) {
			
			FreeGuide.config.load();
			
		}
		
		quit();
		
	}//GEN-LAST:event_butCancelActionPerformed

	private void butOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butOKActionPerformed
		
		if(FreeGuide.config.isChanged()) {
			
			FreeGuide.config.save();
			
		}
		
		quit();
		
	}//GEN-LAST:event_butOKActionPerformed

	//------------------------------------------------------------------------
	
	/**
	 * Gets the values from the config file and places them in the controls
	 * on the screen.
	 */
	private void initMyComponents() {
		
		showAdvanced();
		
		showView();
		
		showDownload();
		
	}
	
	/**
	 * Gets the values for the Advanced tab from the config file.
	 */
	private void showAdvanced() {
		
		// Get the system line break character
		String lineBreak = System.getProperty("line.separator");
		
		// Do the download command line
		Vector tmp = FreeGuide.config.getListValue("downloadCommandLine");
		
		if(tmp!=null) {
		
			for(int i=0;i<tmp.size();i++) {
				txaDLCmdLine.append((String)tmp.get(i)+lineBreak);
			}
			
		}
		
		// Do the channels command line
		tmp = FreeGuide.config.getListValue("channelsCommandLine");
		
		if(tmp!=null) {
		
			for(int i=0;i<tmp.size();i++) {
				txaChCmdLine.append((String)tmp.get(i)+lineBreak);
			}
			
		}
		
		// Do the channels file, FreeGuide home directory and log boxes
		txtChFile.setText(FreeGuide.config.getValue("channelsFile"));
		txtFGHomeDir.setText(FreeGuide.config.getValue("freeguideDir"));
		txtLogFile.setText(FreeGuide.config.getValue("logFile"));
		
	}//showAdvanced
	
	/**
	 * Gets the values for the View tab from the config file.
	 */
	private void showView() {
		
		// Do nothing
		
	}//showView
	
	/**
	 * Gets the values for the Download tab from the config file.
	 */
	private void showDownload() {
		
		// Do the channels box
		String strChannelsFile = FreeGuide.config.getValue("channelsFile");
		
		if(strChannelsFile!=null) {
			File channelsFile = new File(strChannelsFile);
				
			Vector tmpChannels = new Vector();
		
			try {
		
				BufferedReader buffy = new BufferedReader(new FileReader(channelsFile));

				String line = buffy.readLine();

				while(line!=null) {
				
					tmpChannels.addElement(line.trim());
				
					line = buffy.readLine();
				
					if(line==null) {
						break;
					}
				
					line = buffy.readLine();
				
				}
			
				buffy.close();

			} catch(IOException e) {
			
				e.printStackTrace();
			
			}

			Collections.sort(tmpChannels);
		
			for(int i=0;i<tmpChannels.size();i++) {
				channels.addElement(tmpChannels.get(i));
			}
		
			Vector tmpSelChans = FreeGuide.config.getListValue("channels");
		
			if(tmpSelChans!=null) {
			
				int[] tmpSelInts = new int[tmpSelChans.size()];
		
				for(int i=0;i<tmpSelInts.length;i++) {
			
					tmpSelInts[i] = tmpChannels.indexOf(tmpSelChans.get(i));
			
				}//for
		
				lisChannels.setSelectedIndices(tmpSelInts);
				
			}
			
		}//if
		
		//---------------
		
		// Do the download amount radio buttons
		String tmpDLAmt = FreeGuide.config.getValue("downloadAmount");
		
		if(tmpDLAmt==null || tmpDLAmt.equals("All")) {
			grpDLAmount.setSelected(radAll.getModel(), true);
		} else if(tmpDLAmt.equals("Week")) {
			grpDLAmount.setSelected(radWeek.getModel(), true);
		} else {
			grpDLAmount.setSelected(radDay.getModel(), true);
		}

	}//showDownload

	/**
	 * Download the list of channels from the web.
	 */
	private void downloadChannels() {
		
		// Get the name of the channels file
		String channelsFile = FreeGuide.config.getValue("channelsFile");
		
		// Get the commands to download the channels file
		Vector channelCmds = FreeGuide.config.getListValue("channelsCommandLine");
		
		// Execute the commands to download channels list
		for(int i=0;i<channelCmds.size();i++) {
		
			FreeGuide.execExternal(((String)channelCmds.get(i))+" "+channelsFile);
			
		}
		
	}
	
	/**
	 * Alters the config file because one of the download amount
	 * check boxes has been changed
	 */
	/*
	 * not needed - done in event procedures
	 *
	private void dlAmountChanged() {
		
		String newAmt;
		
		if(grpDLAmount.getSelection()==radDay) {
			newAmt="Day";
		} else if(grpDLAmount.getSelection()==radWeek) {
			newAmt="Week";
		} else {
			newAmt="All";
		}//if
		
		FreeGuide.config.setValue("downloadAmount", newAmt);
		
	}*/
	
	/** 
	 * Puts each line of a JTestArea into a vector.
	 *
	 * @param txtArea the 
	 * @return        the Vector composed of individual Strings for each 
	 *		          line of txtArea
	 */
	private Vector getVectorFromJTextArea(JTextArea txtArea) {
		
		// Get the system line break character
		String lineBreak = System.getProperty("line.separator");
		
		// Get the text out of the text box
		String txt = txtArea.getText();
		
		// Initialise the vector we'll return
		Vector ans = new Vector();
		
		// Find the first line break
		int i = txt.indexOf(lineBreak);
		
		// Loop until no more line breaks were found
		while(i>-1) {
			
			// Add the first line in the string to the vector
			ans.add(txt.substring(0, i));
			
			// Cut this line out of the vector
			txt = txt.substring(i+lineBreak.length());
			
			// Find the next line break
			i = txt.indexOf(lineBreak);
			
		}//while
		
		ans.add(txt);
		
		return ans;
		
	}//getVectorFromJTextArea
	
	/** 
	 * Puts each line of a JList into a vector.
	 *
	 * @param list the list to process
	 * @return     the Vector composed of individual Strings for each 
	 *		       line of list
	 */
	
	private Vector getVectorFromJList(JList list) {
		
		// Initialise the vector we'll return
		Vector ans = new Vector();
		
		// Get the list values
		Object[] selectedItems = list.getSelectedValues();
		
		for(int i=0;i<selectedItems.length;i++) {
			
			ans.add(selectedItems[i]);
			
		}
		
		return ans;
		
	}//getVectorFromJList
	
    /** 
	 * Calls the quit method to exit.
	 */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        
		quit();
		
    }//GEN-LAST:event_exitForm

	/** 
	 * Closes the form and goes back to the viewer.
	 */
	private void quit() {
		
		hide();
		new FreeGuideViewer().show();
		dispose();
		
	}
	
	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.ButtonGroup grpDLAmount;
	private javax.swing.JTabbedPane tabPane;
	private javax.swing.JPanel panDownload;
	private javax.swing.JLabel labChannels;
	private javax.swing.JLabel labAmount;
	private javax.swing.JRadioButton radDay;
	private javax.swing.JRadioButton radWeek;
	private javax.swing.JRadioButton radAll;
	private javax.swing.JScrollPane jScrollPane3;
	private javax.swing.JList lisChannels;
	private javax.swing.JButton butRefresh;
	private javax.swing.JLabel labNote;
	private javax.swing.JPanel panView;
	private javax.swing.JLabel labNone;
	private javax.swing.JPanel panAdvanced;
	private javax.swing.JLabel labDLCmdLine;
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JTextArea txaDLCmdLine;
	private javax.swing.JLabel labChCmdLine;
	private javax.swing.JScrollPane jScrollPane2;
	private javax.swing.JTextArea txaChCmdLine;
	private javax.swing.JLabel labChFile;
	private javax.swing.JTextField txtChFile;
	private javax.swing.JLabel labFGHomeDir;
	private javax.swing.JTextField txtFGHomeDir;
	private javax.swing.JLabel labLogFile;
	private javax.swing.JTextField txtLogFile;
	private javax.swing.JPanel panBottom;
	private javax.swing.JButton butOK;
	private javax.swing.JButton butCancel;
	// End of variables declaration//GEN-END:variables

	DefaultListModel channels;
		// The ListModel holding the names of channels in the listbox
	
}
